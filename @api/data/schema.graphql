"""All input for the `acceptFriendRequest` mutation."""
input AcceptFriendRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: UUID!
}

"""The output of our `acceptFriendRequest` mutation."""
type AcceptFriendRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type ActivityFeed {
  """Reads a single `User` that is related to this `ActivityFeed`."""
  author: User
  authorId: UUID
  checkInDate: Date
  createdAt: Datetime
  id: Int
  isPublic: Boolean

  """Reads a single `Item` that is related to this `ActivityFeed`."""
  item: Item
  itemId: Int
  likes: Int
  location: UUID
  rating: Int
  review: String
}

"""A connection to a list of `ActivityFeed` values."""
type ActivityFeedsConnection {
  """
  A list of edges which contains the `ActivityFeed` and cursor to aid in pagination.
  """
  edges: [ActivityFeedsEdge!]!

  """A list of `ActivityFeed` objects."""
  nodes: [ActivityFeed!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ActivityFeed` you could get from the connection."""
  totalCount: Int!
}

"""A `ActivityFeed` edge in the connection."""
type ActivityFeedsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ActivityFeed` at the end of the edge."""
  node: ActivityFeed!
}

"""Methods to use when ordering `ActivityFeed`."""
enum ActivityFeedsOrderBy {
  NATURAL
}

type Brand {
  """Reads and enables pagination through a set of `Company`."""
  companiesByItemBrandIdAndManufacturerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandCompaniesByItemBrandIdAndManufacturerIdManyToManyConnection!

  """Reads and enables pagination through a set of `Company`."""
  companiesByItemEditSuggestionBrandIdAndManufacturerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandCompaniesByItemEditSuggestionBrandIdAndManufacturerIdManyToManyConnection!

  """Reads a single `Company` that is related to this `Brand`."""
  company: Company
  companyId: Int
  createdAt: Datetime!
  createdBy: UUID
  id: Int!
  isVerified: Boolean

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """Reads and enables pagination through a set of `Item`."""
  items(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """Reads and enables pagination through a set of `Item`."""
  itemsByItemEditSuggestionBrandIdAndItemId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandItemsByItemEditSuggestionBrandIdAndItemIdManyToManyConnection!
  name: ShortText

  """Reads and enables pagination through a set of `Type`."""
  typesByItemBrandIdAndTypeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Type`."""
    orderBy: [TypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandTypesByItemBrandIdAndTypeIdManyToManyConnection!

  """Reads and enables pagination through a set of `Type`."""
  typesByItemEditSuggestionBrandIdAndTypeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Type`."""
    orderBy: [TypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandTypesByItemEditSuggestionBrandIdAndTypeIdManyToManyConnection!

  """Reads a single `User` that is related to this `Brand`."""
  userByCreatedBy: User

  """Reads and enables pagination through a set of `User`."""
  usersByItemBrandIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandUsersByItemBrandIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByItemBrandIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandUsersByItemBrandIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByItemEditSuggestionBrandIdAndAuthorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandUsersByItemEditSuggestionBrandIdAndAuthorIdManyToManyConnection!
}

"""A connection to a list of `Company` values, with data from `Item`."""
type BrandCompaniesByItemBrandIdAndManufacturerIdManyToManyConnection {
  """
  A list of edges which contains the `Company`, info from the `Item`, and the cursor to aid in pagination.
  """
  edges: [BrandCompaniesByItemBrandIdAndManufacturerIdManyToManyEdge!]!

  """A list of `Company` objects."""
  nodes: [Company!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Company` you could get from the connection."""
  totalCount: Int!
}

"""A `Company` edge in the connection, with data from `Item`."""
type BrandCompaniesByItemBrandIdAndManufacturerIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Item`."""
  itemsByManufacturerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """The `Company` at the end of the edge."""
  node: Company!
}

"""
A connection to a list of `Company` values, with data from `ItemEditSuggestion`.
"""
type BrandCompaniesByItemEditSuggestionBrandIdAndManufacturerIdManyToManyConnection {
  """
  A list of edges which contains the `Company`, info from the `ItemEditSuggestion`, and the cursor to aid in pagination.
  """
  edges: [BrandCompaniesByItemEditSuggestionBrandIdAndManufacturerIdManyToManyEdge!]!

  """A list of `Company` objects."""
  nodes: [Company!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Company` you could get from the connection."""
  totalCount: Int!
}

"""
A `Company` edge in the connection, with data from `ItemEditSuggestion`.
"""
type BrandCompaniesByItemEditSuggestionBrandIdAndManufacturerIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestionsByManufacturerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """The `Company` at the end of the edge."""
  node: Company!
}

"""
A condition to be used against `Brand` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BrandCondition {
  """Checks for equality with the object’s `companyId` field."""
  companyId: Int

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""
A connection to a list of `Item` values, with data from `ItemEditSuggestion`.
"""
type BrandItemsByItemEditSuggestionBrandIdAndItemIdManyToManyConnection {
  """
  A list of edges which contains the `Item`, info from the `ItemEditSuggestion`, and the cursor to aid in pagination.
  """
  edges: [BrandItemsByItemEditSuggestionBrandIdAndItemIdManyToManyEdge!]!

  """A list of `Item` objects."""
  nodes: [Item!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Item` you could get from the connection."""
  totalCount: Int!
}

"""A `Item` edge in the connection, with data from `ItemEditSuggestion`."""
type BrandItemsByItemEditSuggestionBrandIdAndItemIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """The `Item` at the end of the edge."""
  node: Item!
}

"""
Represents an update to a `Brand`. Fields that are set will be updated.
"""
input BrandPatch {
  companyId: Int
  isVerified: Boolean
  name: ShortText
}

"""A connection to a list of `Type` values, with data from `Item`."""
type BrandTypesByItemBrandIdAndTypeIdManyToManyConnection {
  """
  A list of edges which contains the `Type`, info from the `Item`, and the cursor to aid in pagination.
  """
  edges: [BrandTypesByItemBrandIdAndTypeIdManyToManyEdge!]!

  """A list of `Type` objects."""
  nodes: [Type!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Type` you could get from the connection."""
  totalCount: Int!
}

"""A `Type` edge in the connection, with data from `Item`."""
type BrandTypesByItemBrandIdAndTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Item`."""
  items(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """The `Type` at the end of the edge."""
  node: Type!
}

"""
A connection to a list of `Type` values, with data from `ItemEditSuggestion`.
"""
type BrandTypesByItemEditSuggestionBrandIdAndTypeIdManyToManyConnection {
  """
  A list of edges which contains the `Type`, info from the `ItemEditSuggestion`, and the cursor to aid in pagination.
  """
  edges: [BrandTypesByItemEditSuggestionBrandIdAndTypeIdManyToManyEdge!]!

  """A list of `Type` objects."""
  nodes: [Type!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Type` you could get from the connection."""
  totalCount: Int!
}

"""A `Type` edge in the connection, with data from `ItemEditSuggestion`."""
type BrandTypesByItemEditSuggestionBrandIdAndTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """The `Type` at the end of the edge."""
  node: Type!
}

"""A connection to a list of `User` values, with data from `Item`."""
type BrandUsersByItemBrandIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `User`, info from the `Item`, and the cursor to aid in pagination.
  """
  edges: [BrandUsersByItemBrandIdAndCreatedByManyToManyEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Item`."""
type BrandUsersByItemBrandIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Item`."""
  itemsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """The `User` at the end of the edge."""
  node: User!
}

"""A connection to a list of `User` values, with data from `Item`."""
type BrandUsersByItemBrandIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `User`, info from the `Item`, and the cursor to aid in pagination.
  """
  edges: [BrandUsersByItemBrandIdAndUpdatedByManyToManyEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Item`."""
type BrandUsersByItemBrandIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Item`."""
  itemsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """The `User` at the end of the edge."""
  node: User!
}

"""
A connection to a list of `User` values, with data from `ItemEditSuggestion`.
"""
type BrandUsersByItemEditSuggestionBrandIdAndAuthorIdManyToManyConnection {
  """
  A list of edges which contains the `User`, info from the `ItemEditSuggestion`, and the cursor to aid in pagination.
  """
  edges: [BrandUsersByItemEditSuggestionBrandIdAndAuthorIdManyToManyEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `ItemEditSuggestion`."""
type BrandUsersByItemEditSuggestionBrandIdAndAuthorIdManyToManyEdge {
  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  authoredItemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""A connection to a list of `Brand` values."""
type BrandsConnection {
  """
  A list of edges which contains the `Brand` and cursor to aid in pagination.
  """
  edges: [BrandsEdge!]!

  """A list of `Brand` objects."""
  nodes: [Brand!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection."""
type BrandsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Brand` at the end of the edge."""
  node: Brand!
}

"""Methods to use when ordering `Brand`."""
enum BrandsOrderBy {
  COMPANY_ID_ASC
  COMPANY_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Category` values."""
type CategoriesConnection {
  """
  A list of edges which contains the `Category` and cursor to aid in pagination.
  """
  edges: [CategoriesEdge!]!

  """A list of `Category` objects."""
  nodes: [Category!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Category` you could get from the connection."""
  totalCount: Int!
}

"""A `Category` edge in the connection."""
type CategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Category` at the end of the edge."""
  node: Category!
}

"""Methods to use when ordering `Category`."""
enum CategoriesOrderBy {
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Main categories for items"""
type Category {
  name: String!

  """Reads and enables pagination through a set of `Type`."""
  typesByCategory(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Type`."""
    orderBy: [TypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TypesConnection!
}

"""
A condition to be used against `Category` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CategoryCondition {
  """Checks for equality with the object’s `name` field."""
  name: String
}

"""All input for the `changePassword` mutation."""
input ChangePasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  newPassword: String!
  oldPassword: String!
}

"""The output of our `changePassword` mutation."""
type ChangePasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""Check-in is a review given to an item"""
type CheckIn {
  """Reads a single `User` that is related to this `CheckIn`."""
  author: User
  authorId: UUID!
  checkInDate: Date
  createdAt: Datetime!
  id: Int!
  isPublic: Boolean

  """Reads a single `Item` that is related to this `CheckIn`."""
  item: Item
  itemId: Int!
  likes: Int
  location: UUID
  rating: Int
  review: String
}

type CheckInComment {
  """Reads a single `CheckIn` that is related to this `CheckInComment`."""
  checkIn: CheckIn
  checkInId: Int!
  comment: LongText
  createdAt: Datetime!
  createdBy: UUID!
  id: Int!

  """Reads a single `User` that is related to this `CheckInComment`."""
  userByCreatedBy: User
}

"""
A condition to be used against `CheckIn` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CheckInCondition {
  """Checks for equality with the object’s `authorId` field."""
  authorId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `itemId` field."""
  itemId: Int

  """Checks for equality with the object’s `location` field."""
  location: UUID
}

"""A connection to a list of `CheckIn` values."""
type CheckInsConnection {
  """
  A list of edges which contains the `CheckIn` and cursor to aid in pagination.
  """
  edges: [CheckInsEdge!]!

  """A list of `CheckIn` objects."""
  nodes: [CheckIn!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CheckIn` you could get from the connection."""
  totalCount: Int!
}

"""A `CheckIn` edge in the connection."""
type CheckInsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CheckIn` at the end of the edge."""
  node: CheckIn!
}

"""Methods to use when ordering `CheckIn`."""
enum CheckInsOrderBy {
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  ITEM_ID_ASC
  ITEM_ID_DESC
  LOCATION_ASC
  LOCATION_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Company` values."""
type CompaniesConnection {
  """
  A list of edges which contains the `Company` and cursor to aid in pagination.
  """
  edges: [CompaniesEdge!]!

  """A list of `Company` objects."""
  nodes: [Company!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Company` you could get from the connection."""
  totalCount: Int!
}

"""A `Company` edge in the connection."""
type CompaniesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Company` at the end of the edge."""
  node: Company!
}

"""Methods to use when ordering `Company`."""
enum CompaniesOrderBy {
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Company {
  """Reads and enables pagination through a set of `Brand`."""
  brands(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BrandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsConnection!

  """Reads and enables pagination through a set of `Brand`."""
  brandsByItemEditSuggestionManufacturerIdAndBrandId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BrandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompanyBrandsByItemEditSuggestionManufacturerIdAndBrandIdManyToManyConnection!

  """Reads and enables pagination through a set of `Brand`."""
  brandsByItemManufacturerIdAndBrandId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BrandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompanyBrandsByItemManufacturerIdAndBrandIdManyToManyConnection!
  createdAt: Datetime!
  createdBy: UUID
  id: Int!
  isVerified: Boolean!

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestionsByManufacturerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """Reads and enables pagination through a set of `Item`."""
  itemsByItemEditSuggestionManufacturerIdAndItemId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompanyItemsByItemEditSuggestionManufacturerIdAndItemIdManyToManyConnection!

  """Reads and enables pagination through a set of `Item`."""
  itemsByManufacturerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!
  name: String!

  """Reads and enables pagination through a set of `Type`."""
  typesByItemEditSuggestionManufacturerIdAndTypeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Type`."""
    orderBy: [TypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompanyTypesByItemEditSuggestionManufacturerIdAndTypeIdManyToManyConnection!

  """Reads and enables pagination through a set of `Type`."""
  typesByItemManufacturerIdAndTypeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Type`."""
    orderBy: [TypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompanyTypesByItemManufacturerIdAndTypeIdManyToManyConnection!

  """Reads a single `User` that is related to this `Company`."""
  userByCreatedBy: User

  """Reads and enables pagination through a set of `User`."""
  usersByBrandCompanyIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompanyUsersByBrandCompanyIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByItemEditSuggestionManufacturerIdAndAuthorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompanyUsersByItemEditSuggestionManufacturerIdAndAuthorIdManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByItemManufacturerIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompanyUsersByItemManufacturerIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByItemManufacturerIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompanyUsersByItemManufacturerIdAndUpdatedByManyToManyConnection!
}

"""
A connection to a list of `Brand` values, with data from `ItemEditSuggestion`.
"""
type CompanyBrandsByItemEditSuggestionManufacturerIdAndBrandIdManyToManyConnection {
  """
  A list of edges which contains the `Brand`, info from the `ItemEditSuggestion`, and the cursor to aid in pagination.
  """
  edges: [CompanyBrandsByItemEditSuggestionManufacturerIdAndBrandIdManyToManyEdge!]!

  """A list of `Brand` objects."""
  nodes: [Brand!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection, with data from `ItemEditSuggestion`."""
type CompanyBrandsByItemEditSuggestionManufacturerIdAndBrandIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """The `Brand` at the end of the edge."""
  node: Brand!
}

"""A connection to a list of `Brand` values, with data from `Item`."""
type CompanyBrandsByItemManufacturerIdAndBrandIdManyToManyConnection {
  """
  A list of edges which contains the `Brand`, info from the `Item`, and the cursor to aid in pagination.
  """
  edges: [CompanyBrandsByItemManufacturerIdAndBrandIdManyToManyEdge!]!

  """A list of `Brand` objects."""
  nodes: [Brand!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection, with data from `Item`."""
type CompanyBrandsByItemManufacturerIdAndBrandIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Item`."""
  items(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """The `Brand` at the end of the edge."""
  node: Brand!
}

"""
A condition to be used against `Company` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CompanyCondition {
  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""
A connection to a list of `Item` values, with data from `ItemEditSuggestion`.
"""
type CompanyItemsByItemEditSuggestionManufacturerIdAndItemIdManyToManyConnection {
  """
  A list of edges which contains the `Item`, info from the `ItemEditSuggestion`, and the cursor to aid in pagination.
  """
  edges: [CompanyItemsByItemEditSuggestionManufacturerIdAndItemIdManyToManyEdge!]!

  """A list of `Item` objects."""
  nodes: [Item!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Item` you could get from the connection."""
  totalCount: Int!
}

"""A `Item` edge in the connection, with data from `ItemEditSuggestion`."""
type CompanyItemsByItemEditSuggestionManufacturerIdAndItemIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """The `Item` at the end of the edge."""
  node: Item!
}

"""
Represents an update to a `Company`. Fields that are set will be updated.
"""
input CompanyPatch {
  isVerified: Boolean
  name: String
}

"""
A connection to a list of `Type` values, with data from `ItemEditSuggestion`.
"""
type CompanyTypesByItemEditSuggestionManufacturerIdAndTypeIdManyToManyConnection {
  """
  A list of edges which contains the `Type`, info from the `ItemEditSuggestion`, and the cursor to aid in pagination.
  """
  edges: [CompanyTypesByItemEditSuggestionManufacturerIdAndTypeIdManyToManyEdge!]!

  """A list of `Type` objects."""
  nodes: [Type!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Type` you could get from the connection."""
  totalCount: Int!
}

"""A `Type` edge in the connection, with data from `ItemEditSuggestion`."""
type CompanyTypesByItemEditSuggestionManufacturerIdAndTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """The `Type` at the end of the edge."""
  node: Type!
}

"""A connection to a list of `Type` values, with data from `Item`."""
type CompanyTypesByItemManufacturerIdAndTypeIdManyToManyConnection {
  """
  A list of edges which contains the `Type`, info from the `Item`, and the cursor to aid in pagination.
  """
  edges: [CompanyTypesByItemManufacturerIdAndTypeIdManyToManyEdge!]!

  """A list of `Type` objects."""
  nodes: [Type!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Type` you could get from the connection."""
  totalCount: Int!
}

"""A `Type` edge in the connection, with data from `Item`."""
type CompanyTypesByItemManufacturerIdAndTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Item`."""
  items(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """The `Type` at the end of the edge."""
  node: Type!
}

"""A connection to a list of `User` values, with data from `Brand`."""
type CompanyUsersByBrandCompanyIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `User`, info from the `Brand`, and the cursor to aid in pagination.
  """
  edges: [CompanyUsersByBrandCompanyIdAndCreatedByManyToManyEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Brand`."""
type CompanyUsersByBrandCompanyIdAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Brand`."""
  brandsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BrandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""
A connection to a list of `User` values, with data from `ItemEditSuggestion`.
"""
type CompanyUsersByItemEditSuggestionManufacturerIdAndAuthorIdManyToManyConnection {
  """
  A list of edges which contains the `User`, info from the `ItemEditSuggestion`, and the cursor to aid in pagination.
  """
  edges: [CompanyUsersByItemEditSuggestionManufacturerIdAndAuthorIdManyToManyEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `ItemEditSuggestion`."""
type CompanyUsersByItemEditSuggestionManufacturerIdAndAuthorIdManyToManyEdge {
  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  authoredItemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""A connection to a list of `User` values, with data from `Item`."""
type CompanyUsersByItemManufacturerIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `User`, info from the `Item`, and the cursor to aid in pagination.
  """
  edges: [CompanyUsersByItemManufacturerIdAndCreatedByManyToManyEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Item`."""
type CompanyUsersByItemManufacturerIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Item`."""
  itemsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """The `User` at the end of the edge."""
  node: User!
}

"""A connection to a list of `User` values, with data from `Item`."""
type CompanyUsersByItemManufacturerIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `User`, info from the `Item`, and the cursor to aid in pagination.
  """
  edges: [CompanyUsersByItemManufacturerIdAndUpdatedByManyToManyEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Item`."""
type CompanyUsersByItemManufacturerIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Item`."""
  itemsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """The `User` at the end of the edge."""
  node: User!
}

"""All input for the `confirmAccountDeletion` mutation."""
input ConfirmAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
}

"""The output of our `confirmAccountDeletion` mutation."""
type ConfirmAccountDeletionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""All input for the `createBrand` mutation."""
input CreateBrandInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  companyId: Int!
  name: String!
}

"""The output of our `createBrand` mutation."""
type CreateBrandPayload {
  brand: Brand

  """An edge for our `Brand`. May be used by Relay 1."""
  brandEdge(
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Company` that is related to this `Brand`."""
  company: Company

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Brand`."""
  userByCreatedBy: User
}

"""All input for the `createCheckInComment` mutation."""
input CreateCheckInCommentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  comment: String!
  targetCheckInId: Int!
}

"""The output of our `createCheckInComment` mutation."""
type CreateCheckInCommentPayload {
  """Reads a single `CheckIn` that is related to this `CheckInComment`."""
  checkIn: CheckIn
  checkInComment: CheckInComment

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CheckInComment`."""
  userByCreatedBy: User
}

"""All input for the `createCheckIn` mutation."""
input CreateCheckInInput {
  checkInDate: Date

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  itemId: Int!
  rating: Int
  review: String
}

"""The output of our `createCheckIn` mutation."""
type CreateCheckInPayload {
  """Reads a single `User` that is related to this `CheckIn`."""
  author: User
  checkIn: CheckIn

  """An edge for our `CheckIn`. May be used by Relay 1."""
  checkInEdge(
    """The method to use when ordering `CheckIn`."""
    orderBy: [CheckInsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Item` that is related to this `CheckIn`."""
  item: Item

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createCompany` mutation."""
input CreateCompanyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  companyName: String!
}

"""The output of our `createCompany` mutation."""
type CreateCompanyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  company: Company

  """An edge for our `Company`. May be used by Relay 1."""
  companyEdge(
    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompaniesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Company`."""
  userByCreatedBy: User
}

"""All input for the `createFriendRequest` mutation."""
input CreateFriendRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: UUID!
}

"""The output of our `createFriendRequest` mutation."""
type CreateFriendRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createItem` mutation."""
input CreateItemInput {
  brandId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  description: String
  flavor: String!
  manufacturerId: Int
  typeId: Int!
}

"""The output of our `createItem` mutation."""
type CreateItemPayload {
  """Reads a single `Brand` that is related to this `Item`."""
  brand: Brand

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  item: Item

  """An edge for our `Item`. May be used by Relay 1."""
  itemEdge(
    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsEdge

  """Reads a single `Company` that is related to this `Item`."""
  manufacturer: Company

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Type` that is related to this `Item`."""
  type: Type

  """Reads a single `User` that is related to this `Item`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `Item`."""
  userByUpdatedBy: User
}

"""All input for the create `Tag` mutation."""
input CreateTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Tag` to be created by this mutation."""
  tag: TagInput!
}

"""The output of our create `Tag` mutation."""
type CreateTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Tag` that was created by this mutation."""
  tag: Tag

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge

  """Reads a single `User` that is related to this `Tag`."""
  userByCreatedBy: User
}

"""All input for the create `Type` mutation."""
input CreateTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Type` to be created by this mutation."""
  type: TypeInput!
}

"""The output of our create `Type` mutation."""
type CreateTypePayload {
  """Reads a single `Category` that is related to this `Type`."""
  categoryByCategory: Category

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Type` that was created by this mutation."""
  type: Type

  """An edge for our `Type`. May be used by Relay 1."""
  typeEdge(
    """The method to use when ordering `Type`."""
    orderBy: [TypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TypesEdge
}

"""All input for the create `UserEmail` mutation."""
input CreateUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserEmail` to be created by this mutation."""
  userEmail: UserEmailInput!
}

"""The output of our create `UserEmail` mutation."""
type CreateUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """The `UserEmail` that was created by this mutation."""
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

type CurrentUserFriend {
  avatarUrl: String
  firstName: String
  id: Int
  lastName: String
  status: FriendStatus
  userId: UUID
  username: String
}

"""A connection to a list of `CurrentUserFriend` values."""
type CurrentUserFriendsConnection {
  """
  A list of edges which contains the `CurrentUserFriend` and cursor to aid in pagination.
  """
  edges: [CurrentUserFriendsEdge!]!

  """A list of `CurrentUserFriend` objects."""
  nodes: [CurrentUserFriend!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CurrentUserFriend` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CurrentUserFriend` edge in the connection."""
type CurrentUserFriendsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CurrentUserFriend` at the end of the edge."""
  node: CurrentUserFriend!
}

"""Methods to use when ordering `CurrentUserFriend`."""
enum CurrentUserFriendsOrderBy {
  NATURAL
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteBrand` mutation."""
input DeleteBrandInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Brand` mutation."""
type DeleteBrandPayload {
  """The `Brand` that was deleted by this mutation."""
  brand: Brand

  """An edge for our `Brand`. May be used by Relay 1."""
  brandEdge(
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Company` that is related to this `Brand`."""
  company: Company
  deletedBrandNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Brand`."""
  userByCreatedBy: User
}

"""All input for the `deleteCheckIn` mutation."""
input DeleteCheckInInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `CheckIn` mutation."""
type DeleteCheckInPayload {
  """Reads a single `User` that is related to this `CheckIn`."""
  author: User

  """The `CheckIn` that was deleted by this mutation."""
  checkIn: CheckIn

  """An edge for our `CheckIn`. May be used by Relay 1."""
  checkInEdge(
    """The method to use when ordering `CheckIn`."""
    orderBy: [CheckInsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCheckInNodeId: ID

  """Reads a single `Item` that is related to this `CheckIn`."""
  item: Item

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCompany` mutation."""
input DeleteCompanyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Company` mutation."""
type DeleteCompanyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Company` that was deleted by this mutation."""
  company: Company

  """An edge for our `Company`. May be used by Relay 1."""
  companyEdge(
    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompaniesEdge
  deletedCompanyNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Company`."""
  userByCreatedBy: User
}

"""All input for the `deleteFriend` mutation."""
input DeleteFriendInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  friendId: UUID!
}

"""The output of our `deleteFriend` mutation."""
type DeleteFriendPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteItem` mutation."""
input DeleteItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Item` mutation."""
type DeleteItemPayload {
  """Reads a single `Brand` that is related to this `Item`."""
  brand: Brand

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedItemNodeId: ID

  """The `Item` that was deleted by this mutation."""
  item: Item

  """An edge for our `Item`. May be used by Relay 1."""
  itemEdge(
    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsEdge

  """Reads a single `Company` that is related to this `Item`."""
  manufacturer: Company

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Type` that is related to this `Item`."""
  type: Type

  """Reads a single `User` that is related to this `Item`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `Item`."""
  userByUpdatedBy: User
}

"""All input for the `deleteTag` mutation."""
input DeleteTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Tag` mutation."""
type DeleteTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTagNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Tag` that was deleted by this mutation."""
  tag: Tag

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge

  """Reads a single `User` that is related to this `Tag`."""
  userByCreatedBy: User
}

"""All input for the `deleteUserAuthentication` mutation."""
input DeleteUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `UserAuthentication` mutation."""
type DeleteUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserAuthenticationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User

  """The `UserAuthentication` that was deleted by this mutation."""
  userAuthentication: UserAuthentication
}

"""All input for the `deleteUserEmail` mutation."""
input DeleteUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `UserEmail` mutation."""
type DeleteUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserEmailNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """The `UserEmail` that was deleted by this mutation."""
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""All input for the `forgotPassword` mutation."""
input ForgotPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""The output of our `forgotPassword` mutation."""
type ForgotPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Friend {
  accepted: Date
  blockedBy: UUID
  id: Int!
  sent: Date!
  status: FriendStatus!

  """Reads a single `User` that is related to this `Friend`."""
  userByBlockedBy: User

  """Reads a single `User` that is related to this `Friend`."""
  userByUserId1: User

  """Reads a single `User` that is related to this `Friend`."""
  userByUserId2: User
  userId1: UUID!
  userId2: UUID!
}

"""
A condition to be used against `Friend` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FriendCondition {
  """Checks for equality with the object’s `blockedBy` field."""
  blockedBy: UUID

  """Checks for equality with the object’s `userId1` field."""
  userId1: UUID

  """Checks for equality with the object’s `userId2` field."""
  userId2: UUID
}

type FriendRequestUpdatePayload {
  event: String
  friend: Friend
}

enum FriendStatus {
  ACCEPTED
  BLOCKED
  PENDING
}

"""A connection to a list of `Friend` values."""
type FriendsConnection {
  """
  A list of edges which contains the `Friend` and cursor to aid in pagination.
  """
  edges: [FriendsEdge!]!

  """A list of `Friend` objects."""
  nodes: [Friend!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Friend` you could get from the connection."""
  totalCount: Int!
}

"""A `Friend` edge in the connection."""
type FriendsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Friend` at the end of the edge."""
  node: Friend!
}

"""Methods to use when ordering `Friend`."""
enum FriendsOrderBy {
  BLOCKED_BY_ASC
  BLOCKED_BY_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_1_ASC
  USER_ID_1_DESC
  USER_ID_2_ASC
  USER_ID_2_DESC
}

"""Item defines a product that can be rated"""
type Item {
  """Reads and enables pagination through a set of `ActivityFeed`."""
  activityFeeds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ActivityFeed`."""
    orderBy: [ActivityFeedsOrderBy!] = [NATURAL]
  ): ActivityFeedsConnection!

  """Reads a single `Brand` that is related to this `Item`."""
  brand: Brand
  brandId: Int!

  """Reads and enables pagination through a set of `Brand`."""
  brandsByItemEditSuggestionItemIdAndBrandId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BrandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemBrandsByItemEditSuggestionItemIdAndBrandIdManyToManyConnection!

  """Reads and enables pagination through a set of `CheckIn`."""
  checkIns(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckIn`."""
    orderBy: [CheckInsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInsConnection!

  """Reads and enables pagination through a set of `Company`."""
  companiesByItemEditSuggestionItemIdAndManufacturerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemCompaniesByItemEditSuggestionItemIdAndManufacturerIdManyToManyConnection!
  createdAt: Datetime!
  createdBy: UUID
  description: String
  flavor: String
  id: Int!
  isVerified: Boolean

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """Reads a single `Company` that is related to this `Item`."""
  manufacturer: Company
  manufacturerId: Int!

  """Reads a single `Type` that is related to this `Item`."""
  type: Type
  typeId: Int!

  """Reads and enables pagination through a set of `Type`."""
  typesByItemEditSuggestionItemIdAndTypeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Type`."""
    orderBy: [TypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemTypesByItemEditSuggestionItemIdAndTypeIdManyToManyConnection!
  updatedAt: Datetime!
  updatedBy: UUID

  """Reads a single `User` that is related to this `Item`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `Item`."""
  userByUpdatedBy: User

  """Reads and enables pagination through a set of `User`."""
  usersByActivityFeedItemIdAndAuthorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemUsersByActivityFeedItemIdAndAuthorIdManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByCheckInItemIdAndAuthorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemUsersByCheckInItemIdAndAuthorIdManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByItemEditSuggestionItemIdAndAuthorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemUsersByItemEditSuggestionItemIdAndAuthorIdManyToManyConnection!
}

"""
A connection to a list of `Brand` values, with data from `ItemEditSuggestion`.
"""
type ItemBrandsByItemEditSuggestionItemIdAndBrandIdManyToManyConnection {
  """
  A list of edges which contains the `Brand`, info from the `ItemEditSuggestion`, and the cursor to aid in pagination.
  """
  edges: [ItemBrandsByItemEditSuggestionItemIdAndBrandIdManyToManyEdge!]!

  """A list of `Brand` objects."""
  nodes: [Brand!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection, with data from `ItemEditSuggestion`."""
type ItemBrandsByItemEditSuggestionItemIdAndBrandIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """The `Brand` at the end of the edge."""
  node: Brand!
}

"""
A connection to a list of `Company` values, with data from `ItemEditSuggestion`.
"""
type ItemCompaniesByItemEditSuggestionItemIdAndManufacturerIdManyToManyConnection {
  """
  A list of edges which contains the `Company`, info from the `ItemEditSuggestion`, and the cursor to aid in pagination.
  """
  edges: [ItemCompaniesByItemEditSuggestionItemIdAndManufacturerIdManyToManyEdge!]!

  """A list of `Company` objects."""
  nodes: [Company!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Company` you could get from the connection."""
  totalCount: Int!
}

"""
A `Company` edge in the connection, with data from `ItemEditSuggestion`.
"""
type ItemCompaniesByItemEditSuggestionItemIdAndManufacturerIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestionsByManufacturerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """The `Company` at the end of the edge."""
  node: Company!
}

"""
A condition to be used against `Item` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ItemCondition {
  """Checks for equality with the object’s `brandId` field."""
  brandId: Int

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """Checks for equality with the object’s `flavor` field."""
  flavor: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `manufacturerId` field."""
  manufacturerId: Int

  """Checks for equality with the object’s `typeId` field."""
  typeId: Int

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: UUID
}

type ItemEditSuggestion {
  accepted: Datetime

  """Reads a single `User` that is related to this `ItemEditSuggestion`."""
  author: User
  authorId: UUID!

  """Reads a single `Brand` that is related to this `ItemEditSuggestion`."""
  brand: Brand
  brandId: Int!
  createdAt: Datetime!
  description: LongText
  flavor: ShortText
  id: Int!

  """Reads a single `Item` that is related to this `ItemEditSuggestion`."""
  item: Item
  itemId: Int!

  """Reads a single `Company` that is related to this `ItemEditSuggestion`."""
  manufacturer: Company
  manufacturerId: Int

  """Reads a single `Type` that is related to this `ItemEditSuggestion`."""
  type: Type
  typeId: Int!
}

"""
A condition to be used against `ItemEditSuggestion` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ItemEditSuggestionCondition {
  """Checks for equality with the object’s `authorId` field."""
  authorId: UUID

  """Checks for equality with the object’s `brandId` field."""
  brandId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `itemId` field."""
  itemId: Int

  """Checks for equality with the object’s `manufacturerId` field."""
  manufacturerId: Int

  """Checks for equality with the object’s `typeId` field."""
  typeId: Int
}

"""A connection to a list of `ItemEditSuggestion` values."""
type ItemEditSuggestionsConnection {
  """
  A list of edges which contains the `ItemEditSuggestion` and cursor to aid in pagination.
  """
  edges: [ItemEditSuggestionsEdge!]!

  """A list of `ItemEditSuggestion` objects."""
  nodes: [ItemEditSuggestion!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ItemEditSuggestion` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ItemEditSuggestion` edge in the connection."""
type ItemEditSuggestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ItemEditSuggestion` at the end of the edge."""
  node: ItemEditSuggestion!
}

"""Methods to use when ordering `ItemEditSuggestion`."""
enum ItemEditSuggestionsOrderBy {
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  BRAND_ID_ASC
  BRAND_ID_DESC
  ID_ASC
  ID_DESC
  ITEM_ID_ASC
  ITEM_ID_DESC
  MANUFACTURER_ID_ASC
  MANUFACTURER_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
}

"""Represents an update to a `Item`. Fields that are set will be updated."""
input ItemPatch {
  brandId: Int
  description: String
  flavor: String
  isVerified: Boolean
  manufacturerId: Int
  typeId: Int
}

"""
A connection to a list of `Type` values, with data from `ItemEditSuggestion`.
"""
type ItemTypesByItemEditSuggestionItemIdAndTypeIdManyToManyConnection {
  """
  A list of edges which contains the `Type`, info from the `ItemEditSuggestion`, and the cursor to aid in pagination.
  """
  edges: [ItemTypesByItemEditSuggestionItemIdAndTypeIdManyToManyEdge!]!

  """A list of `Type` objects."""
  nodes: [Type!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Type` you could get from the connection."""
  totalCount: Int!
}

"""A `Type` edge in the connection, with data from `ItemEditSuggestion`."""
type ItemTypesByItemEditSuggestionItemIdAndTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """The `Type` at the end of the edge."""
  node: Type!
}

"""
A connection to a list of `User` values, with data from `ActivityFeed`.
"""
type ItemUsersByActivityFeedItemIdAndAuthorIdManyToManyConnection {
  """
  A list of edges which contains the `User`, info from the `ActivityFeed`, and the cursor to aid in pagination.
  """
  edges: [ItemUsersByActivityFeedItemIdAndAuthorIdManyToManyEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `ActivityFeed`."""
type ItemUsersByActivityFeedItemIdAndAuthorIdManyToManyEdge {
  """Reads and enables pagination through a set of `ActivityFeed`."""
  authoredActivityFeeds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ActivityFeed`."""
    orderBy: [ActivityFeedsOrderBy!] = [NATURAL]
  ): ActivityFeedsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""A connection to a list of `User` values, with data from `CheckIn`."""
type ItemUsersByCheckInItemIdAndAuthorIdManyToManyConnection {
  """
  A list of edges which contains the `User`, info from the `CheckIn`, and the cursor to aid in pagination.
  """
  edges: [ItemUsersByCheckInItemIdAndAuthorIdManyToManyEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `CheckIn`."""
type ItemUsersByCheckInItemIdAndAuthorIdManyToManyEdge {
  """Reads and enables pagination through a set of `CheckIn`."""
  authoredCheckIns(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckIn`."""
    orderBy: [CheckInsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""
A connection to a list of `User` values, with data from `ItemEditSuggestion`.
"""
type ItemUsersByItemEditSuggestionItemIdAndAuthorIdManyToManyConnection {
  """
  A list of edges which contains the `User`, info from the `ItemEditSuggestion`, and the cursor to aid in pagination.
  """
  edges: [ItemUsersByItemEditSuggestionItemIdAndAuthorIdManyToManyEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `ItemEditSuggestion`."""
type ItemUsersByItemEditSuggestionItemIdAndAuthorIdManyToManyEdge {
  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  authoredItemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""A connection to a list of `Item` values."""
type ItemsConnection {
  """
  A list of edges which contains the `Item` and cursor to aid in pagination.
  """
  edges: [ItemsEdge!]!

  """A list of `Item` objects."""
  nodes: [Item!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Item` you could get from the connection."""
  totalCount: Int!
}

"""A `Item` edge in the connection."""
type ItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Item` at the end of the edge."""
  node: Item!
}

"""Methods to use when ordering `Item`."""
enum ItemsOrderBy {
  BRAND_ID_ASC
  BRAND_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  FLAVOR_ASC
  FLAVOR_DESC
  ID_ASC
  ID_DESC
  MANUFACTURER_ID_ASC
  MANUFACTURER_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""All input for the `likeCheckIn` mutation."""
input LikeCheckInInput {
  checkInId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `likeCheckIn` mutation."""
type LikeCheckInPayload {
  """Reads a single `User` that is related to this `CheckIn`."""
  author: User
  checkIn: CheckIn

  """An edge for our `CheckIn`. May be used by Relay 1."""
  checkInEdge(
    """The method to use when ordering `CheckIn`."""
    orderBy: [CheckInsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Item` that is related to this `CheckIn`."""
  item: Item

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

input LoginInput {
  password: String!
  username: String!
}

type LoginPayload {
  user: User!
}

type LogoutPayload {
  success: Boolean
}

scalar LongText

"""All input for the `makeEmailPrimary` mutation."""
input MakeEmailPrimaryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailId: UUID!
}

"""The output of our `makeEmailPrimary` mutation."""
type MakeEmailPrimaryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  acceptFriendRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AcceptFriendRequestInput!
  ): AcceptFriendRequestPayload

  """Enter your old password and a new password to change your password."""
  changePassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ChangePasswordInput!
  ): ChangePasswordPayload

  """
  If you're certain you want to delete your account, use `requestAccountDeletion` to request an account deletion token, and then supply the token through this mutation to complete account deletion.
  """
  confirmAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ConfirmAccountDeletionInput!
  ): ConfirmAccountDeletionPayload
  createBrand(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBrandInput!
  ): CreateBrandPayload
  createCheckIn(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCheckInInput!
  ): CreateCheckInPayload
  createCheckInComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCheckInCommentInput!
  ): CreateCheckInCommentPayload

  """Creates a new company. All arguments are required."""
  createCompany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCompanyInput!
  ): CreateCompanyPayload
  createFriendRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFriendRequestInput!
  ): CreateFriendRequestPayload
  createItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateItemInput!
  ): CreateItemPayload

  """Creates a single `Tag`."""
  createTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTagInput!
  ): CreateTagPayload

  """Creates a single `Type`."""
  createType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTypeInput!
  ): CreateTypePayload

  """Creates a single `UserEmail`."""
  createUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserEmailInput!
  ): CreateUserEmailPayload

  """Deletes a single `Brand` using a unique key."""
  deleteBrand(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBrandInput!
  ): DeleteBrandPayload

  """Deletes a single `CheckIn` using a unique key."""
  deleteCheckIn(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCheckInInput!
  ): DeleteCheckInPayload

  """Deletes a single `Company` using a unique key."""
  deleteCompany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompanyInput!
  ): DeleteCompanyPayload
  deleteFriend(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFriendInput!
  ): DeleteFriendPayload

  """Deletes a single `Item` using a unique key."""
  deleteItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemInput!
  ): DeleteItemPayload

  """Deletes a single `Tag` using a unique key."""
  deleteTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagInput!
  ): DeleteTagPayload

  """Deletes a single `UserAuthentication` using a unique key."""
  deleteUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserEmail` using a unique key."""
  deleteUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailInput!
  ): DeleteUserEmailPayload

  """
  If you've forgotten your password, give us one of your email addresses and we'll send you a reset token. Note this only works if you have added an email address!
  """
  forgotPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ForgotPasswordInput!
  ): ForgotPasswordPayload
  likeCheckIn(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LikeCheckInInput!
  ): LikeCheckInPayload

  """
  Use this mutation to log in to your account; this login uses sessions so you do not need to take further action.
  """
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload

  """
  Use this mutation to logout from your account. Don't forget to clear the client state!
  """
  logout: LogoutPayload

  """
  Your primary email is where we'll notify of account events; other emails may be used for discovery or login. Use this when you're changing your email address.
  """
  makeEmailPrimary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MakeEmailPrimaryInput!
  ): MakeEmailPrimaryPayload

  """
  Use this mutation to create an account on our system. This may only be used if you are logged out.
  """
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload

  """Begin the account deletion flow by requesting the confirmation email"""
  requestAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RequestAccountDeletionInput!
  ): RequestAccountDeletionPayload

  """
  If you didn't receive the verification code for this email, we can resend it. We silently cap the rate of resends on the backend, so calls to this function may not result in another email being sent if it has been called recently.
  """
  resendEmailVerificationCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResendEmailVerificationCodeInput!
  ): ResendEmailVerificationCodePayload

  """
  After triggering forgotPassword, you'll be sent a reset token. Combine this with your user ID and a new password to reset your password.
  """
  resetPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResetPasswordInput!
  ): ResetPasswordPayload

  """Updates a single `Brand` using a unique key and a patch."""
  updateBrand(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBrandInput!
  ): UpdateBrandPayload

  """Updates a single `Company` using a unique key and a patch."""
  updateCompany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompanyInput!
  ): UpdateCompanyPayload

  """Updates a single `Item` using a unique key and a patch."""
  updateItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemInput!
  ): UpdateItemPayload

  """Updates a single `Tag` using a unique key and a patch."""
  updateTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagInput!
  ): UpdateTagPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """
  Once you have received a verification token for your email, you may call this mutation with that token to make your email verified.
  """
  verifyEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: VerifyEmailInput!
  ): VerifyEmailPayload
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type PublicCheckIn {
  authorId: UUID
  checkInDate: Date
  createdAt: Datetime
  id: Int
  isPublic: Boolean
  itemId: Int
  location: UUID
  rating: Int
  review: String
}

"""A connection to a list of `PublicCheckIn` values."""
type PublicCheckInsConnection {
  """
  A list of edges which contains the `PublicCheckIn` and cursor to aid in pagination.
  """
  edges: [PublicCheckInsEdge!]!

  """A list of `PublicCheckIn` objects."""
  nodes: [PublicCheckIn!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PublicCheckIn` you could get from the connection."""
  totalCount: Int!
}

"""A `PublicCheckIn` edge in the connection."""
type PublicCheckInsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PublicCheckIn` at the end of the edge."""
  node: PublicCheckIn!
}

"""Methods to use when ordering `PublicCheckIn`."""
enum PublicCheckInsOrderBy {
  NATURAL
}

type PublicUser {
  avatarUrl: String
  country: String
  createdAt: Datetime
  firstName: String
  id: UUID
  isAdmin: Boolean
  isVerified: Boolean
  lastName: String
  location: String
  status: FriendStatus
  updatedAt: Datetime
  username: String
}

"""A connection to a list of `PublicUser` values."""
type PublicUsersConnection {
  """
  A list of edges which contains the `PublicUser` and cursor to aid in pagination.
  """
  edges: [PublicUsersEdge!]!

  """A list of `PublicUser` objects."""
  nodes: [PublicUser!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PublicUser` you could get from the connection."""
  totalCount: Int!
}

"""A `PublicUser` edge in the connection."""
type PublicUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PublicUser` at the end of the edge."""
  node: PublicUser!
}

"""Methods to use when ordering `PublicUser`."""
enum PublicUsersOrderBy {
  NATURAL
}

"""The root query type which gives access points into the data universe."""
type Query {
  """Reads and enables pagination through a set of `ActivityFeed`."""
  activityFeeds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ActivityFeed`."""
    orderBy: [ActivityFeedsOrderBy!] = [NATURAL]
  ): ActivityFeedsConnection
  brand(id: Int!): Brand
  brandByCompanyIdAndName(companyId: Int!, name: ShortText!): Brand

  """Reads and enables pagination through a set of `Brand`."""
  brands(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BrandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsConnection

  """Reads and enables pagination through a set of `Category`."""
  categories(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CategoryCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesConnection
  category(name: String!): Category
  checkIn(id: Int!): CheckIn

  """Reads and enables pagination through a set of `CheckIn`."""
  checkIns(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckIn`."""
    orderBy: [CheckInsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInsConnection

  """Reads and enables pagination through a set of `Company`."""
  companies(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompaniesConnection
  company(id: Int!): Company
  companyByName(name: String!): Company

  """The currently logged in user (or null if not logged in)."""
  currentUser: User

  """Reads and enables pagination through a set of `CurrentUserFriend`."""
  currentUserFriends(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CurrentUserFriend`."""
    orderBy: [CurrentUserFriendsOrderBy!] = [NATURAL]
  ): CurrentUserFriendsConnection
  currentUserIsPrivileged: Boolean
  friend(userId1: UUID!, userId2: UUID!): Friend

  """Reads and enables pagination through a set of `Friend`."""
  friends(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FriendCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Friend`."""
    orderBy: [FriendsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendsConnection
  item(id: Int!): Item
  itemByBrandIdAndFlavor(brandId: Int!, flavor: String!): Item
  itemEditSuggestion(id: Int!): ItemEditSuggestion

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection

  """Reads and enables pagination through a set of `Item`."""
  items(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection

  """Reads and enables pagination through a set of `PublicCheckIn`."""
  publicCheckIns(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PublicCheckIn`."""
    orderBy: [PublicCheckInsOrderBy!] = [NATURAL]
  ): PublicCheckInsConnection

  """Reads and enables pagination through a set of `PublicUser`."""
  publicUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PublicUser`."""
    orderBy: [PublicUsersOrderBy!] = [NATURAL]
  ): PublicUsersConnection

  """Reads and enables pagination through a set of `Item`."""
  searchItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    search: String!
  ): ItemsConnection

  """Reads and enables pagination through a set of `User`."""
  searchUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    search: String!
  ): UsersConnection
  tag(id: Int!): Tag
  tagByName(name: String!): Tag

  """Reads and enables pagination through a set of `Tag`."""
  tags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsConnection
  type(id: Int!): Type
  typeByNameAndCategory(category: String!, name: String!): Type

  """Reads and enables pagination through a set of `Type`."""
  types(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Type`."""
    orderBy: [TypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TypesConnection
  user(id: UUID!): User
  userAuthentication(id: UUID!): UserAuthentication
  userByUsername(username: String!): User
  userEmail(id: UUID!): UserEmail
  userSetting(id: UUID!): UserSetting

  """Reads and enables pagination through a set of `UserSetting`."""
  userSettings(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserSettingCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserSetting`."""
    orderBy: [UserSettingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserSettingsConnection
}

input RegisterInput {
  avatarUrl: String
  email: String!
  firstName: String
  lastName: String
  password: String!
  username: String!
}

type RegisterPayload {
  user: User!
}

"""All input for the `requestAccountDeletion` mutation."""
input RequestAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `requestAccountDeletion` mutation."""
type RequestAccountDeletionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""All input for the `resendEmailVerificationCode` mutation."""
input ResendEmailVerificationCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailId: UUID!
}

"""The output of our `resendEmailVerificationCode` mutation."""
type ResendEmailVerificationCodePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""All input for the `resetPassword` mutation."""
input ResetPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  newPassword: String!
  resetToken: String!
  userId: UUID!
}

"""The output of our `resetPassword` mutation."""
type ResetPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

scalar ShortText

"""
The root subscription type: contains realtime events you can subscribe to with the `subscription` operation.
"""
type Subscription {
  """Triggered when the logged in user's record is updated in some way."""
  currentUserUpdated: UserSubscriptionPayload
  friendRequestChange: FriendRequestUpdatePayload
}

"""Tag for an item or check-in"""
type Tag {
  createdAt: Datetime!
  createdBy: UUID
  id: Int!
  isVerified: Boolean!
  name: String

  """Reads a single `User` that is related to this `Tag`."""
  userByCreatedBy: User
}

"""
A condition to be used against `Tag` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TagCondition {
  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `Tag`"""
input TagInput {
  name: String
}

"""Represents an update to a `Tag`. Fields that are set will be updated."""
input TagPatch {
  isVerified: Boolean
  name: String
}

"""A connection to a list of `Tag` values."""
type TagsConnection {
  """
  A list of edges which contains the `Tag` and cursor to aid in pagination.
  """
  edges: [TagsEdge!]!

  """A list of `Tag` objects."""
  nodes: [Tag!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Tag` you could get from the connection."""
  totalCount: Int!
}

"""A `Tag` edge in the connection."""
type TagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Tag` at the end of the edge."""
  node: Tag!
}

"""Methods to use when ordering `Tag`."""
enum TagsOrderBy {
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Type item that is part of a category"""
type Type {
  """Reads and enables pagination through a set of `Brand`."""
  brandsByItemEditSuggestionTypeIdAndBrandId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BrandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TypeBrandsByItemEditSuggestionTypeIdAndBrandIdManyToManyConnection!

  """Reads and enables pagination through a set of `Brand`."""
  brandsByItemTypeIdAndBrandId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BrandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TypeBrandsByItemTypeIdAndBrandIdManyToManyConnection!
  category: String!

  """Reads a single `Category` that is related to this `Type`."""
  categoryByCategory: Category

  """Reads and enables pagination through a set of `Company`."""
  companiesByItemEditSuggestionTypeIdAndManufacturerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TypeCompaniesByItemEditSuggestionTypeIdAndManufacturerIdManyToManyConnection!

  """Reads and enables pagination through a set of `Company`."""
  companiesByItemTypeIdAndManufacturerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TypeCompaniesByItemTypeIdAndManufacturerIdManyToManyConnection!
  id: Int!

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """Reads and enables pagination through a set of `Item`."""
  items(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """Reads and enables pagination through a set of `Item`."""
  itemsByItemEditSuggestionTypeIdAndItemId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TypeItemsByItemEditSuggestionTypeIdAndItemIdManyToManyConnection!
  name: String!

  """Reads and enables pagination through a set of `User`."""
  usersByItemEditSuggestionTypeIdAndAuthorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): TypeUsersByItemEditSuggestionTypeIdAndAuthorIdManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByItemTypeIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): TypeUsersByItemTypeIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByItemTypeIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): TypeUsersByItemTypeIdAndUpdatedByManyToManyConnection!
}

"""
A connection to a list of `Brand` values, with data from `ItemEditSuggestion`.
"""
type TypeBrandsByItemEditSuggestionTypeIdAndBrandIdManyToManyConnection {
  """
  A list of edges which contains the `Brand`, info from the `ItemEditSuggestion`, and the cursor to aid in pagination.
  """
  edges: [TypeBrandsByItemEditSuggestionTypeIdAndBrandIdManyToManyEdge!]!

  """A list of `Brand` objects."""
  nodes: [Brand!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection, with data from `ItemEditSuggestion`."""
type TypeBrandsByItemEditSuggestionTypeIdAndBrandIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """The `Brand` at the end of the edge."""
  node: Brand!
}

"""A connection to a list of `Brand` values, with data from `Item`."""
type TypeBrandsByItemTypeIdAndBrandIdManyToManyConnection {
  """
  A list of edges which contains the `Brand`, info from the `Item`, and the cursor to aid in pagination.
  """
  edges: [TypeBrandsByItemTypeIdAndBrandIdManyToManyEdge!]!

  """A list of `Brand` objects."""
  nodes: [Brand!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection, with data from `Item`."""
type TypeBrandsByItemTypeIdAndBrandIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Item`."""
  items(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """The `Brand` at the end of the edge."""
  node: Brand!
}

"""
A connection to a list of `Company` values, with data from `ItemEditSuggestion`.
"""
type TypeCompaniesByItemEditSuggestionTypeIdAndManufacturerIdManyToManyConnection {
  """
  A list of edges which contains the `Company`, info from the `ItemEditSuggestion`, and the cursor to aid in pagination.
  """
  edges: [TypeCompaniesByItemEditSuggestionTypeIdAndManufacturerIdManyToManyEdge!]!

  """A list of `Company` objects."""
  nodes: [Company!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Company` you could get from the connection."""
  totalCount: Int!
}

"""
A `Company` edge in the connection, with data from `ItemEditSuggestion`.
"""
type TypeCompaniesByItemEditSuggestionTypeIdAndManufacturerIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestionsByManufacturerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """The `Company` at the end of the edge."""
  node: Company!
}

"""A connection to a list of `Company` values, with data from `Item`."""
type TypeCompaniesByItemTypeIdAndManufacturerIdManyToManyConnection {
  """
  A list of edges which contains the `Company`, info from the `Item`, and the cursor to aid in pagination.
  """
  edges: [TypeCompaniesByItemTypeIdAndManufacturerIdManyToManyEdge!]!

  """A list of `Company` objects."""
  nodes: [Company!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Company` you could get from the connection."""
  totalCount: Int!
}

"""A `Company` edge in the connection, with data from `Item`."""
type TypeCompaniesByItemTypeIdAndManufacturerIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Item`."""
  itemsByManufacturerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """The `Company` at the end of the edge."""
  node: Company!
}

"""
A condition to be used against `Type` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TypeCondition {
  """Checks for equality with the object’s `category` field."""
  category: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `Type`"""
input TypeInput {
  category: String!
  name: String!
}

"""
A connection to a list of `Item` values, with data from `ItemEditSuggestion`.
"""
type TypeItemsByItemEditSuggestionTypeIdAndItemIdManyToManyConnection {
  """
  A list of edges which contains the `Item`, info from the `ItemEditSuggestion`, and the cursor to aid in pagination.
  """
  edges: [TypeItemsByItemEditSuggestionTypeIdAndItemIdManyToManyEdge!]!

  """A list of `Item` objects."""
  nodes: [Item!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Item` you could get from the connection."""
  totalCount: Int!
}

"""A `Item` edge in the connection, with data from `ItemEditSuggestion`."""
type TypeItemsByItemEditSuggestionTypeIdAndItemIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """The `Item` at the end of the edge."""
  node: Item!
}

"""
A connection to a list of `User` values, with data from `ItemEditSuggestion`.
"""
type TypeUsersByItemEditSuggestionTypeIdAndAuthorIdManyToManyConnection {
  """
  A list of edges which contains the `User`, info from the `ItemEditSuggestion`, and the cursor to aid in pagination.
  """
  edges: [TypeUsersByItemEditSuggestionTypeIdAndAuthorIdManyToManyEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `ItemEditSuggestion`."""
type TypeUsersByItemEditSuggestionTypeIdAndAuthorIdManyToManyEdge {
  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  authoredItemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""A connection to a list of `User` values, with data from `Item`."""
type TypeUsersByItemTypeIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `User`, info from the `Item`, and the cursor to aid in pagination.
  """
  edges: [TypeUsersByItemTypeIdAndCreatedByManyToManyEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Item`."""
type TypeUsersByItemTypeIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Item`."""
  itemsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """The `User` at the end of the edge."""
  node: User!
}

"""A connection to a list of `User` values, with data from `Item`."""
type TypeUsersByItemTypeIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `User`, info from the `Item`, and the cursor to aid in pagination.
  """
  edges: [TypeUsersByItemTypeIdAndUpdatedByManyToManyEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Item`."""
type TypeUsersByItemTypeIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Item`."""
  itemsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """The `User` at the end of the edge."""
  node: User!
}

"""A connection to a list of `Type` values."""
type TypesConnection {
  """
  A list of edges which contains the `Type` and cursor to aid in pagination.
  """
  edges: [TypesEdge!]!

  """A list of `Type` objects."""
  nodes: [Type!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Type` you could get from the connection."""
  totalCount: Int!
}

"""A `Type` edge in the connection."""
type TypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Type` at the end of the edge."""
  node: Type!
}

"""Methods to use when ordering `Type`."""
enum TypesOrderBy {
  CATEGORY_ASC
  CATEGORY_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""All input for the `updateBrand` mutation."""
input UpdateBrandInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Brand` being updated.
  """
  patch: BrandPatch!
}

"""The output of our update `Brand` mutation."""
type UpdateBrandPayload {
  """The `Brand` that was updated by this mutation."""
  brand: Brand

  """An edge for our `Brand`. May be used by Relay 1."""
  brandEdge(
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Company` that is related to this `Brand`."""
  company: Company

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Brand`."""
  userByCreatedBy: User
}

"""All input for the `updateCompany` mutation."""
input UpdateCompanyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Company` being updated.
  """
  patch: CompanyPatch!
}

"""The output of our update `Company` mutation."""
type UpdateCompanyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Company` that was updated by this mutation."""
  company: Company

  """An edge for our `Company`. May be used by Relay 1."""
  companyEdge(
    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompaniesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Company`."""
  userByCreatedBy: User
}

"""All input for the `updateItem` mutation."""
input UpdateItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Item` being updated.
  """
  patch: ItemPatch!
}

"""The output of our update `Item` mutation."""
type UpdateItemPayload {
  """Reads a single `Brand` that is related to this `Item`."""
  brand: Brand

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Item` that was updated by this mutation."""
  item: Item

  """An edge for our `Item`. May be used by Relay 1."""
  itemEdge(
    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsEdge

  """Reads a single `Company` that is related to this `Item`."""
  manufacturer: Company

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Type` that is related to this `Item`."""
  type: Type

  """Reads a single `User` that is related to this `Item`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `Item`."""
  userByUpdatedBy: User
}

"""All input for the `updateTag` mutation."""
input UpdateTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Tag` being updated.
  """
  patch: TagPatch!
}

"""The output of our update `Tag` mutation."""
type UpdateTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Tag` that was updated by this mutation."""
  tag: Tag

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge

  """Reads a single `User` that is related to this `Tag`."""
  userByCreatedBy: User
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user."""
  id: UUID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A user who can log in to the application."""
type User {
  """Reads and enables pagination through a set of `ActivityFeed`."""
  authoredActivityFeeds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ActivityFeed`."""
    orderBy: [ActivityFeedsOrderBy!] = [NATURAL]
  ): ActivityFeedsConnection!

  """Reads and enables pagination through a set of `CheckIn`."""
  authoredCheckIns(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckIn`."""
    orderBy: [CheckInsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInsConnection!

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  authoredItemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """Optional avatar URL."""
  avatarUrl: String

  """Reads and enables pagination through a set of `Brand`."""
  brandsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BrandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsConnection!

  """Reads and enables pagination through a set of `Brand`."""
  brandsByItemCreatedByAndBrandId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BrandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserBrandsByItemCreatedByAndBrandIdManyToManyConnection!

  """Reads and enables pagination through a set of `Brand`."""
  brandsByItemEditSuggestionAuthorIdAndBrandId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BrandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserBrandsByItemEditSuggestionAuthorIdAndBrandIdManyToManyConnection!

  """Reads and enables pagination through a set of `Brand`."""
  brandsByItemUpdatedByAndBrandId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BrandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserBrandsByItemUpdatedByAndBrandIdManyToManyConnection!
  checkInStatistics(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): UsersCheckInStatisticsConnection!

  """Reads and enables pagination through a set of `Company`."""
  companiesByBrandCreatedByAndCompanyId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserCompaniesByBrandCreatedByAndCompanyIdManyToManyConnection!

  """Reads and enables pagination through a set of `Company`."""
  companiesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompaniesConnection!

  """Reads and enables pagination through a set of `Company`."""
  companiesByItemCreatedByAndManufacturerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserCompaniesByItemCreatedByAndManufacturerIdManyToManyConnection!

  """Reads and enables pagination through a set of `Company`."""
  companiesByItemEditSuggestionAuthorIdAndManufacturerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserCompaniesByItemEditSuggestionAuthorIdAndManufacturerIdManyToManyConnection!

  """Reads and enables pagination through a set of `Company`."""
  companiesByItemUpdatedByAndManufacturerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserCompaniesByItemUpdatedByAndManufacturerIdManyToManyConnection!
  country: String
  createdAt: Datetime!
  firstName: String
  friendStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): UsersFriendStatusConnection!
  friends(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): UsersFriendsConnection!

  """Reads and enables pagination through a set of `Friend`."""
  friendsByBlockedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FriendCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Friend`."""
    orderBy: [FriendsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendsConnection!

  """Reads and enables pagination through a set of `Friend`."""
  friendsByUserId1(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FriendCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Friend`."""
    orderBy: [FriendsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendsConnection!

  """Reads and enables pagination through a set of `Friend`."""
  friendsByUserId2(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FriendCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Friend`."""
    orderBy: [FriendsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendsConnection!
  hasPassword: Boolean

  """Unique identifier for the user."""
  id: UUID!

  """If true, the user has elevated privileges."""
  isAdmin: Boolean!
  isVerified: Boolean!

  """Reads and enables pagination through a set of `Item`."""
  itemsByActivityFeedAuthorIdAndItemId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserItemsByActivityFeedAuthorIdAndItemIdManyToManyConnection!

  """Reads and enables pagination through a set of `Item`."""
  itemsByCheckInAuthorIdAndItemId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserItemsByCheckInAuthorIdAndItemIdManyToManyConnection!

  """Reads and enables pagination through a set of `Item`."""
  itemsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """Reads and enables pagination through a set of `Item`."""
  itemsByItemEditSuggestionAuthorIdAndItemId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserItemsByItemEditSuggestionAuthorIdAndItemIdManyToManyConnection!

  """Reads and enables pagination through a set of `Item`."""
  itemsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!
  lastName: String
  location: String

  """Reads and enables pagination through a set of `Tag`."""
  tagsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsConnection!

  """Reads and enables pagination through a set of `Type`."""
  typesByItemCreatedByAndTypeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Type`."""
    orderBy: [TypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserTypesByItemCreatedByAndTypeIdManyToManyConnection!

  """Reads and enables pagination through a set of `Type`."""
  typesByItemEditSuggestionAuthorIdAndTypeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Type`."""
    orderBy: [TypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserTypesByItemEditSuggestionAuthorIdAndTypeIdManyToManyConnection!

  """Reads and enables pagination through a set of `Type`."""
  typesByItemUpdatedByAndTypeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Type`."""
    orderBy: [TypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserTypesByItemUpdatedByAndTypeIdManyToManyConnection!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `UserAuthentication`."""
  userAuthenticationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAuthenticationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!]
  ): [UserAuthentication!]!

  """Reads and enables pagination through a set of `UserEmail`."""
  userEmails(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEmailCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsConnection!

  """Reads a single `UserSetting` that is related to this `User`."""
  userSettingById: UserSetting

  """Reads and enables pagination through a set of `UserSetting`."""
  userSettingsById(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserSettingCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserSetting`."""
    orderBy: [UserSettingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserSettingsConnection! @deprecated(reason: "Please use userSettingById instead")

  """Public-facing username (or 'handle') of the user."""
  username: String!

  """Reads and enables pagination through a set of `User`."""
  usersByFriendBlockedByAndUserId1(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserUsersByFriendBlockedByAndUserId1ManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByFriendBlockedByAndUserId2(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserUsersByFriendBlockedByAndUserId2ManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByFriendUserId1AndBlockedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserUsersByFriendUserId1AndBlockedByManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByFriendUserId1AndUserId2(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserUsersByFriendUserId1AndUserId2ManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByFriendUserId2AndBlockedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserUsersByFriendUserId2AndBlockedByManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByFriendUserId2AndUserId1(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserUsersByFriendUserId2AndUserId1ManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByItemCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserUsersByItemCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByItemUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserUsersByItemUpdatedByAndCreatedByManyToManyConnection!
}

"""
Contains information about the login providers this user has used, so that they may disconnect them should they wish.
"""
type UserAuthentication {
  createdAt: Datetime!
  id: UUID!

  """A unique identifier for the user within the login service."""
  identifier: String!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `UserAuthentication` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserAuthenticationCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `service` field."""
  service: String

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""Methods to use when ordering `UserAuthentication`."""
enum UserAuthenticationsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SERVICE_ASC
  SERVICE_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""A connection to a list of `Brand` values, with data from `Item`."""
type UserBrandsByItemCreatedByAndBrandIdManyToManyConnection {
  """
  A list of edges which contains the `Brand`, info from the `Item`, and the cursor to aid in pagination.
  """
  edges: [UserBrandsByItemCreatedByAndBrandIdManyToManyEdge!]!

  """A list of `Brand` objects."""
  nodes: [Brand!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection, with data from `Item`."""
type UserBrandsByItemCreatedByAndBrandIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Item`."""
  items(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """The `Brand` at the end of the edge."""
  node: Brand!
}

"""
A connection to a list of `Brand` values, with data from `ItemEditSuggestion`.
"""
type UserBrandsByItemEditSuggestionAuthorIdAndBrandIdManyToManyConnection {
  """
  A list of edges which contains the `Brand`, info from the `ItemEditSuggestion`, and the cursor to aid in pagination.
  """
  edges: [UserBrandsByItemEditSuggestionAuthorIdAndBrandIdManyToManyEdge!]!

  """A list of `Brand` objects."""
  nodes: [Brand!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection, with data from `ItemEditSuggestion`."""
type UserBrandsByItemEditSuggestionAuthorIdAndBrandIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """The `Brand` at the end of the edge."""
  node: Brand!
}

"""A connection to a list of `Brand` values, with data from `Item`."""
type UserBrandsByItemUpdatedByAndBrandIdManyToManyConnection {
  """
  A list of edges which contains the `Brand`, info from the `Item`, and the cursor to aid in pagination.
  """
  edges: [UserBrandsByItemUpdatedByAndBrandIdManyToManyEdge!]!

  """A list of `Brand` objects."""
  nodes: [Brand!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection, with data from `Item`."""
type UserBrandsByItemUpdatedByAndBrandIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Item`."""
  items(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """The `Brand` at the end of the edge."""
  node: Brand!
}

"""A connection to a list of `Company` values, with data from `Brand`."""
type UserCompaniesByBrandCreatedByAndCompanyIdManyToManyConnection {
  """
  A list of edges which contains the `Company`, info from the `Brand`, and the cursor to aid in pagination.
  """
  edges: [UserCompaniesByBrandCreatedByAndCompanyIdManyToManyEdge!]!

  """A list of `Company` objects."""
  nodes: [Company!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Company` you could get from the connection."""
  totalCount: Int!
}

"""A `Company` edge in the connection, with data from `Brand`."""
type UserCompaniesByBrandCreatedByAndCompanyIdManyToManyEdge {
  """Reads and enables pagination through a set of `Brand`."""
  brands(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BrandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Company` at the end of the edge."""
  node: Company!
}

"""A connection to a list of `Company` values, with data from `Item`."""
type UserCompaniesByItemCreatedByAndManufacturerIdManyToManyConnection {
  """
  A list of edges which contains the `Company`, info from the `Item`, and the cursor to aid in pagination.
  """
  edges: [UserCompaniesByItemCreatedByAndManufacturerIdManyToManyEdge!]!

  """A list of `Company` objects."""
  nodes: [Company!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Company` you could get from the connection."""
  totalCount: Int!
}

"""A `Company` edge in the connection, with data from `Item`."""
type UserCompaniesByItemCreatedByAndManufacturerIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Item`."""
  itemsByManufacturerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """The `Company` at the end of the edge."""
  node: Company!
}

"""
A connection to a list of `Company` values, with data from `ItemEditSuggestion`.
"""
type UserCompaniesByItemEditSuggestionAuthorIdAndManufacturerIdManyToManyConnection {
  """
  A list of edges which contains the `Company`, info from the `ItemEditSuggestion`, and the cursor to aid in pagination.
  """
  edges: [UserCompaniesByItemEditSuggestionAuthorIdAndManufacturerIdManyToManyEdge!]!

  """A list of `Company` objects."""
  nodes: [Company!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Company` you could get from the connection."""
  totalCount: Int!
}

"""
A `Company` edge in the connection, with data from `ItemEditSuggestion`.
"""
type UserCompaniesByItemEditSuggestionAuthorIdAndManufacturerIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestionsByManufacturerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """The `Company` at the end of the edge."""
  node: Company!
}

"""A connection to a list of `Company` values, with data from `Item`."""
type UserCompaniesByItemUpdatedByAndManufacturerIdManyToManyConnection {
  """
  A list of edges which contains the `Company`, info from the `Item`, and the cursor to aid in pagination.
  """
  edges: [UserCompaniesByItemUpdatedByAndManufacturerIdManyToManyEdge!]!

  """A list of `Company` objects."""
  nodes: [Company!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Company` you could get from the connection."""
  totalCount: Int!
}

"""A `Company` edge in the connection, with data from `Item`."""
type UserCompaniesByItemUpdatedByAndManufacturerIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Item`."""
  itemsByManufacturerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """The `Company` at the end of the edge."""
  node: Company!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `username` field."""
  username: String
}

"""Information about a user's email address."""
type UserEmail {
  createdAt: Datetime!

  """The users email address, in `a@b.c` format."""
  email: String!
  id: UUID!
  isPrimary: Boolean!

  """
  True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
  """
  isVerified: Boolean!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `UserEmail` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserEmailCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isPrimary` field."""
  isPrimary: Boolean

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""An input for mutations affecting `UserEmail`"""
input UserEmailInput {
  """The users email address, in `a@b.c` format."""
  email: String!
}

"""A connection to a list of `UserEmail` values."""
type UserEmailsConnection {
  """
  A list of edges which contains the `UserEmail` and cursor to aid in pagination.
  """
  edges: [UserEmailsEdge!]!

  """A list of `UserEmail` objects."""
  nodes: [UserEmail!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserEmail` you could get from the connection."""
  totalCount: Int!
}

"""A `UserEmail` edge in the connection."""
type UserEmailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserEmail` at the end of the edge."""
  node: UserEmail!
}

"""Methods to use when ordering `UserEmail`."""
enum UserEmailsOrderBy {
  ID_ASC
  ID_DESC
  IS_PRIMARY_ASC
  IS_PRIMARY_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""
A connection to a list of `Item` values, with data from `ActivityFeed`.
"""
type UserItemsByActivityFeedAuthorIdAndItemIdManyToManyConnection {
  """
  A list of edges which contains the `Item`, info from the `ActivityFeed`, and the cursor to aid in pagination.
  """
  edges: [UserItemsByActivityFeedAuthorIdAndItemIdManyToManyEdge!]!

  """A list of `Item` objects."""
  nodes: [Item!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Item` you could get from the connection."""
  totalCount: Int!
}

"""A `Item` edge in the connection, with data from `ActivityFeed`."""
type UserItemsByActivityFeedAuthorIdAndItemIdManyToManyEdge {
  """Reads and enables pagination through a set of `ActivityFeed`."""
  activityFeeds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ActivityFeed`."""
    orderBy: [ActivityFeedsOrderBy!] = [NATURAL]
  ): ActivityFeedsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Item` at the end of the edge."""
  node: Item!
}

"""A connection to a list of `Item` values, with data from `CheckIn`."""
type UserItemsByCheckInAuthorIdAndItemIdManyToManyConnection {
  """
  A list of edges which contains the `Item`, info from the `CheckIn`, and the cursor to aid in pagination.
  """
  edges: [UserItemsByCheckInAuthorIdAndItemIdManyToManyEdge!]!

  """A list of `Item` objects."""
  nodes: [Item!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Item` you could get from the connection."""
  totalCount: Int!
}

"""A `Item` edge in the connection, with data from `CheckIn`."""
type UserItemsByCheckInAuthorIdAndItemIdManyToManyEdge {
  """Reads and enables pagination through a set of `CheckIn`."""
  checkIns(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckIn`."""
    orderBy: [CheckInsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Item` at the end of the edge."""
  node: Item!
}

"""
A connection to a list of `Item` values, with data from `ItemEditSuggestion`.
"""
type UserItemsByItemEditSuggestionAuthorIdAndItemIdManyToManyConnection {
  """
  A list of edges which contains the `Item`, info from the `ItemEditSuggestion`, and the cursor to aid in pagination.
  """
  edges: [UserItemsByItemEditSuggestionAuthorIdAndItemIdManyToManyEdge!]!

  """A list of `Item` objects."""
  nodes: [Item!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Item` you could get from the connection."""
  totalCount: Int!
}

"""A `Item` edge in the connection, with data from `ItemEditSuggestion`."""
type UserItemsByItemEditSuggestionAuthorIdAndItemIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """The `Item` at the end of the edge."""
  node: Item!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  """Optional avatar URL."""
  avatarUrl: String
  firstName: String
  lastName: String

  """Public-facing username (or 'handle') of the user."""
  username: String
}

type UserSetting {
  id: UUID!
  isPublic: Boolean
  isPublicCheckIns: Boolean

  """Reads a single `User` that is related to this `UserSetting`."""
  userById: User
}

"""
A condition to be used against `UserSetting` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserSettingCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID
}

"""A connection to a list of `UserSetting` values."""
type UserSettingsConnection {
  """
  A list of edges which contains the `UserSetting` and cursor to aid in pagination.
  """
  edges: [UserSettingsEdge!]!

  """A list of `UserSetting` objects."""
  nodes: [UserSetting!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserSetting` you could get from the connection."""
  totalCount: Int!
}

"""A `UserSetting` edge in the connection."""
type UserSettingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserSetting` at the end of the edge."""
  node: UserSetting!
}

"""Methods to use when ordering `UserSetting`."""
enum UserSettingsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type UserSubscriptionPayload {
  event: String
  user: User
}

"""A connection to a list of `Type` values, with data from `Item`."""
type UserTypesByItemCreatedByAndTypeIdManyToManyConnection {
  """
  A list of edges which contains the `Type`, info from the `Item`, and the cursor to aid in pagination.
  """
  edges: [UserTypesByItemCreatedByAndTypeIdManyToManyEdge!]!

  """A list of `Type` objects."""
  nodes: [Type!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Type` you could get from the connection."""
  totalCount: Int!
}

"""A `Type` edge in the connection, with data from `Item`."""
type UserTypesByItemCreatedByAndTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Item`."""
  items(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """The `Type` at the end of the edge."""
  node: Type!
}

"""
A connection to a list of `Type` values, with data from `ItemEditSuggestion`.
"""
type UserTypesByItemEditSuggestionAuthorIdAndTypeIdManyToManyConnection {
  """
  A list of edges which contains the `Type`, info from the `ItemEditSuggestion`, and the cursor to aid in pagination.
  """
  edges: [UserTypesByItemEditSuggestionAuthorIdAndTypeIdManyToManyEdge!]!

  """A list of `Type` objects."""
  nodes: [Type!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Type` you could get from the connection."""
  totalCount: Int!
}

"""A `Type` edge in the connection, with data from `ItemEditSuggestion`."""
type UserTypesByItemEditSuggestionAuthorIdAndTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """The `Type` at the end of the edge."""
  node: Type!
}

"""A connection to a list of `Type` values, with data from `Item`."""
type UserTypesByItemUpdatedByAndTypeIdManyToManyConnection {
  """
  A list of edges which contains the `Type`, info from the `Item`, and the cursor to aid in pagination.
  """
  edges: [UserTypesByItemUpdatedByAndTypeIdManyToManyEdge!]!

  """A list of `Type` objects."""
  nodes: [Type!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Type` you could get from the connection."""
  totalCount: Int!
}

"""A `Type` edge in the connection, with data from `Item`."""
type UserTypesByItemUpdatedByAndTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Item`."""
  items(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """The `Type` at the end of the edge."""
  node: Type!
}

"""A connection to a list of `User` values, with data from `Friend`."""
type UserUsersByFriendBlockedByAndUserId1ManyToManyConnection {
  """
  A list of edges which contains the `User`, info from the `Friend`, and the cursor to aid in pagination.
  """
  edges: [UserUsersByFriendBlockedByAndUserId1ManyToManyEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Friend`."""
type UserUsersByFriendBlockedByAndUserId1ManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Friend`."""
  friendsByUserId1(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FriendCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Friend`."""
    orderBy: [FriendsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendsConnection!

  """The `User` at the end of the edge."""
  node: User!
}

"""A connection to a list of `User` values, with data from `Friend`."""
type UserUsersByFriendBlockedByAndUserId2ManyToManyConnection {
  """
  A list of edges which contains the `User`, info from the `Friend`, and the cursor to aid in pagination.
  """
  edges: [UserUsersByFriendBlockedByAndUserId2ManyToManyEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Friend`."""
type UserUsersByFriendBlockedByAndUserId2ManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Friend`."""
  friendsByUserId2(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FriendCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Friend`."""
    orderBy: [FriendsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendsConnection!

  """The `User` at the end of the edge."""
  node: User!
}

"""A connection to a list of `User` values, with data from `Friend`."""
type UserUsersByFriendUserId1AndBlockedByManyToManyConnection {
  """
  A list of edges which contains the `User`, info from the `Friend`, and the cursor to aid in pagination.
  """
  edges: [UserUsersByFriendUserId1AndBlockedByManyToManyEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Friend`."""
type UserUsersByFriendUserId1AndBlockedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Friend`."""
  friendsByBlockedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FriendCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Friend`."""
    orderBy: [FriendsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendsConnection!

  """The `User` at the end of the edge."""
  node: User!
}

"""A connection to a list of `User` values, with data from `Friend`."""
type UserUsersByFriendUserId1AndUserId2ManyToManyConnection {
  """
  A list of edges which contains the `User`, info from the `Friend`, and the cursor to aid in pagination.
  """
  edges: [UserUsersByFriendUserId1AndUserId2ManyToManyEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Friend`."""
type UserUsersByFriendUserId1AndUserId2ManyToManyEdge {
  accepted: Date
  blockedBy: UUID

  """A cursor for use in pagination."""
  cursor: Cursor
  id: Int!

  """The `User` at the end of the edge."""
  node: User!
  sent: Date!
  status: FriendStatus!
}

"""A connection to a list of `User` values, with data from `Friend`."""
type UserUsersByFriendUserId2AndBlockedByManyToManyConnection {
  """
  A list of edges which contains the `User`, info from the `Friend`, and the cursor to aid in pagination.
  """
  edges: [UserUsersByFriendUserId2AndBlockedByManyToManyEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Friend`."""
type UserUsersByFriendUserId2AndBlockedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Friend`."""
  friendsByBlockedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FriendCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Friend`."""
    orderBy: [FriendsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendsConnection!

  """The `User` at the end of the edge."""
  node: User!
}

"""A connection to a list of `User` values, with data from `Friend`."""
type UserUsersByFriendUserId2AndUserId1ManyToManyConnection {
  """
  A list of edges which contains the `User`, info from the `Friend`, and the cursor to aid in pagination.
  """
  edges: [UserUsersByFriendUserId2AndUserId1ManyToManyEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Friend`."""
type UserUsersByFriendUserId2AndUserId1ManyToManyEdge {
  accepted: Date
  blockedBy: UUID

  """A cursor for use in pagination."""
  cursor: Cursor
  id: Int!

  """The `User` at the end of the edge."""
  node: User!
  sent: Date!
  status: FriendStatus!
}

"""A connection to a list of `User` values, with data from `Item`."""
type UserUsersByItemCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `User`, info from the `Item`, and the cursor to aid in pagination.
  """
  edges: [UserUsersByItemCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Item`."""
type UserUsersByItemCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Item`."""
  itemsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """The `User` at the end of the edge."""
  node: User!
}

"""A connection to a list of `User` values, with data from `Item`."""
type UserUsersByItemUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `User`, info from the `Item`, and the cursor to aid in pagination.
  """
  edges: [UserUsersByItemUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Item`."""
type UserUsersByItemUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Item`."""
  itemsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """The `User` at the end of the edge."""
  node: User!
}

"""A `UsersCheckInStatisticsRecord` edge in the connection."""
type UsersCheckInStatisticEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UsersCheckInStatisticsRecord` at the end of the edge."""
  node: UsersCheckInStatisticsRecord!
}

"""A connection to a list of `UsersCheckInStatisticsRecord` values."""
type UsersCheckInStatisticsConnection {
  """
  A list of edges which contains the `UsersCheckInStatisticsRecord` and cursor to aid in pagination.
  """
  edges: [UsersCheckInStatisticEdge!]!

  """A list of `UsersCheckInStatisticsRecord` objects."""
  nodes: [UsersCheckInStatisticsRecord!]!

  """
  The count of *all* `UsersCheckInStatisticsRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""The return type of our `checkInStatistics` query."""
type UsersCheckInStatisticsRecord {
  totalCheckIns: Int
  uniqueCheckIns: Int
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""A `UsersFriendsRecord` edge in the connection."""
type UsersFriendEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UsersFriendsRecord` at the end of the edge."""
  node: UsersFriendsRecord!
}

"""A connection to a list of `UsersFriendStatusRecord` values."""
type UsersFriendStatusConnection {
  """
  A list of edges which contains the `UsersFriendStatusRecord` and cursor to aid in pagination.
  """
  edges: [UsersFriendStatusEdge!]!

  """A list of `UsersFriendStatusRecord` objects."""
  nodes: [UsersFriendStatusRecord!]!

  """
  The count of *all* `UsersFriendStatusRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""A `UsersFriendStatusRecord` edge in the connection."""
type UsersFriendStatusEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UsersFriendStatusRecord` at the end of the edge."""
  node: UsersFriendStatusRecord!
}

"""The return type of our `friendStatus` query."""
type UsersFriendStatusRecord {
  isSender: Boolean
  status: FriendStatus
}

"""A connection to a list of `UsersFriendsRecord` values."""
type UsersFriendsConnection {
  """
  A list of edges which contains the `UsersFriendsRecord` and cursor to aid in pagination.
  """
  edges: [UsersFriendEdge!]!

  """A list of `UsersFriendsRecord` objects."""
  nodes: [UsersFriendsRecord!]!

  """
  The count of *all* `UsersFriendsRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""The return type of our `friends` query."""
type UsersFriendsRecord {
  avatarUrl: String
  firstName: String
  id: UUID
  isSender: Boolean
  lastName: String
  status: FriendStatus
  username: String
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USERNAME_ASC
  USERNAME_DESC
}

"""All input for the `verifyEmail` mutation."""
input VerifyEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
  userEmailId: UUID!
}

"""The output of our `verifyEmail` mutation."""
type VerifyEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}
