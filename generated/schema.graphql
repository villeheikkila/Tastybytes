"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """Not included in the specified list."""
  notIn: [Boolean!]
}

type Brand implements Node {
  """Reads a single `Company` that is related to this `Brand`."""
  company: Company
  companyId: Int
  createdAt: Datetime!
  createdBy: UUID
  id: Int!
  name: MediumText

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Product`."""
  products(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsConnection!
  updatedAt: Datetime!
  updatedBy: UUID

  """Reads a single `User` that is related to this `Brand`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `Brand`."""
  userByUpdatedBy: User
}

"""
A condition to be used against `Brand` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BrandCondition {
  """Checks for equality with the object’s `companyId` field."""
  companyId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: MediumText

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: UUID
}

"""
A filter to be used against `Brand` object types. All fields are combined with a logical ‘and.’
"""
input BrandFilter {
  """Checks for all expressions in this list."""
  and: [BrandFilter!]

  """Filter by the object’s `companyId` field."""
  companyId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: UUIDFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: MediumTextFilter

  """Negates the expression."""
  not: BrandFilter

  """Checks for any expressions in this list."""
  or: [BrandFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: UUIDFilter
}

"""An input for mutations affecting `Brand`"""
input BrandInput {
  companyId: Int
  createdAt: Datetime
  createdBy: UUID
  id: Int
  name: MediumText
  updatedAt: Datetime
  updatedBy: UUID
}

"""
Represents an update to a `Brand`. Fields that are set will be updated.
"""
input BrandPatch {
  companyId: Int
  createdAt: Datetime
  createdBy: UUID
  id: Int
  name: MediumText
  updatedAt: Datetime
  updatedBy: UUID
}

"""A connection to a list of `Brand` values."""
type BrandsConnection {
  """
  A list of edges which contains the `Brand` and cursor to aid in pagination.
  """
  edges: [BrandsEdge!]!

  """A list of `Brand` objects."""
  nodes: [Brand]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection."""
type BrandsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Brand` at the end of the edge."""
  node: Brand
}

"""Methods to use when ordering `Brand`."""
enum BrandsOrderBy {
  COMPANY_ID_ASC
  COMPANY_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""A connection to a list of `Category` values."""
type CategoriesConnection {
  """
  A list of edges which contains the `Category` and cursor to aid in pagination.
  """
  edges: [CategoriesEdge!]!

  """A list of `Category` objects."""
  nodes: [Category]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Category` you could get from the connection."""
  totalCount: Int!
}

"""A `Category` edge in the connection."""
type CategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Category` at the end of the edge."""
  node: Category
}

"""Methods to use when ordering `Category`."""
enum CategoriesOrderBy {
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Category implements Node {
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Type`."""
  typesByCategory(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Type`."""
    orderBy: [TypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TypesConnection!
}

"""
A condition to be used against `Category` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CategoryCondition {
  """Checks for equality with the object’s `name` field."""
  name: String
}

"""
A filter to be used against `Category` object types. All fields are combined with a logical ‘and.’
"""
input CategoryFilter {
  """Checks for all expressions in this list."""
  and: [CategoryFilter!]

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: CategoryFilter

  """Checks for any expressions in this list."""
  or: [CategoryFilter!]
}

"""An input for mutations affecting `Category`"""
input CategoryInput {
  name: String!
}

"""
Represents an update to a `Category`. Fields that are set will be updated.
"""
input CategoryPatch {
  name: String
}

type CheckIn implements Node {
  """Reads a single `User` that is related to this `CheckIn`."""
  author: User
  authorId: UUID!
  checkInDate: Date
  createdAt: Datetime!
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Product` that is related to this `CheckIn`."""
  product: Product
  productId: Int!
  rating: Int
  review: String
  updatedAt: Datetime!
}

"""
A condition to be used against `CheckIn` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CheckInCondition {
  """Checks for equality with the object’s `authorId` field."""
  authorId: UUID

  """Checks for equality with the object’s `checkInDate` field."""
  checkInDate: Date

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `productId` field."""
  productId: Int

  """Checks for equality with the object’s `rating` field."""
  rating: Int

  """Checks for equality with the object’s `review` field."""
  review: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `CheckIn` object types. All fields are combined with a logical ‘and.’
"""
input CheckInFilter {
  """Checks for all expressions in this list."""
  and: [CheckInFilter!]

  """Filter by the object’s `authorId` field."""
  authorId: UUIDFilter

  """Filter by the object’s `checkInDate` field."""
  checkInDate: DateFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Negates the expression."""
  not: CheckInFilter

  """Checks for any expressions in this list."""
  or: [CheckInFilter!]

  """Filter by the object’s `productId` field."""
  productId: IntFilter

  """Filter by the object’s `rating` field."""
  rating: IntFilter

  """Filter by the object’s `review` field."""
  review: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `CheckIn`"""
input CheckInInput {
  authorId: UUID!
  checkInDate: Date
  createdAt: Datetime
  id: Int
  productId: Int!
  rating: Int
  review: String
  updatedAt: Datetime
}

"""
Represents an update to a `CheckIn`. Fields that are set will be updated.
"""
input CheckInPatch {
  authorId: UUID
  checkInDate: Date
  createdAt: Datetime
  id: Int
  productId: Int
  rating: Int
  review: String
  updatedAt: Datetime
}

"""A connection to a list of `CheckIn` values."""
type CheckInsConnection {
  """
  A list of edges which contains the `CheckIn` and cursor to aid in pagination.
  """
  edges: [CheckInsEdge!]!

  """A list of `CheckIn` objects."""
  nodes: [CheckIn]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CheckIn` you could get from the connection."""
  totalCount: Int!
}

"""A `CheckIn` edge in the connection."""
type CheckInsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CheckIn` at the end of the edge."""
  node: CheckIn
}

"""Methods to use when ordering `CheckIn`."""
enum CheckInsOrderBy {
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  CHECK_IN_DATE_ASC
  CHECK_IN_DATE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PRODUCT_ID_ASC
  PRODUCT_ID_DESC
  RATING_ASC
  RATING_DESC
  REVIEW_ASC
  REVIEW_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""A connection to a list of `Company` values."""
type CompaniesConnection {
  """
  A list of edges which contains the `Company` and cursor to aid in pagination.
  """
  edges: [CompaniesEdge!]!

  """A list of `Company` objects."""
  nodes: [Company]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Company` you could get from the connection."""
  totalCount: Int!
}

"""A `Company` edge in the connection."""
type CompaniesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Company` at the end of the edge."""
  node: Company
}

"""Methods to use when ordering `Company`."""
enum CompaniesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Company implements Node {
  averageRating: Int

  """Reads and enables pagination through a set of `Brand`."""
  brands(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BrandCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BrandFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsConnection!
  checkInsPastMonth: Int
  createdAt: Datetime!
  createdBy: UUID
  id: Int!
  isVerified: Boolean!
  name: MediumText

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Product`."""
  productsByManufacturerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsConnection!
  totalCheckIns: Int
  totalItems: Int

  """Reads a single `User` that is related to this `Company`."""
  userByCreatedBy: User
}

"""
A condition to be used against `Company` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CompanyCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isVerified` field."""
  isVerified: Boolean

  """Checks for equality with the object’s `name` field."""
  name: MediumText
}

"""
A filter to be used against `Company` object types. All fields are combined with a logical ‘and.’
"""
input CompanyFilter {
  """Checks for all expressions in this list."""
  and: [CompanyFilter!]

  """Filter by the object’s `averageRating` field."""
  averageRating: IntFilter

  """Filter by the object’s `checkInsPastMonth` field."""
  checkInsPastMonth: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: UUIDFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `isVerified` field."""
  isVerified: BooleanFilter

  """Filter by the object’s `name` field."""
  name: MediumTextFilter

  """Negates the expression."""
  not: CompanyFilter

  """Checks for any expressions in this list."""
  or: [CompanyFilter!]

  """Filter by the object’s `totalCheckIns` field."""
  totalCheckIns: IntFilter

  """Filter by the object’s `totalItems` field."""
  totalItems: IntFilter
}

"""An input for mutations affecting `Company`"""
input CompanyInput {
  createdAt: Datetime
  createdBy: UUID
  id: Int
  isVerified: Boolean
  name: MediumText
}

"""
Represents an update to a `Company`. Fields that are set will be updated.
"""
input CompanyPatch {
  createdAt: Datetime
  createdBy: UUID
  id: Int
  isVerified: Boolean
  name: MediumText
}

"""All input for the create `Brand` mutation."""
input CreateBrandInput {
  """The `Brand` to be created by this mutation."""
  brand: BrandInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Brand` mutation."""
type CreateBrandPayload {
  """The `Brand` that was created by this mutation."""
  brand: Brand

  """An edge for our `Brand`. May be used by Relay 1."""
  brandEdge(
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Company` that is related to this `Brand`."""
  company: Company

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Brand`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `Brand`."""
  userByUpdatedBy: User
}

"""All input for the create `Category` mutation."""
input CreateCategoryInput {
  """The `Category` to be created by this mutation."""
  category: CategoryInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Category` mutation."""
type CreateCategoryPayload {
  """The `Category` that was created by this mutation."""
  category: Category

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CheckIn` mutation."""
input CreateCheckInInput {
  """The `CheckIn` to be created by this mutation."""
  checkIn: CheckInInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CheckIn` mutation."""
type CreateCheckInPayload {
  """Reads a single `User` that is related to this `CheckIn`."""
  author: User

  """The `CheckIn` that was created by this mutation."""
  checkIn: CheckIn

  """An edge for our `CheckIn`. May be used by Relay 1."""
  checkInEdge(
    """The method to use when ordering `CheckIn`."""
    orderBy: [CheckInsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Product` that is related to this `CheckIn`."""
  product: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Company` mutation."""
input CreateCompanyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Company` to be created by this mutation."""
  company: CompanyInput!
}

"""The output of our create `Company` mutation."""
type CreateCompanyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Company` that was created by this mutation."""
  company: Company

  """An edge for our `Company`. May be used by Relay 1."""
  companyEdge(
    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompaniesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Company`."""
  userByCreatedBy: User
}

"""All input for the create `Product` mutation."""
input CreateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Product` to be created by this mutation."""
  product: ProductInput!
}

"""The output of our create `Product` mutation."""
type CreateProductPayload {
  """Reads a single `Brand` that is related to this `Product`."""
  brand: Brand

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Company` that is related to this `Product`."""
  manufacturer: Company

  """The `Product` that was created by this mutation."""
  product: Product

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Type` that is related to this `Product`."""
  type: Type

  """Reads a single `User` that is related to this `Product`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `Product`."""
  userByUpdatedBy: User
}

"""All input for the create `Type` mutation."""
input CreateTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Type` to be created by this mutation."""
  type: TypeInput!
}

"""The output of our create `Type` mutation."""
type CreateTypePayload {
  """Reads a single `Category` that is related to this `Type`."""
  categoryByCategory: Category

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Type` that was created by this mutation."""
  type: Type

  """An edge for our `Type`. May be used by Relay 1."""
  typeEdge(
    """The method to use when ordering `Type`."""
    orderBy: [TypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TypesEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was created by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A filter to be used against Date fields. All fields are combined with a logical ‘and.’
"""
input DateFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Date

  """Equal to the specified value."""
  equalTo: Date

  """Greater than the specified value."""
  greaterThan: Date

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Date

  """Included in the specified list."""
  in: [Date!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Date

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Date

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Date

  """Not equal to the specified value."""
  notEqualTo: Date

  """Not included in the specified list."""
  notIn: [Date!]
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """Not included in the specified list."""
  notIn: [Datetime!]
}

"""All input for the `deleteBrandByCompanyIdAndName` mutation."""
input DeleteBrandByCompanyIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  companyId: Int!
  name: MediumText!
}

"""All input for the `deleteBrandByNameAndCompanyId` mutation."""
input DeleteBrandByNameAndCompanyIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  companyId: Int!
  name: MediumText!
}

"""All input for the `deleteBrandByNodeId` mutation."""
input DeleteBrandByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Brand` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteBrand` mutation."""
input DeleteBrandInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Brand` mutation."""
type DeleteBrandPayload {
  """The `Brand` that was deleted by this mutation."""
  brand: Brand

  """An edge for our `Brand`. May be used by Relay 1."""
  brandEdge(
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Company` that is related to this `Brand`."""
  company: Company
  deletedBrandNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Brand`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `Brand`."""
  userByUpdatedBy: User
}

"""All input for the `deleteCategoryByNodeId` mutation."""
input DeleteCategoryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Category` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCategory` mutation."""
input DeleteCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""The output of our delete `Category` mutation."""
type DeleteCategoryPayload {
  """The `Category` that was deleted by this mutation."""
  category: Category

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCategoryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCheckInByNodeId` mutation."""
input DeleteCheckInByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CheckIn` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCheckIn` mutation."""
input DeleteCheckInInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `CheckIn` mutation."""
type DeleteCheckInPayload {
  """Reads a single `User` that is related to this `CheckIn`."""
  author: User

  """The `CheckIn` that was deleted by this mutation."""
  checkIn: CheckIn

  """An edge for our `CheckIn`. May be used by Relay 1."""
  checkInEdge(
    """The method to use when ordering `CheckIn`."""
    orderBy: [CheckInsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCheckInNodeId: ID

  """Reads a single `Product` that is related to this `CheckIn`."""
  product: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCompanyByName` mutation."""
input DeleteCompanyByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: MediumText!
}

"""All input for the `deleteCompanyByNodeId` mutation."""
input DeleteCompanyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Company` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCompany` mutation."""
input DeleteCompanyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Company` mutation."""
type DeleteCompanyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Company` that was deleted by this mutation."""
  company: Company

  """An edge for our `Company`. May be used by Relay 1."""
  companyEdge(
    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompaniesEdge
  deletedCompanyNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Company`."""
  userByCreatedBy: User
}

"""All input for the `deleteProductByNameAndBrandIdAndTypeId` mutation."""
input DeleteProductByNameAndBrandIdAndTypeIdInput {
  brandId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: MediumText!
  typeId: Int!
}

"""All input for the `deleteProductByNodeId` mutation."""
input DeleteProductByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Product` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteProduct` mutation."""
input DeleteProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Product` mutation."""
type DeleteProductPayload {
  """Reads a single `Brand` that is related to this `Product`."""
  brand: Brand

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProductNodeId: ID

  """Reads a single `Company` that is related to this `Product`."""
  manufacturer: Company

  """The `Product` that was deleted by this mutation."""
  product: Product

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Type` that is related to this `Product`."""
  type: Type

  """Reads a single `User` that is related to this `Product`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `Product`."""
  userByUpdatedBy: User
}

"""All input for the `deleteTypeByNameAndCategory` mutation."""
input DeleteTypeByNameAndCategoryInput {
  category: String!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the `deleteTypeByNodeId` mutation."""
input DeleteTypeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Type` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteType` mutation."""
input DeleteTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Type` mutation."""
type DeleteTypePayload {
  """Reads a single `Category` that is related to this `Type`."""
  categoryByCategory: Category

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTypeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Type` that was deleted by this mutation."""
  type: Type

  """An edge for our `Type`. May be used by Relay 1."""
  typeEdge(
    """The method to use when ordering `Type`."""
    orderBy: [TypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TypesEdge
}

"""All input for the `deleteUserByNodeId` mutation."""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserByUsername` mutation."""
input DeleteUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was deleted by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """Included in the specified list."""
  in: [Int!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """Not included in the specified list."""
  notIn: [Int!]
}

"""All input for the `login` mutation."""
input LoginInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  password: String!
  username: String!
}

"""The output of our `login` mutation."""
type LoginPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

scalar LongText

"""
A filter to be used against LongText fields. All fields are combined with a logical ‘and.’
"""
input LongTextFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: LongText

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: LongText

  """Ends with the specified string (case-sensitive)."""
  endsWith: LongText

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: LongText

  """Equal to the specified value."""
  equalTo: LongText

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: LongText

  """Greater than the specified value."""
  greaterThan: LongText

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: LongText

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: LongText

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: LongText

  """Included in the specified list."""
  in: [LongText!]

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [LongText!]

  """Contains the specified string (case-sensitive)."""
  includes: LongText

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: LongText

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: LongText

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: LongText

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: LongText

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: LongText

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: LongText

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: LongText

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: LongText

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: LongText

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: LongText

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: LongText

  """Not equal to the specified value."""
  notEqualTo: LongText

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: LongText

  """Not included in the specified list."""
  notIn: [LongText!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [LongText!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: LongText

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: LongText

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: LongText

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: LongText

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: LongText

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: LongText

  """Starts with the specified string (case-sensitive)."""
  startsWith: LongText

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: LongText
}

scalar MediumText

"""
A filter to be used against MediumText fields. All fields are combined with a logical ‘and.’
"""
input MediumTextFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: MediumText

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: MediumText

  """Ends with the specified string (case-sensitive)."""
  endsWith: MediumText

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: MediumText

  """Equal to the specified value."""
  equalTo: MediumText

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: MediumText

  """Greater than the specified value."""
  greaterThan: MediumText

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: MediumText

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: MediumText

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: MediumText

  """Included in the specified list."""
  in: [MediumText!]

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [MediumText!]

  """Contains the specified string (case-sensitive)."""
  includes: MediumText

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: MediumText

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: MediumText

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: MediumText

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: MediumText

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: MediumText

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: MediumText

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: MediumText

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: MediumText

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: MediumText

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: MediumText

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: MediumText

  """Not equal to the specified value."""
  notEqualTo: MediumText

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: MediumText

  """Not included in the specified list."""
  notIn: [MediumText!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [MediumText!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: MediumText

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: MediumText

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: MediumText

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: MediumText

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: MediumText

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: MediumText

  """Starts with the specified string (case-sensitive)."""
  startsWith: MediumText

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: MediumText
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Brand`."""
  createBrand(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBrandInput!
  ): CreateBrandPayload

  """Creates a single `Category`."""
  createCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCategoryInput!
  ): CreateCategoryPayload

  """Creates a single `CheckIn`."""
  createCheckIn(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCheckInInput!
  ): CreateCheckInPayload

  """Creates a single `Company`."""
  createCompany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCompanyInput!
  ): CreateCompanyPayload

  """Creates a single `Product`."""
  createProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProductInput!
  ): CreateProductPayload

  """Creates a single `Type`."""
  createType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTypeInput!
  ): CreateTypePayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Deletes a single `Brand` using a unique key."""
  deleteBrand(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBrandInput!
  ): DeleteBrandPayload

  """Deletes a single `Brand` using a unique key."""
  deleteBrandByCompanyIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBrandByCompanyIdAndNameInput!
  ): DeleteBrandPayload

  """Deletes a single `Brand` using a unique key."""
  deleteBrandByNameAndCompanyId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBrandByNameAndCompanyIdInput!
  ): DeleteBrandPayload

  """Deletes a single `Brand` using its globally unique id."""
  deleteBrandByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBrandByNodeIdInput!
  ): DeleteBrandPayload

  """Deletes a single `Category` using a unique key."""
  deleteCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCategoryInput!
  ): DeleteCategoryPayload

  """Deletes a single `Category` using its globally unique id."""
  deleteCategoryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCategoryByNodeIdInput!
  ): DeleteCategoryPayload

  """Deletes a single `CheckIn` using a unique key."""
  deleteCheckIn(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCheckInInput!
  ): DeleteCheckInPayload

  """Deletes a single `CheckIn` using its globally unique id."""
  deleteCheckInByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCheckInByNodeIdInput!
  ): DeleteCheckInPayload

  """Deletes a single `Company` using a unique key."""
  deleteCompany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompanyInput!
  ): DeleteCompanyPayload

  """Deletes a single `Company` using a unique key."""
  deleteCompanyByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompanyByNameInput!
  ): DeleteCompanyPayload

  """Deletes a single `Company` using its globally unique id."""
  deleteCompanyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompanyByNodeIdInput!
  ): DeleteCompanyPayload

  """Deletes a single `Product` using a unique key."""
  deleteProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductInput!
  ): DeleteProductPayload

  """Deletes a single `Product` using a unique key."""
  deleteProductByNameAndBrandIdAndTypeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductByNameAndBrandIdAndTypeIdInput!
  ): DeleteProductPayload

  """Deletes a single `Product` using its globally unique id."""
  deleteProductByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductByNodeIdInput!
  ): DeleteProductPayload

  """Deletes a single `Type` using a unique key."""
  deleteType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTypeInput!
  ): DeleteTypePayload

  """Deletes a single `Type` using a unique key."""
  deleteTypeByNameAndCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTypeByNameAndCategoryInput!
  ): DeleteTypePayload

  """Deletes a single `Type` using its globally unique id."""
  deleteTypeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTypeByNodeIdInput!
  ): DeleteTypePayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByUsernameInput!
  ): DeleteUserPayload
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload

  """Updates a single `Brand` using a unique key and a patch."""
  updateBrand(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBrandInput!
  ): UpdateBrandPayload

  """Updates a single `Brand` using a unique key and a patch."""
  updateBrandByCompanyIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBrandByCompanyIdAndNameInput!
  ): UpdateBrandPayload

  """Updates a single `Brand` using a unique key and a patch."""
  updateBrandByNameAndCompanyId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBrandByNameAndCompanyIdInput!
  ): UpdateBrandPayload

  """Updates a single `Brand` using its globally unique id and a patch."""
  updateBrandByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBrandByNodeIdInput!
  ): UpdateBrandPayload

  """Updates a single `Category` using a unique key and a patch."""
  updateCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCategoryInput!
  ): UpdateCategoryPayload

  """Updates a single `Category` using its globally unique id and a patch."""
  updateCategoryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCategoryByNodeIdInput!
  ): UpdateCategoryPayload

  """Updates a single `CheckIn` using a unique key and a patch."""
  updateCheckIn(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCheckInInput!
  ): UpdateCheckInPayload

  """Updates a single `CheckIn` using its globally unique id and a patch."""
  updateCheckInByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCheckInByNodeIdInput!
  ): UpdateCheckInPayload

  """Updates a single `Company` using a unique key and a patch."""
  updateCompany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompanyInput!
  ): UpdateCompanyPayload

  """Updates a single `Company` using a unique key and a patch."""
  updateCompanyByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompanyByNameInput!
  ): UpdateCompanyPayload

  """Updates a single `Company` using its globally unique id and a patch."""
  updateCompanyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompanyByNodeIdInput!
  ): UpdateCompanyPayload

  """Updates a single `Product` using a unique key and a patch."""
  updateProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductInput!
  ): UpdateProductPayload

  """Updates a single `Product` using a unique key and a patch."""
  updateProductByNameAndBrandIdAndTypeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductByNameAndBrandIdAndTypeIdInput!
  ): UpdateProductPayload

  """Updates a single `Product` using its globally unique id and a patch."""
  updateProductByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductByNodeIdInput!
  ): UpdateProductPayload

  """Updates a single `Type` using a unique key and a patch."""
  updateType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTypeInput!
  ): UpdateTypePayload

  """Updates a single `Type` using a unique key and a patch."""
  updateTypeByNameAndCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTypeByNameAndCategoryInput!
  ): UpdateTypePayload

  """Updates a single `Type` using its globally unique id and a patch."""
  updateTypeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTypeByNodeIdInput!
  ): UpdateTypePayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUsernameInput!
  ): UpdateUserPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Product implements Node {
  """Reads a single `Brand` that is related to this `Product`."""
  brand: Brand
  brandId: Int!

  """Reads and enables pagination through a set of `CheckIn`."""
  checkIns(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CheckInFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckIn`."""
    orderBy: [CheckInsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInsConnection!
  checkInsPastMonth: Int
  createdAt: Datetime!
  createdBy: UUID
  description: LongText
  id: Int!
  isVerified: Boolean

  """Reads a single `Company` that is related to this `Product`."""
  manufacturer: Company
  manufacturerId: Int
  name: MediumText

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  totalCheckIns: Int

  """Reads a single `Type` that is related to this `Product`."""
  type: Type
  typeId: Int!
  updatedAt: Datetime!
  updatedBy: UUID

  """Reads a single `User` that is related to this `Product`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `Product`."""
  userByUpdatedBy: User
}

"""
A condition to be used against `Product` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProductCondition {
  """Checks for equality with the object’s `brandId` field."""
  brandId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """Checks for equality with the object’s `description` field."""
  description: LongText

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isVerified` field."""
  isVerified: Boolean

  """Checks for equality with the object’s `manufacturerId` field."""
  manufacturerId: Int

  """Checks for equality with the object’s `name` field."""
  name: MediumText

  """Checks for equality with the object’s `typeId` field."""
  typeId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: UUID
}

"""
A filter to be used against `Product` object types. All fields are combined with a logical ‘and.’
"""
input ProductFilter {
  """Checks for all expressions in this list."""
  and: [ProductFilter!]

  """Filter by the object’s `brandId` field."""
  brandId: IntFilter

  """Filter by the object’s `checkInsPastMonth` field."""
  checkInsPastMonth: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: UUIDFilter

  """Filter by the object’s `description` field."""
  description: LongTextFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `isVerified` field."""
  isVerified: BooleanFilter

  """Filter by the object’s `manufacturerId` field."""
  manufacturerId: IntFilter

  """Filter by the object’s `name` field."""
  name: MediumTextFilter

  """Negates the expression."""
  not: ProductFilter

  """Checks for any expressions in this list."""
  or: [ProductFilter!]

  """Filter by the object’s `totalCheckIns` field."""
  totalCheckIns: IntFilter

  """Filter by the object’s `typeId` field."""
  typeId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: UUIDFilter
}

"""An input for mutations affecting `Product`"""
input ProductInput {
  brandId: Int!
  createdAt: Datetime
  createdBy: UUID
  description: LongText
  id: Int
  isVerified: Boolean
  manufacturerId: Int
  name: MediumText
  typeId: Int!
  updatedAt: Datetime
  updatedBy: UUID
}

"""
Represents an update to a `Product`. Fields that are set will be updated.
"""
input ProductPatch {
  brandId: Int
  createdAt: Datetime
  createdBy: UUID
  description: LongText
  id: Int
  isVerified: Boolean
  manufacturerId: Int
  name: MediumText
  typeId: Int
  updatedAt: Datetime
  updatedBy: UUID
}

"""A connection to a list of `Product` values."""
type ProductsConnection {
  """
  A list of edges which contains the `Product` and cursor to aid in pagination.
  """
  edges: [ProductsEdge!]!

  """A list of `Product` objects."""
  nodes: [Product]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection."""
type ProductsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Product` at the end of the edge."""
  node: Product
}

"""Methods to use when ordering `Product`."""
enum ProductsOrderBy {
  BRAND_ID_ASC
  BRAND_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  MANUFACTURER_ID_ASC
  MANUFACTURER_ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  brand(id: Int!): Brand
  brandByCompanyIdAndName(companyId: Int!, name: MediumText!): Brand
  brandByNameAndCompanyId(companyId: Int!, name: MediumText!): Brand

  """Reads a single `Brand` using its globally unique `ID`."""
  brandByNodeId(
    """The globally unique `ID` to be used in selecting a single `Brand`."""
    nodeId: ID!
  ): Brand

  """Reads and enables pagination through a set of `Brand`."""
  brands(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BrandCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BrandFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsConnection

  """Reads and enables pagination through a set of `Category`."""
  categories(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesConnection
  category(name: String!): Category

  """Reads a single `Category` using its globally unique `ID`."""
  categoryByNodeId(
    """The globally unique `ID` to be used in selecting a single `Category`."""
    nodeId: ID!
  ): Category
  checkIn(id: Int!): CheckIn

  """Reads a single `CheckIn` using its globally unique `ID`."""
  checkInByNodeId(
    """The globally unique `ID` to be used in selecting a single `CheckIn`."""
    nodeId: ID!
  ): CheckIn

  """Reads and enables pagination through a set of `CheckIn`."""
  checkIns(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CheckInFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckIn`."""
    orderBy: [CheckInsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInsConnection

  """Reads and enables pagination through a set of `Company`."""
  companies(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CompanyFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompaniesConnection
  company(id: Int!): Company
  companyByName(name: MediumText!): Company

  """Reads a single `Company` using its globally unique `ID`."""
  companyByNodeId(
    """The globally unique `ID` to be used in selecting a single `Company`."""
    nodeId: ID!
  ): Company

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!
  product(id: Int!): Product
  productByNameAndBrandIdAndTypeId(brandId: Int!, name: MediumText!, typeId: Int!): Product

  """Reads a single `Product` using its globally unique `ID`."""
  productByNodeId(
    """The globally unique `ID` to be used in selecting a single `Product`."""
    nodeId: ID!
  ): Product

  """Reads and enables pagination through a set of `Product`."""
  products(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads and enables pagination through a set of `Product`."""
  searchProducts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    search: String
  ): ProductsConnection
  type(id: Int!): Type
  typeByNameAndCategory(category: String!, name: String!): Type

  """Reads a single `Type` using its globally unique `ID`."""
  typeByNodeId(
    """The globally unique `ID` to be used in selecting a single `Type`."""
    nodeId: ID!
  ): Type

  """Reads and enables pagination through a set of `Type`."""
  types(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Type`."""
    orderBy: [TypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TypesConnection
  user(id: UUID!): User

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
  userByUsername(username: String!): User
}

"""All input for the `register` mutation."""
input RegisterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  password: String
  username: String!
}

"""The output of our `register` mutation."""
type RegisterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

scalar ShortText

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String

  """Included in the specified list."""
  in: [String!]

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """Not included in the specified list."""
  notIn: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

type Type implements Node {
  category: String!

  """Reads a single `Category` that is related to this `Type`."""
  categoryByCategory: Category
  id: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Product`."""
  products(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsConnection!
}

"""
A condition to be used against `Type` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TypeCondition {
  """Checks for equality with the object’s `category` field."""
  category: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""
A filter to be used against `Type` object types. All fields are combined with a logical ‘and.’
"""
input TypeFilter {
  """Checks for all expressions in this list."""
  and: [TypeFilter!]

  """Filter by the object’s `category` field."""
  category: StringFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: TypeFilter

  """Checks for any expressions in this list."""
  or: [TypeFilter!]
}

"""An input for mutations affecting `Type`"""
input TypeInput {
  category: String!
  id: Int
  name: String!
}

"""Represents an update to a `Type`. Fields that are set will be updated."""
input TypePatch {
  category: String
  id: Int
  name: String
}

"""A connection to a list of `Type` values."""
type TypesConnection {
  """
  A list of edges which contains the `Type` and cursor to aid in pagination.
  """
  edges: [TypesEdge!]!

  """A list of `Type` objects."""
  nodes: [Type]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Type` you could get from the connection."""
  totalCount: Int!
}

"""A `Type` edge in the connection."""
type TypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Type` at the end of the edge."""
  node: Type
}

"""Methods to use when ordering `Type`."""
enum TypesOrderBy {
  CATEGORY_ASC
  CATEGORY_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value."""
  equalTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """Included in the specified list."""
  in: [UUID!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """Not included in the specified list."""
  notIn: [UUID!]
}

"""All input for the `updateBrandByCompanyIdAndName` mutation."""
input UpdateBrandByCompanyIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  companyId: Int!
  name: MediumText!

  """
  An object where the defined keys will be set on the `Brand` being updated.
  """
  patch: BrandPatch!
}

"""All input for the `updateBrandByNameAndCompanyId` mutation."""
input UpdateBrandByNameAndCompanyIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  companyId: Int!
  name: MediumText!

  """
  An object where the defined keys will be set on the `Brand` being updated.
  """
  patch: BrandPatch!
}

"""All input for the `updateBrandByNodeId` mutation."""
input UpdateBrandByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Brand` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Brand` being updated.
  """
  patch: BrandPatch!
}

"""All input for the `updateBrand` mutation."""
input UpdateBrandInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Brand` being updated.
  """
  patch: BrandPatch!
}

"""The output of our update `Brand` mutation."""
type UpdateBrandPayload {
  """The `Brand` that was updated by this mutation."""
  brand: Brand

  """An edge for our `Brand`. May be used by Relay 1."""
  brandEdge(
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Company` that is related to this `Brand`."""
  company: Company

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Brand`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `Brand`."""
  userByUpdatedBy: User
}

"""All input for the `updateCategoryByNodeId` mutation."""
input UpdateCategoryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Category` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Category` being updated.
  """
  patch: CategoryPatch!
}

"""All input for the `updateCategory` mutation."""
input UpdateCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!

  """
  An object where the defined keys will be set on the `Category` being updated.
  """
  patch: CategoryPatch!
}

"""The output of our update `Category` mutation."""
type UpdateCategoryPayload {
  """The `Category` that was updated by this mutation."""
  category: Category

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCheckInByNodeId` mutation."""
input UpdateCheckInByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CheckIn` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CheckIn` being updated.
  """
  patch: CheckInPatch!
}

"""All input for the `updateCheckIn` mutation."""
input UpdateCheckInInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `CheckIn` being updated.
  """
  patch: CheckInPatch!
}

"""The output of our update `CheckIn` mutation."""
type UpdateCheckInPayload {
  """Reads a single `User` that is related to this `CheckIn`."""
  author: User

  """The `CheckIn` that was updated by this mutation."""
  checkIn: CheckIn

  """An edge for our `CheckIn`. May be used by Relay 1."""
  checkInEdge(
    """The method to use when ordering `CheckIn`."""
    orderBy: [CheckInsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Product` that is related to this `CheckIn`."""
  product: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCompanyByName` mutation."""
input UpdateCompanyByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: MediumText!

  """
  An object where the defined keys will be set on the `Company` being updated.
  """
  patch: CompanyPatch!
}

"""All input for the `updateCompanyByNodeId` mutation."""
input UpdateCompanyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Company` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Company` being updated.
  """
  patch: CompanyPatch!
}

"""All input for the `updateCompany` mutation."""
input UpdateCompanyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Company` being updated.
  """
  patch: CompanyPatch!
}

"""The output of our update `Company` mutation."""
type UpdateCompanyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Company` that was updated by this mutation."""
  company: Company

  """An edge for our `Company`. May be used by Relay 1."""
  companyEdge(
    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompaniesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Company`."""
  userByCreatedBy: User
}

"""All input for the `updateProductByNameAndBrandIdAndTypeId` mutation."""
input UpdateProductByNameAndBrandIdAndTypeIdInput {
  brandId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: MediumText!

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  patch: ProductPatch!
  typeId: Int!
}

"""All input for the `updateProductByNodeId` mutation."""
input UpdateProductByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Product` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  patch: ProductPatch!
}

"""All input for the `updateProduct` mutation."""
input UpdateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  patch: ProductPatch!
}

"""The output of our update `Product` mutation."""
type UpdateProductPayload {
  """Reads a single `Brand` that is related to this `Product`."""
  brand: Brand

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Company` that is related to this `Product`."""
  manufacturer: Company

  """The `Product` that was updated by this mutation."""
  product: Product

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Type` that is related to this `Product`."""
  type: Type

  """Reads a single `User` that is related to this `Product`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `Product`."""
  userByUpdatedBy: User
}

"""All input for the `updateTypeByNameAndCategory` mutation."""
input UpdateTypeByNameAndCategoryInput {
  category: String!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!

  """
  An object where the defined keys will be set on the `Type` being updated.
  """
  patch: TypePatch!
}

"""All input for the `updateTypeByNodeId` mutation."""
input UpdateTypeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Type` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Type` being updated.
  """
  patch: TypePatch!
}

"""All input for the `updateType` mutation."""
input UpdateTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Type` being updated.
  """
  patch: TypePatch!
}

"""The output of our update `Type` mutation."""
type UpdateTypePayload {
  """Reads a single `Category` that is related to this `Type`."""
  categoryByCategory: Category

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Type` that was updated by this mutation."""
  type: Type

  """An edge for our `Type`. May be used by Relay 1."""
  typeEdge(
    """The method to use when ordering `Type`."""
    orderBy: [TypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TypesEdge
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""All input for the `updateUserByUsername` mutation."""
input UpdateUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  username: String!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A user who can log in to the application."""
type User implements Node {
  """Reads and enables pagination through a set of `CheckIn`."""
  authoredCheckIns(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CheckInFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckIn`."""
    orderBy: [CheckInsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInsConnection!

  """Reads and enables pagination through a set of `Brand`."""
  brandsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BrandCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BrandFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsConnection!

  """Reads and enables pagination through a set of `Brand`."""
  brandsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BrandCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BrandFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsConnection!

  """Reads and enables pagination through a set of `Company`."""
  companiesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CompanyFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompaniesConnection!
  createdAt: Datetime!
  firstName: ShortText
  id: UUID!
  isAdmin: Boolean!
  isVerified: Boolean!
  lastName: ShortText

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Product`."""
  productsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsConnection!

  """Reads and enables pagination through a set of `Product`."""
  productsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsConnection!
  updatedAt: Datetime!
  username: String!
}

"""An input for mutations affecting `User`"""
input UserInput {
  createdAt: Datetime
  firstName: ShortText
  id: UUID
  isAdmin: Boolean
  isVerified: Boolean
  lastName: ShortText
  updatedAt: Datetime
  username: String!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  createdAt: Datetime
  firstName: ShortText
  id: UUID
  isAdmin: Boolean
  isVerified: Boolean
  lastName: ShortText
  updatedAt: Datetime
  username: String
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  ID_ASC
  ID_DESC
  IS_ADMIN_ASC
  IS_ADMIN_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USERNAME_ASC
  USERNAME_DESC
}
