{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/compiler/shims/react.ts", "../app/entry.server.tsx", "/Users/villeheikkila/Developer/tasted/app/root.tsx", "/Users/villeheikkila/Developer/tasted/app/routes/users/$username.tsx", "../app/supabase.ts", "/Users/villeheikkila/Developer/tasted/app/routes/private.tsx", "../app/auth.server.ts", "/Users/villeheikkila/Developer/tasted/app/routes/index.tsx", "/Users/villeheikkila/Developer/tasted/app/routes/login.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "import { renderToString } from \"react-dom/server\";\nimport { RemixServer } from \"@remix-run/react\";\nimport type { EntryContext } from \"remix\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  const markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(`<!DOCTYPE html>${markup}`, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        {process.env.NODE_ENV === \"development\" && <LiveReload />}\n      </body>\n    </html>\n  );\n}\n", "import type { ActionFunction, LoaderFunction } from \"remix\";\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { supabaseClient } from \"~/supabase\";\n\nexport function headers() {\n  return {\n    \"Cache-Control\": \"max-age=3600, s-maxage=4200\",\n  };\n}\n\ntype LoaderData = { email?: string; data: MaterializedCheckIn[] | null };\n\nexport const action: ActionFunction = async ({ request }) => {};\n\ninterface MaterializedCheckIn {\n  category: string;\n  subcategory: string;\n  manufacturer: string;\n  brand_owner: string;\n  brand: string;\n  \"sub-brand\": string | null;\n  name: string | null;\n  description: string | null;\n  rating: number;\n}\nexport const loader: LoaderFunction = async ({ request }) => {\n  const { data, error } = await supabaseClient\n    .from(\"materialized_overview\")\n    .select(`*`)\n    .limit(2500);\n  return json<LoaderData>({ data });\n};\n\nexport default function Screen() {\n  const { email, data } = useLoaderData<LoaderData>();\n  return (\n    <>\n      <h1>Hello {email}</h1>\n      {data && (\n        <div>\n          <table>\n            <thead>\n              <tr>\n                <th>Category</th>\n                <th>Subcategory</th>\n                <th>Manufacturer</th>\n                <th>Brand Owner</th>\n                <th>Brand</th>\n                <th>Sub-brand</th>\n                <th>Flavour</th>\n                <th>Description</th>\n                <th>Rating</th>\n              </tr>\n            </thead>\n            <tbody>\n              {data.map((row, i) => (\n                <tr key={i}>\n                  <td>{row.category}</td>\n                  <td>{row.subcategory}</td>\n                  <td>{row.manufacturer}</td>\n                  <td>{row.brand_owner}</td>\n                  <td>{row.brand_owner}</td>\n                  <td>{row[\"sub-brand\"]}</td>\n                  <td>{row.name}</td>\n                  <td>{row.description}</td>\n                  <td>{row.rating}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </>\n  );\n}\n", "import { createClient } from \"@supabase/supabase-js\";\nimport type { Session } from \"@supabase/supabase-js\";\n\ndeclare global {\n  namespace NodeJS {\n    interface ProcessEnv {\n      SUPABASE_URL: string;\n      SUPABASE_SERVICE_KEY: string;\n    }\n  }\n}\n\nif (!process.env.SUPABASE_URL) {\n  throw new Error(\"SUPABASE_URL is required\");\n}\n\nif (!process.env.SUPABASE_SERVICE_KEY) {\n  throw new Error(\"SUPABASE_SERVICE_KEY is required\");\n}\n\n// Supabase options example (build your own :))\n// https://supabase.com/docs/reference/javascript/initializing#with-additional-parameters\n\n// const supabaseOptions = {\n//   fetch, // see \u26A0\uFE0F cloudflare\n//   schema: \"public\",\n//   persistSession: true,\n//   autoRefreshToken: true,\n//   detectSessionInUrl: true,\n//   headers: { \"x-application-name\": \"{my-site-name}\" }\n// };\n\n// \u26A0\uFE0F cloudflare needs you define fetch option : https://github.com/supabase/supabase-js#custom-fetch-implementation\n// Use Remix fetch polyfill for node (See https://remix.run/docs/en/v1/other-api/node)\n\nexport const supabaseClient = createClient(\n  process.env.SUPABASE_URL,\n  process.env.SUPABASE_SERVICE_KEY\n  // supabaseOptions\n);\n\nexport { Session };\n", "import type { ActionFunction, LoaderFunction } from \"remix\";\nimport { json } from \"@remix-run/node\";\nimport { Form, useLoaderData } from \"@remix-run/react\";\nimport { authenticator, supabaseStrategy } from \"~/auth.server\";\n\ntype LoaderData = { email?: string };\n\nexport const action: ActionFunction = async ({ request }) => {\n  await authenticator.logout(request, { redirectTo: \"/login\" });\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const session = await supabaseStrategy.checkSession(request, {\n    failureRedirect: \"/login\",\n  });\n\n  return json<LoaderData>({ email: session.user?.email });\n};\n\nexport default function Screen() {\n  const { email } = useLoaderData<LoaderData>();\n  return (\n    <>\n      <h1>Hello {email}</h1>\n\n      <Form method=\"post\">\n        <button>Log Out</button>\n      </Form>\n    </>\n  );\n}\n", "import { Authenticator, AuthorizationError } from 'remix-auth'\nimport { SupabaseStrategy } from 'remix-auth-supabase'\nimport { supabaseClient } from '~/supabase'\nimport type { Session } from '~/supabase'\nimport { createCookieSessionStorage } from '@remix-run/node'\n\nexport const sessionStorage = createCookieSessionStorage({\n  cookie: {\n    name: 'sb',\n    httpOnly: true,\n    path: '/',\n    sameSite: 'lax',\n    secrets: ['s3cr3t'], // This should be an env variable\n    secure: process.env.NODE_ENV === 'production',\n  },\n})\n\nexport const supabaseStrategy = new SupabaseStrategy(\n  {\n    supabaseClient,\n    sessionStorage,\n    sessionKey: 'sb:session',\n    sessionErrorKey: 'sb:error',\n  },\n  async({ req, supabaseClient }) => {\n    const form = await req.formData()\n    const email = form?.get('email')\n    const password = form?.get('password')\n\n    if (!email) throw new AuthorizationError('Email is required')\n    if (typeof email !== 'string')\n      throw new AuthorizationError('Email must be a string')\n\n    if (!password) throw new AuthorizationError('Password is required')\n    if (typeof password !== 'string')\n      throw new AuthorizationError('Password must be a string')\n\n    return supabaseClient.auth.api\n      .signInWithEmail(email, password)\n      .then(({ data, error }): Session => {\n        if (error || !data) {\n          throw new AuthorizationError(\n            error?.message ?? 'No user session found',\n          )\n        }\n\n        return data\n      })\n  },\n)\n\nexport const authenticator = new Authenticator<Session>(sessionStorage, {\n  sessionKey: supabaseStrategy.sessionKey,\n  sessionErrorKey: supabaseStrategy.sessionErrorKey,\n})\n\nauthenticator.use(supabaseStrategy)\n", "import { Link } from \"@remix-run/react\";\n\nexport default function Index() {\n  return (\n    <>\n      <h1>Index page</h1>\n      <ul>\n        <li>\n          <Link to=\"/private\">Go to private page</Link>\n        </li>\n        <li>\n          <Link to=\"/login\">Go to login page</Link>\n        </li>\n      </ul>\n    </>\n  );\n}\n", "import type { ActionFunction, LoaderFunction } from \"remix\";\nimport { json } from \"@remix-run/node\";\nimport { Form, useLoaderData } from \"@remix-run/react\";\nimport { authenticator, sessionStorage, supabaseStrategy } from \"~/auth.server\";\n\ntype LoaderData = {\n  error: { message: string } | null;\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  await authenticator.authenticate(\"sb\", request, {\n    successRedirect: \"/private\",\n    failureRedirect: \"/login\",\n  });\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  await supabaseStrategy.checkSession(request, {\n    successRedirect: \"/private\",\n  });\n\n  const session = await sessionStorage.getSession(\n    request.headers.get(\"Cookie\")\n  );\n\n  const error = session.get(\n    authenticator.sessionErrorKey\n  ) as LoaderData[\"error\"];\n\n  return json<LoaderData>({ error });\n};\n\nexport default function Screen() {\n  const { error } = useLoaderData<LoaderData>();\n\n  return (\n    <Form method=\"post\">\n      {error && <div>{error.message}</div>}\n      <div>\n        <label htmlFor=\"email\">Email</label>\n        <input type=\"email\" name=\"email\" id=\"email\" />\n      </div>\n\n      <div>\n        <label htmlFor=\"password\">Password</label>\n        <input type=\"password\" name=\"password\" id=\"password\" />\n      </div>\n\n      <button>Log In</button>\n    </Form>\n  );\n}\n", "export default {'version':'b4954b80','entry':{'module':'/build/entry.client-G2RYLMNZ.js','imports':['/build/_shared/chunk-I6CP2HPF.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-L7FGNT67.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-WFJNFEJT.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/login':{'id':'routes/login','parentId':'root','path':'login','index':undefined,'caseSensitive':undefined,'module':'/build/routes/login-T75DDYCF.js','imports':['/build/_shared/chunk-FR77QEKC.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/private':{'id':'routes/private','parentId':'root','path':'private','index':undefined,'caseSensitive':undefined,'module':'/build/routes/private-IBKUVVRL.js','imports':['/build/_shared/chunk-FR77QEKC.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/users/$username':{'id':'routes/users/$username','parentId':'root','path':'users/:username','index':undefined,'caseSensitive':undefined,'module':'/build/routes/users/$username-LC2NG7KM.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-B4954B80.js'};", "\nimport * as entryServer from \"/Users/villeheikkila/Developer/tasted/app/entry.server.tsx\";\nimport * as route0 from \"/Users/villeheikkila/Developer/tasted/app/root.tsx\";\nimport * as route1 from \"/Users/villeheikkila/Developer/tasted/app/routes/users/$username.tsx\";\nimport * as route2 from \"/Users/villeheikkila/Developer/tasted/app/routes/private.tsx\";\nimport * as route3 from \"/Users/villeheikkila/Developer/tasted/app/routes/index.tsx\";\nimport * as route4 from \"/Users/villeheikkila/Developer/tasted/app/routes/login.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/users/$username\": {\n      id: \"routes/users/$username\",\n      parentId: \"root\",\n      path: \"users/:username\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/private\": {\n      id: \"routes/private\",\n      parentId: \"root\",\n      path: \"private\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/login\": {\n      id: \"routes/login\",\n      parentId: \"root\",\n      path: \"login\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    }\n  };"],
  "mappings": "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",
  "names": []
}
