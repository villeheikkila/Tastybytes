# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  avatarUri: String
  createdDate: DateTime!
  createdTreats: [Treat!]!
  email: String!
  firstName: String!
  id: ID!
  isVerified: Boolean!
  lastName: String!
  reviews: [Review!]!
  role: String
  updatedDate: DateTime!
  username: String!
}

input AccountInput {
  captchaToken: String!
  email: String!
  firstName: String
  lastName: String
  password: String!
  username: String!
}

type Category {
  createdBy: Account!
  createdDate: DateTime!
  id: ID!
  isPublished: Boolean!
  name: String!
  subcategories: [Subcategory!]!
  treats: [Treat!]!
  updatedBy: Account!
  updatedDate: DateTime!
}

type Company {
  createdBy: Account!
  createdDate: DateTime!
  id: ID!
  isPublished: Boolean!
  name: String!
  treats: [Treat!]!
  updatedBy: Account!
  updatedDate: DateTime!
}

type Config {
  recaptchaSiteKey: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type ExtendedBaseEntity {
  createdBy: Account!
  createdDate: DateTime!
  id: ID!
  updatedBy: Account!
  updatedDate: DateTime!
}

type Image {
  avatarUri: String!
  filename: String!
}

input LogInInput {
  password: String!
  username: String!
}

"""Return values for the login query."""
enum LoginResult {
  INCORRECT_PASSWORD
  INEXISTENT_ACCOUNT
  SUCCESS
  UNVERIFIED_ACCOUNT
}

type Mutation {
  createAccount(account: AccountInput!): Account!
  createCategory(name: String!): Category!
  createCompany(name: String!): Company!
  createReview(review: ReviewInput!): Review!
  createSubcategory(categoryId: ID!, name: String!): Subcategory!
  createTreat(categoryId: ID!, companyId: ID!, name: String!, subcategoryId: ID!): Treat!
  deleteAccount: Boolean!
  deleteCategory(id: ID!): Boolean!
  deleteCompany(id: ID!): Boolean!
  deleteSubategory(id: ID!): Boolean!
  resetPassword(password: String!, token: String!): Boolean!
  updateAccount(account: UpdateAccountInput!): Account!
  uploadProfilePicture(picture: Upload!): Image!
  verifyAccount(token: String!): Boolean!
}

type Query {
  account(id: ID!): Account!
  accounts: [Account!]!
  categories: [Category!]!
  category(id: ID!): Category!
  companies: [Company!]!
  company(id: ID!): Company!
  configs: Config!
  currentAccount: Account!
  logIn(account: LogInInput!): LoginResult!
  logOut: Boolean!
  requestAccountVerification(username: String!): Boolean!
  requestPasswordReset(email: String!): Boolean!
  reviews(offset: Float!): [Review!]!
  searchTreats(offset: Float!, searchTerm: String!): [Treat!]!
  subcategories: [Subcategory!]!
  subcategoriesByCategory(categoryId: ID!): [Subcategory!]!
  subcategory(id: ID): Subcategory!
  treat(id: ID!): Treat!
  treats: [Treat!]!
}

type Review {
  author: Account!
  createdBy: Account!
  createdDate: DateTime!
  id: ID!
  review: String!
  score: Float!
  treat: Treat!
  updatedBy: Account!
  updatedDate: DateTime!
}

input ReviewInput {
  review: String
  score: Int!
  treatId: ID!
}

type Subcategory {
  category: Category!
  createdBy: Account!
  createdDate: DateTime!
  id: ID!
  isPublished: Boolean!
  name: String!
  treats: [Treat!]!
  updatedBy: Account!
  updatedDate: DateTime!
}

type Treat {
  category: Category!
  company: Company!
  createdBy: Account!
  createdDate: DateTime!
  id: ID!
  name: String!
  reviews: [Review!]!
  subcategory: Subcategory!
  updatedBy: Account!
  updatedDate: DateTime!
}

input UpdateAccountInput {
  email: String
  firstName: String
  lastName: String
  password: String
  username: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload
