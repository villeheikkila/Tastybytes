// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  checkin: (where?: CheckinWhereInput) => Promise<boolean>;
  company: (where?: CompanyWhereInput) => Promise<boolean>;
  friendRequest: (where?: FriendRequestWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  subCategory: (where?: SubCategoryWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  category: (where: CategoryWhereUniqueInput) => CategoryNullablePromise;
  categories: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Category>;
  categoriesConnection: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CategoryConnectionPromise;
  checkin: (where: CheckinWhereUniqueInput) => CheckinNullablePromise;
  checkins: (args?: {
    where?: CheckinWhereInput;
    orderBy?: CheckinOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Checkin>;
  checkinsConnection: (args?: {
    where?: CheckinWhereInput;
    orderBy?: CheckinOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CheckinConnectionPromise;
  company: (where: CompanyWhereUniqueInput) => CompanyNullablePromise;
  companies: (args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Company>;
  companiesConnection: (args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CompanyConnectionPromise;
  friendRequest: (
    where: FriendRequestWhereUniqueInput
  ) => FriendRequestNullablePromise;
  friendRequests: (args?: {
    where?: FriendRequestWhereInput;
    orderBy?: FriendRequestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<FriendRequest>;
  friendRequestsConnection: (args?: {
    where?: FriendRequestWhereInput;
    orderBy?: FriendRequestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FriendRequestConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductNullablePromise;
  products: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Product>;
  productsConnection: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductConnectionPromise;
  subCategory: (
    where: SubCategoryWhereUniqueInput
  ) => SubCategoryNullablePromise;
  subCategories: (args?: {
    where?: SubCategoryWhereInput;
    orderBy?: SubCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SubCategory>;
  subCategoriesConnection: (args?: {
    where?: SubCategoryWhereInput;
    orderBy?: SubCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SubCategoryConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (args: {
    data: CategoryUpdateInput;
    where: CategoryWhereUniqueInput;
  }) => CategoryPromise;
  updateManyCategories: (args: {
    data: CategoryUpdateManyMutationInput;
    where?: CategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertCategory: (args: {
    where: CategoryWhereUniqueInput;
    create: CategoryCreateInput;
    update: CategoryUpdateInput;
  }) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createCheckin: (data: CheckinCreateInput) => CheckinPromise;
  updateCheckin: (args: {
    data: CheckinUpdateInput;
    where: CheckinWhereUniqueInput;
  }) => CheckinPromise;
  updateManyCheckins: (args: {
    data: CheckinUpdateManyMutationInput;
    where?: CheckinWhereInput;
  }) => BatchPayloadPromise;
  upsertCheckin: (args: {
    where: CheckinWhereUniqueInput;
    create: CheckinCreateInput;
    update: CheckinUpdateInput;
  }) => CheckinPromise;
  deleteCheckin: (where: CheckinWhereUniqueInput) => CheckinPromise;
  deleteManyCheckins: (where?: CheckinWhereInput) => BatchPayloadPromise;
  createCompany: (data: CompanyCreateInput) => CompanyPromise;
  updateCompany: (args: {
    data: CompanyUpdateInput;
    where: CompanyWhereUniqueInput;
  }) => CompanyPromise;
  updateManyCompanies: (args: {
    data: CompanyUpdateManyMutationInput;
    where?: CompanyWhereInput;
  }) => BatchPayloadPromise;
  upsertCompany: (args: {
    where: CompanyWhereUniqueInput;
    create: CompanyCreateInput;
    update: CompanyUpdateInput;
  }) => CompanyPromise;
  deleteCompany: (where: CompanyWhereUniqueInput) => CompanyPromise;
  deleteManyCompanies: (where?: CompanyWhereInput) => BatchPayloadPromise;
  createFriendRequest: (data: FriendRequestCreateInput) => FriendRequestPromise;
  updateFriendRequest: (args: {
    data: FriendRequestUpdateInput;
    where: FriendRequestWhereUniqueInput;
  }) => FriendRequestPromise;
  updateManyFriendRequests: (args: {
    data: FriendRequestUpdateManyMutationInput;
    where?: FriendRequestWhereInput;
  }) => BatchPayloadPromise;
  upsertFriendRequest: (args: {
    where: FriendRequestWhereUniqueInput;
    create: FriendRequestCreateInput;
    update: FriendRequestUpdateInput;
  }) => FriendRequestPromise;
  deleteFriendRequest: (
    where: FriendRequestWhereUniqueInput
  ) => FriendRequestPromise;
  deleteManyFriendRequests: (
    where?: FriendRequestWhereInput
  ) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (args: {
    data: ProductUpdateInput;
    where: ProductWhereUniqueInput;
  }) => ProductPromise;
  updateManyProducts: (args: {
    data: ProductUpdateManyMutationInput;
    where?: ProductWhereInput;
  }) => BatchPayloadPromise;
  upsertProduct: (args: {
    where: ProductWhereUniqueInput;
    create: ProductCreateInput;
    update: ProductUpdateInput;
  }) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createSubCategory: (data: SubCategoryCreateInput) => SubCategoryPromise;
  updateSubCategory: (args: {
    data: SubCategoryUpdateInput;
    where: SubCategoryWhereUniqueInput;
  }) => SubCategoryPromise;
  updateManySubCategories: (args: {
    data: SubCategoryUpdateManyMutationInput;
    where?: SubCategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertSubCategory: (args: {
    where: SubCategoryWhereUniqueInput;
    create: SubCategoryCreateInput;
    update: SubCategoryUpdateInput;
  }) => SubCategoryPromise;
  deleteSubCategory: (where: SubCategoryWhereUniqueInput) => SubCategoryPromise;
  deleteManySubCategories: (
    where?: SubCategoryWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  checkin: (
    where?: CheckinSubscriptionWhereInput
  ) => CheckinSubscriptionPayloadSubscription;
  company: (
    where?: CompanySubscriptionWhereInput
  ) => CompanySubscriptionPayloadSubscription;
  friendRequest: (
    where?: FriendRequestSubscriptionWhereInput
  ) => FriendRequestSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  subCategory: (
    where?: SubCategorySubscriptionWhereInput
  ) => SubCategorySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SubCategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "avatarId_ASC"
  | "avatarId_DESC"
  | "imageId_ASC"
  | "imageId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CheckinOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "comment_ASC"
  | "comment_DESC"
  | "image_ASC"
  | "image_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "password_ASC"
  | "password_DESC"
  | "admin_ASC"
  | "admin_DESC"
  | "avatarId_ASC"
  | "avatarId_DESC"
  | "avatarColor_ASC"
  | "avatarColor_DESC"
  | "colorScheme_ASC"
  | "colorScheme_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FriendRequestOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "message_ASC"
  | "message_DESC";

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "color_ASC"
  | "color_DESC";

export type CompanyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface SubCategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  category?: Maybe<CategoryWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  products_every?: Maybe<ProductWhereInput>;
  products_some?: Maybe<ProductWhereInput>;
  products_none?: Maybe<ProductWhereInput>;
  AND?: Maybe<SubCategoryWhereInput[] | SubCategoryWhereInput>;
  OR?: Maybe<SubCategoryWhereInput[] | SubCategoryWhereInput>;
  NOT?: Maybe<SubCategoryWhereInput[] | SubCategoryWhereInput>;
}

export interface CategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  color?: Maybe<String>;
  color_not?: Maybe<String>;
  color_in?: Maybe<String[] | String>;
  color_not_in?: Maybe<String[] | String>;
  color_lt?: Maybe<String>;
  color_lte?: Maybe<String>;
  color_gt?: Maybe<String>;
  color_gte?: Maybe<String>;
  color_contains?: Maybe<String>;
  color_not_contains?: Maybe<String>;
  color_starts_with?: Maybe<String>;
  color_not_starts_with?: Maybe<String>;
  color_ends_with?: Maybe<String>;
  color_not_ends_with?: Maybe<String>;
  subCategory_every?: Maybe<SubCategoryWhereInput>;
  subCategory_some?: Maybe<SubCategoryWhereInput>;
  subCategory_none?: Maybe<SubCategoryWhereInput>;
  products_every?: Maybe<ProductWhereInput>;
  products_some?: Maybe<ProductWhereInput>;
  products_none?: Maybe<ProductWhereInput>;
  AND?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  OR?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  NOT?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
}

export interface ProductWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  company?: Maybe<CompanyWhereInput>;
  avatarId?: Maybe<String>;
  avatarId_not?: Maybe<String>;
  avatarId_in?: Maybe<String[] | String>;
  avatarId_not_in?: Maybe<String[] | String>;
  avatarId_lt?: Maybe<String>;
  avatarId_lte?: Maybe<String>;
  avatarId_gt?: Maybe<String>;
  avatarId_gte?: Maybe<String>;
  avatarId_contains?: Maybe<String>;
  avatarId_not_contains?: Maybe<String>;
  avatarId_starts_with?: Maybe<String>;
  avatarId_not_starts_with?: Maybe<String>;
  avatarId_ends_with?: Maybe<String>;
  avatarId_not_ends_with?: Maybe<String>;
  checkins_every?: Maybe<CheckinWhereInput>;
  checkins_some?: Maybe<CheckinWhereInput>;
  checkins_none?: Maybe<CheckinWhereInput>;
  category_every?: Maybe<CategoryWhereInput>;
  category_some?: Maybe<CategoryWhereInput>;
  category_none?: Maybe<CategoryWhereInput>;
  subCategory_every?: Maybe<SubCategoryWhereInput>;
  subCategory_some?: Maybe<SubCategoryWhereInput>;
  subCategory_none?: Maybe<SubCategoryWhereInput>;
  imageId?: Maybe<String>;
  imageId_not?: Maybe<String>;
  imageId_in?: Maybe<String[] | String>;
  imageId_not_in?: Maybe<String[] | String>;
  imageId_lt?: Maybe<String>;
  imageId_lte?: Maybe<String>;
  imageId_gt?: Maybe<String>;
  imageId_gte?: Maybe<String>;
  imageId_contains?: Maybe<String>;
  imageId_not_contains?: Maybe<String>;
  imageId_starts_with?: Maybe<String>;
  imageId_not_starts_with?: Maybe<String>;
  imageId_ends_with?: Maybe<String>;
  imageId_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  OR?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  NOT?: Maybe<ProductWhereInput[] | ProductWhereInput>;
}

export interface CompanyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  products_every?: Maybe<ProductWhereInput>;
  products_some?: Maybe<ProductWhereInput>;
  products_none?: Maybe<ProductWhereInput>;
  AND?: Maybe<CompanyWhereInput[] | CompanyWhereInput>;
  OR?: Maybe<CompanyWhereInput[] | CompanyWhereInput>;
  NOT?: Maybe<CompanyWhereInput[] | CompanyWhereInput>;
}

export interface CheckinWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  author?: Maybe<UserWhereInput>;
  product?: Maybe<ProductWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CheckinWhereInput[] | CheckinWhereInput>;
  OR?: Maybe<CheckinWhereInput[] | CheckinWhereInput>;
  NOT?: Maybe<CheckinWhereInput[] | CheckinWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  admin?: Maybe<Boolean>;
  admin_not?: Maybe<Boolean>;
  avatarId?: Maybe<String>;
  avatarId_not?: Maybe<String>;
  avatarId_in?: Maybe<String[] | String>;
  avatarId_not_in?: Maybe<String[] | String>;
  avatarId_lt?: Maybe<String>;
  avatarId_lte?: Maybe<String>;
  avatarId_gt?: Maybe<String>;
  avatarId_gte?: Maybe<String>;
  avatarId_contains?: Maybe<String>;
  avatarId_not_contains?: Maybe<String>;
  avatarId_starts_with?: Maybe<String>;
  avatarId_not_starts_with?: Maybe<String>;
  avatarId_ends_with?: Maybe<String>;
  avatarId_not_ends_with?: Maybe<String>;
  avatarColor?: Maybe<String>;
  avatarColor_not?: Maybe<String>;
  avatarColor_in?: Maybe<String[] | String>;
  avatarColor_not_in?: Maybe<String[] | String>;
  avatarColor_lt?: Maybe<String>;
  avatarColor_lte?: Maybe<String>;
  avatarColor_gt?: Maybe<String>;
  avatarColor_gte?: Maybe<String>;
  avatarColor_contains?: Maybe<String>;
  avatarColor_not_contains?: Maybe<String>;
  avatarColor_starts_with?: Maybe<String>;
  avatarColor_not_starts_with?: Maybe<String>;
  avatarColor_ends_with?: Maybe<String>;
  avatarColor_not_ends_with?: Maybe<String>;
  colorScheme?: Maybe<Int>;
  colorScheme_not?: Maybe<Int>;
  colorScheme_in?: Maybe<Int[] | Int>;
  colorScheme_not_in?: Maybe<Int[] | Int>;
  colorScheme_lt?: Maybe<Int>;
  colorScheme_lte?: Maybe<Int>;
  colorScheme_gt?: Maybe<Int>;
  colorScheme_gte?: Maybe<Int>;
  checkins_every?: Maybe<CheckinWhereInput>;
  checkins_some?: Maybe<CheckinWhereInput>;
  checkins_none?: Maybe<CheckinWhereInput>;
  friends_every?: Maybe<UserWhereInput>;
  friends_some?: Maybe<UserWhereInput>;
  friends_none?: Maybe<UserWhereInput>;
  friendRequest_every?: Maybe<FriendRequestWhereInput>;
  friendRequest_some?: Maybe<FriendRequestWhereInput>;
  friendRequest_none?: Maybe<FriendRequestWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface FriendRequestWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sender_every?: Maybe<UserWhereInput>;
  sender_some?: Maybe<UserWhereInput>;
  sender_none?: Maybe<UserWhereInput>;
  receiver_every?: Maybe<UserWhereInput>;
  receiver_some?: Maybe<UserWhereInput>;
  receiver_none?: Maybe<UserWhereInput>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  AND?: Maybe<FriendRequestWhereInput[] | FriendRequestWhereInput>;
  OR?: Maybe<FriendRequestWhereInput[] | FriendRequestWhereInput>;
  NOT?: Maybe<FriendRequestWhereInput[] | FriendRequestWhereInput>;
}

export type CheckinWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type CompanyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export type FriendRequestWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProductWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SubCategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface CategoryCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  color?: Maybe<String>;
  subCategory?: Maybe<SubCategoryCreateManyWithoutCategoryInput>;
  products?: Maybe<ProductCreateManyWithoutCategoryInput>;
}

export interface SubCategoryCreateManyWithoutCategoryInput {
  create?: Maybe<
    | SubCategoryCreateWithoutCategoryInput[]
    | SubCategoryCreateWithoutCategoryInput
  >;
  connect?: Maybe<SubCategoryWhereUniqueInput[] | SubCategoryWhereUniqueInput>;
}

export interface SubCategoryCreateWithoutCategoryInput {
  id?: Maybe<ID_Input>;
  name: String;
  products?: Maybe<ProductCreateManyWithoutSubCategoryInput>;
}

export interface ProductCreateManyWithoutSubCategoryInput {
  create?: Maybe<
    | ProductCreateWithoutSubCategoryInput[]
    | ProductCreateWithoutSubCategoryInput
  >;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
}

export interface ProductCreateWithoutSubCategoryInput {
  id?: Maybe<ID_Input>;
  name: String;
  company: CompanyCreateOneWithoutProductsInput;
  avatarId?: Maybe<String>;
  checkins?: Maybe<CheckinCreateManyWithoutProductInput>;
  category?: Maybe<CategoryCreateManyWithoutProductsInput>;
  imageId?: Maybe<String>;
}

export interface CompanyCreateOneWithoutProductsInput {
  create?: Maybe<CompanyCreateWithoutProductsInput>;
  connect?: Maybe<CompanyWhereUniqueInput>;
}

export interface CompanyCreateWithoutProductsInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface CheckinCreateManyWithoutProductInput {
  create?: Maybe<
    CheckinCreateWithoutProductInput[] | CheckinCreateWithoutProductInput
  >;
  connect?: Maybe<CheckinWhereUniqueInput[] | CheckinWhereUniqueInput>;
}

export interface CheckinCreateWithoutProductInput {
  id?: Maybe<ID_Input>;
  rating: Int;
  comment?: Maybe<String>;
  image?: Maybe<String>;
  author: UserCreateOneWithoutCheckinsInput;
}

export interface UserCreateOneWithoutCheckinsInput {
  create?: Maybe<UserCreateWithoutCheckinsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCheckinsInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  firstName: String;
  lastName: String;
  password: String;
  admin: Boolean;
  avatarId?: Maybe<String>;
  avatarColor?: Maybe<String>;
  colorScheme?: Maybe<Int>;
  friends?: Maybe<UserCreateManyInput>;
  friendRequest?: Maybe<FriendRequestCreateManyWithoutReceiverInput>;
}

export interface UserCreateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  firstName: String;
  lastName: String;
  password: String;
  admin: Boolean;
  avatarId?: Maybe<String>;
  avatarColor?: Maybe<String>;
  colorScheme?: Maybe<Int>;
  checkins?: Maybe<CheckinCreateManyWithoutAuthorInput>;
  friends?: Maybe<UserCreateManyInput>;
  friendRequest?: Maybe<FriendRequestCreateManyWithoutReceiverInput>;
}

export interface CheckinCreateManyWithoutAuthorInput {
  create?: Maybe<
    CheckinCreateWithoutAuthorInput[] | CheckinCreateWithoutAuthorInput
  >;
  connect?: Maybe<CheckinWhereUniqueInput[] | CheckinWhereUniqueInput>;
}

export interface CheckinCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  rating: Int;
  comment?: Maybe<String>;
  image?: Maybe<String>;
  product: ProductCreateOneWithoutCheckinsInput;
}

export interface ProductCreateOneWithoutCheckinsInput {
  create?: Maybe<ProductCreateWithoutCheckinsInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductCreateWithoutCheckinsInput {
  id?: Maybe<ID_Input>;
  name: String;
  company: CompanyCreateOneWithoutProductsInput;
  avatarId?: Maybe<String>;
  category?: Maybe<CategoryCreateManyWithoutProductsInput>;
  subCategory?: Maybe<SubCategoryCreateManyWithoutProductsInput>;
  imageId?: Maybe<String>;
}

export interface CategoryCreateManyWithoutProductsInput {
  create?: Maybe<
    CategoryCreateWithoutProductsInput[] | CategoryCreateWithoutProductsInput
  >;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
}

export interface CategoryCreateWithoutProductsInput {
  id?: Maybe<ID_Input>;
  name: String;
  color?: Maybe<String>;
  subCategory?: Maybe<SubCategoryCreateManyWithoutCategoryInput>;
}

export interface SubCategoryCreateManyWithoutProductsInput {
  create?: Maybe<
    | SubCategoryCreateWithoutProductsInput[]
    | SubCategoryCreateWithoutProductsInput
  >;
  connect?: Maybe<SubCategoryWhereUniqueInput[] | SubCategoryWhereUniqueInput>;
}

export interface SubCategoryCreateWithoutProductsInput {
  id?: Maybe<ID_Input>;
  category: CategoryCreateOneWithoutSubCategoryInput;
  name: String;
}

export interface CategoryCreateOneWithoutSubCategoryInput {
  create?: Maybe<CategoryCreateWithoutSubCategoryInput>;
  connect?: Maybe<CategoryWhereUniqueInput>;
}

export interface CategoryCreateWithoutSubCategoryInput {
  id?: Maybe<ID_Input>;
  name: String;
  color?: Maybe<String>;
  products?: Maybe<ProductCreateManyWithoutCategoryInput>;
}

export interface ProductCreateManyWithoutCategoryInput {
  create?: Maybe<
    ProductCreateWithoutCategoryInput[] | ProductCreateWithoutCategoryInput
  >;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
}

export interface ProductCreateWithoutCategoryInput {
  id?: Maybe<ID_Input>;
  name: String;
  company: CompanyCreateOneWithoutProductsInput;
  avatarId?: Maybe<String>;
  checkins?: Maybe<CheckinCreateManyWithoutProductInput>;
  subCategory?: Maybe<SubCategoryCreateManyWithoutProductsInput>;
  imageId?: Maybe<String>;
}

export interface FriendRequestCreateManyWithoutReceiverInput {
  create?: Maybe<
    | FriendRequestCreateWithoutReceiverInput[]
    | FriendRequestCreateWithoutReceiverInput
  >;
  connect?: Maybe<
    FriendRequestWhereUniqueInput[] | FriendRequestWhereUniqueInput
  >;
}

export interface FriendRequestCreateWithoutReceiverInput {
  id?: Maybe<ID_Input>;
  sender?: Maybe<UserCreateManyInput>;
  message?: Maybe<String>;
}

export interface CategoryUpdateInput {
  name?: Maybe<String>;
  color?: Maybe<String>;
  subCategory?: Maybe<SubCategoryUpdateManyWithoutCategoryInput>;
  products?: Maybe<ProductUpdateManyWithoutCategoryInput>;
}

export interface SubCategoryUpdateManyWithoutCategoryInput {
  create?: Maybe<
    | SubCategoryCreateWithoutCategoryInput[]
    | SubCategoryCreateWithoutCategoryInput
  >;
  delete?: Maybe<SubCategoryWhereUniqueInput[] | SubCategoryWhereUniqueInput>;
  connect?: Maybe<SubCategoryWhereUniqueInput[] | SubCategoryWhereUniqueInput>;
  set?: Maybe<SubCategoryWhereUniqueInput[] | SubCategoryWhereUniqueInput>;
  disconnect?: Maybe<
    SubCategoryWhereUniqueInput[] | SubCategoryWhereUniqueInput
  >;
  update?: Maybe<
    | SubCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    | SubCategoryUpdateWithWhereUniqueWithoutCategoryInput
  >;
  upsert?: Maybe<
    | SubCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    | SubCategoryUpsertWithWhereUniqueWithoutCategoryInput
  >;
  deleteMany?: Maybe<
    SubCategoryScalarWhereInput[] | SubCategoryScalarWhereInput
  >;
  updateMany?: Maybe<
    | SubCategoryUpdateManyWithWhereNestedInput[]
    | SubCategoryUpdateManyWithWhereNestedInput
  >;
}

export interface SubCategoryUpdateWithWhereUniqueWithoutCategoryInput {
  where: SubCategoryWhereUniqueInput;
  data: SubCategoryUpdateWithoutCategoryDataInput;
}

export interface SubCategoryUpdateWithoutCategoryDataInput {
  name?: Maybe<String>;
  products?: Maybe<ProductUpdateManyWithoutSubCategoryInput>;
}

export interface ProductUpdateManyWithoutSubCategoryInput {
  create?: Maybe<
    | ProductCreateWithoutSubCategoryInput[]
    | ProductCreateWithoutSubCategoryInput
  >;
  delete?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  set?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  disconnect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  update?: Maybe<
    | ProductUpdateWithWhereUniqueWithoutSubCategoryInput[]
    | ProductUpdateWithWhereUniqueWithoutSubCategoryInput
  >;
  upsert?: Maybe<
    | ProductUpsertWithWhereUniqueWithoutSubCategoryInput[]
    | ProductUpsertWithWhereUniqueWithoutSubCategoryInput
  >;
  deleteMany?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  updateMany?: Maybe<
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput
  >;
}

export interface ProductUpdateWithWhereUniqueWithoutSubCategoryInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutSubCategoryDataInput;
}

export interface ProductUpdateWithoutSubCategoryDataInput {
  name?: Maybe<String>;
  company?: Maybe<CompanyUpdateOneRequiredWithoutProductsInput>;
  avatarId?: Maybe<String>;
  checkins?: Maybe<CheckinUpdateManyWithoutProductInput>;
  category?: Maybe<CategoryUpdateManyWithoutProductsInput>;
  imageId?: Maybe<String>;
}

export interface CompanyUpdateOneRequiredWithoutProductsInput {
  create?: Maybe<CompanyCreateWithoutProductsInput>;
  update?: Maybe<CompanyUpdateWithoutProductsDataInput>;
  upsert?: Maybe<CompanyUpsertWithoutProductsInput>;
  connect?: Maybe<CompanyWhereUniqueInput>;
}

export interface CompanyUpdateWithoutProductsDataInput {
  name?: Maybe<String>;
}

export interface CompanyUpsertWithoutProductsInput {
  update: CompanyUpdateWithoutProductsDataInput;
  create: CompanyCreateWithoutProductsInput;
}

export interface CheckinUpdateManyWithoutProductInput {
  create?: Maybe<
    CheckinCreateWithoutProductInput[] | CheckinCreateWithoutProductInput
  >;
  delete?: Maybe<CheckinWhereUniqueInput[] | CheckinWhereUniqueInput>;
  connect?: Maybe<CheckinWhereUniqueInput[] | CheckinWhereUniqueInput>;
  set?: Maybe<CheckinWhereUniqueInput[] | CheckinWhereUniqueInput>;
  disconnect?: Maybe<CheckinWhereUniqueInput[] | CheckinWhereUniqueInput>;
  update?: Maybe<
    | CheckinUpdateWithWhereUniqueWithoutProductInput[]
    | CheckinUpdateWithWhereUniqueWithoutProductInput
  >;
  upsert?: Maybe<
    | CheckinUpsertWithWhereUniqueWithoutProductInput[]
    | CheckinUpsertWithWhereUniqueWithoutProductInput
  >;
  deleteMany?: Maybe<CheckinScalarWhereInput[] | CheckinScalarWhereInput>;
  updateMany?: Maybe<
    | CheckinUpdateManyWithWhereNestedInput[]
    | CheckinUpdateManyWithWhereNestedInput
  >;
}

export interface CheckinUpdateWithWhereUniqueWithoutProductInput {
  where: CheckinWhereUniqueInput;
  data: CheckinUpdateWithoutProductDataInput;
}

export interface CheckinUpdateWithoutProductDataInput {
  rating?: Maybe<Int>;
  comment?: Maybe<String>;
  image?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutCheckinsInput>;
}

export interface UserUpdateOneRequiredWithoutCheckinsInput {
  create?: Maybe<UserCreateWithoutCheckinsInput>;
  update?: Maybe<UserUpdateWithoutCheckinsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCheckinsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCheckinsDataInput {
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  admin?: Maybe<Boolean>;
  avatarId?: Maybe<String>;
  avatarColor?: Maybe<String>;
  colorScheme?: Maybe<Int>;
  friends?: Maybe<UserUpdateManyInput>;
  friendRequest?: Maybe<FriendRequestUpdateManyWithoutReceiverInput>;
}

export interface UserUpdateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  admin?: Maybe<Boolean>;
  avatarId?: Maybe<String>;
  avatarColor?: Maybe<String>;
  colorScheme?: Maybe<Int>;
  checkins?: Maybe<CheckinUpdateManyWithoutAuthorInput>;
  friends?: Maybe<UserUpdateManyInput>;
  friendRequest?: Maybe<FriendRequestUpdateManyWithoutReceiverInput>;
}

export interface CheckinUpdateManyWithoutAuthorInput {
  create?: Maybe<
    CheckinCreateWithoutAuthorInput[] | CheckinCreateWithoutAuthorInput
  >;
  delete?: Maybe<CheckinWhereUniqueInput[] | CheckinWhereUniqueInput>;
  connect?: Maybe<CheckinWhereUniqueInput[] | CheckinWhereUniqueInput>;
  set?: Maybe<CheckinWhereUniqueInput[] | CheckinWhereUniqueInput>;
  disconnect?: Maybe<CheckinWhereUniqueInput[] | CheckinWhereUniqueInput>;
  update?: Maybe<
    | CheckinUpdateWithWhereUniqueWithoutAuthorInput[]
    | CheckinUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | CheckinUpsertWithWhereUniqueWithoutAuthorInput[]
    | CheckinUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<CheckinScalarWhereInput[] | CheckinScalarWhereInput>;
  updateMany?: Maybe<
    | CheckinUpdateManyWithWhereNestedInput[]
    | CheckinUpdateManyWithWhereNestedInput
  >;
}

export interface CheckinUpdateWithWhereUniqueWithoutAuthorInput {
  where: CheckinWhereUniqueInput;
  data: CheckinUpdateWithoutAuthorDataInput;
}

export interface CheckinUpdateWithoutAuthorDataInput {
  rating?: Maybe<Int>;
  comment?: Maybe<String>;
  image?: Maybe<String>;
  product?: Maybe<ProductUpdateOneRequiredWithoutCheckinsInput>;
}

export interface ProductUpdateOneRequiredWithoutCheckinsInput {
  create?: Maybe<ProductCreateWithoutCheckinsInput>;
  update?: Maybe<ProductUpdateWithoutCheckinsDataInput>;
  upsert?: Maybe<ProductUpsertWithoutCheckinsInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductUpdateWithoutCheckinsDataInput {
  name?: Maybe<String>;
  company?: Maybe<CompanyUpdateOneRequiredWithoutProductsInput>;
  avatarId?: Maybe<String>;
  category?: Maybe<CategoryUpdateManyWithoutProductsInput>;
  subCategory?: Maybe<SubCategoryUpdateManyWithoutProductsInput>;
  imageId?: Maybe<String>;
}

export interface CategoryUpdateManyWithoutProductsInput {
  create?: Maybe<
    CategoryCreateWithoutProductsInput[] | CategoryCreateWithoutProductsInput
  >;
  delete?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  set?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  disconnect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  update?: Maybe<
    | CategoryUpdateWithWhereUniqueWithoutProductsInput[]
    | CategoryUpdateWithWhereUniqueWithoutProductsInput
  >;
  upsert?: Maybe<
    | CategoryUpsertWithWhereUniqueWithoutProductsInput[]
    | CategoryUpsertWithWhereUniqueWithoutProductsInput
  >;
  deleteMany?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  updateMany?: Maybe<
    | CategoryUpdateManyWithWhereNestedInput[]
    | CategoryUpdateManyWithWhereNestedInput
  >;
}

export interface CategoryUpdateWithWhereUniqueWithoutProductsInput {
  where: CategoryWhereUniqueInput;
  data: CategoryUpdateWithoutProductsDataInput;
}

export interface CategoryUpdateWithoutProductsDataInput {
  name?: Maybe<String>;
  color?: Maybe<String>;
  subCategory?: Maybe<SubCategoryUpdateManyWithoutCategoryInput>;
}

export interface CategoryUpsertWithWhereUniqueWithoutProductsInput {
  where: CategoryWhereUniqueInput;
  update: CategoryUpdateWithoutProductsDataInput;
  create: CategoryCreateWithoutProductsInput;
}

export interface CategoryScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  color?: Maybe<String>;
  color_not?: Maybe<String>;
  color_in?: Maybe<String[] | String>;
  color_not_in?: Maybe<String[] | String>;
  color_lt?: Maybe<String>;
  color_lte?: Maybe<String>;
  color_gt?: Maybe<String>;
  color_gte?: Maybe<String>;
  color_contains?: Maybe<String>;
  color_not_contains?: Maybe<String>;
  color_starts_with?: Maybe<String>;
  color_not_starts_with?: Maybe<String>;
  color_ends_with?: Maybe<String>;
  color_not_ends_with?: Maybe<String>;
  AND?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  OR?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  NOT?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
}

export interface CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput;
  data: CategoryUpdateManyDataInput;
}

export interface CategoryUpdateManyDataInput {
  name?: Maybe<String>;
  color?: Maybe<String>;
}

export interface SubCategoryUpdateManyWithoutProductsInput {
  create?: Maybe<
    | SubCategoryCreateWithoutProductsInput[]
    | SubCategoryCreateWithoutProductsInput
  >;
  delete?: Maybe<SubCategoryWhereUniqueInput[] | SubCategoryWhereUniqueInput>;
  connect?: Maybe<SubCategoryWhereUniqueInput[] | SubCategoryWhereUniqueInput>;
  set?: Maybe<SubCategoryWhereUniqueInput[] | SubCategoryWhereUniqueInput>;
  disconnect?: Maybe<
    SubCategoryWhereUniqueInput[] | SubCategoryWhereUniqueInput
  >;
  update?: Maybe<
    | SubCategoryUpdateWithWhereUniqueWithoutProductsInput[]
    | SubCategoryUpdateWithWhereUniqueWithoutProductsInput
  >;
  upsert?: Maybe<
    | SubCategoryUpsertWithWhereUniqueWithoutProductsInput[]
    | SubCategoryUpsertWithWhereUniqueWithoutProductsInput
  >;
  deleteMany?: Maybe<
    SubCategoryScalarWhereInput[] | SubCategoryScalarWhereInput
  >;
  updateMany?: Maybe<
    | SubCategoryUpdateManyWithWhereNestedInput[]
    | SubCategoryUpdateManyWithWhereNestedInput
  >;
}

export interface SubCategoryUpdateWithWhereUniqueWithoutProductsInput {
  where: SubCategoryWhereUniqueInput;
  data: SubCategoryUpdateWithoutProductsDataInput;
}

export interface SubCategoryUpdateWithoutProductsDataInput {
  category?: Maybe<CategoryUpdateOneRequiredWithoutSubCategoryInput>;
  name?: Maybe<String>;
}

export interface CategoryUpdateOneRequiredWithoutSubCategoryInput {
  create?: Maybe<CategoryCreateWithoutSubCategoryInput>;
  update?: Maybe<CategoryUpdateWithoutSubCategoryDataInput>;
  upsert?: Maybe<CategoryUpsertWithoutSubCategoryInput>;
  connect?: Maybe<CategoryWhereUniqueInput>;
}

export interface CategoryUpdateWithoutSubCategoryDataInput {
  name?: Maybe<String>;
  color?: Maybe<String>;
  products?: Maybe<ProductUpdateManyWithoutCategoryInput>;
}

export interface ProductUpdateManyWithoutCategoryInput {
  create?: Maybe<
    ProductCreateWithoutCategoryInput[] | ProductCreateWithoutCategoryInput
  >;
  delete?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  set?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  disconnect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  update?: Maybe<
    | ProductUpdateWithWhereUniqueWithoutCategoryInput[]
    | ProductUpdateWithWhereUniqueWithoutCategoryInput
  >;
  upsert?: Maybe<
    | ProductUpsertWithWhereUniqueWithoutCategoryInput[]
    | ProductUpsertWithWhereUniqueWithoutCategoryInput
  >;
  deleteMany?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  updateMany?: Maybe<
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput
  >;
}

export interface ProductUpdateWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutCategoryDataInput;
}

export interface ProductUpdateWithoutCategoryDataInput {
  name?: Maybe<String>;
  company?: Maybe<CompanyUpdateOneRequiredWithoutProductsInput>;
  avatarId?: Maybe<String>;
  checkins?: Maybe<CheckinUpdateManyWithoutProductInput>;
  subCategory?: Maybe<SubCategoryUpdateManyWithoutProductsInput>;
  imageId?: Maybe<String>;
}

export interface ProductUpsertWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutCategoryDataInput;
  create: ProductCreateWithoutCategoryInput;
}

export interface ProductScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  avatarId?: Maybe<String>;
  avatarId_not?: Maybe<String>;
  avatarId_in?: Maybe<String[] | String>;
  avatarId_not_in?: Maybe<String[] | String>;
  avatarId_lt?: Maybe<String>;
  avatarId_lte?: Maybe<String>;
  avatarId_gt?: Maybe<String>;
  avatarId_gte?: Maybe<String>;
  avatarId_contains?: Maybe<String>;
  avatarId_not_contains?: Maybe<String>;
  avatarId_starts_with?: Maybe<String>;
  avatarId_not_starts_with?: Maybe<String>;
  avatarId_ends_with?: Maybe<String>;
  avatarId_not_ends_with?: Maybe<String>;
  imageId?: Maybe<String>;
  imageId_not?: Maybe<String>;
  imageId_in?: Maybe<String[] | String>;
  imageId_not_in?: Maybe<String[] | String>;
  imageId_lt?: Maybe<String>;
  imageId_lte?: Maybe<String>;
  imageId_gt?: Maybe<String>;
  imageId_gte?: Maybe<String>;
  imageId_contains?: Maybe<String>;
  imageId_not_contains?: Maybe<String>;
  imageId_starts_with?: Maybe<String>;
  imageId_not_starts_with?: Maybe<String>;
  imageId_ends_with?: Maybe<String>;
  imageId_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  OR?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  NOT?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
}

export interface ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput;
  data: ProductUpdateManyDataInput;
}

export interface ProductUpdateManyDataInput {
  name?: Maybe<String>;
  avatarId?: Maybe<String>;
  imageId?: Maybe<String>;
}

export interface CategoryUpsertWithoutSubCategoryInput {
  update: CategoryUpdateWithoutSubCategoryDataInput;
  create: CategoryCreateWithoutSubCategoryInput;
}

export interface SubCategoryUpsertWithWhereUniqueWithoutProductsInput {
  where: SubCategoryWhereUniqueInput;
  update: SubCategoryUpdateWithoutProductsDataInput;
  create: SubCategoryCreateWithoutProductsInput;
}

export interface SubCategoryScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<SubCategoryScalarWhereInput[] | SubCategoryScalarWhereInput>;
  OR?: Maybe<SubCategoryScalarWhereInput[] | SubCategoryScalarWhereInput>;
  NOT?: Maybe<SubCategoryScalarWhereInput[] | SubCategoryScalarWhereInput>;
}

export interface SubCategoryUpdateManyWithWhereNestedInput {
  where: SubCategoryScalarWhereInput;
  data: SubCategoryUpdateManyDataInput;
}

export interface SubCategoryUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface ProductUpsertWithoutCheckinsInput {
  update: ProductUpdateWithoutCheckinsDataInput;
  create: ProductCreateWithoutCheckinsInput;
}

export interface CheckinUpsertWithWhereUniqueWithoutAuthorInput {
  where: CheckinWhereUniqueInput;
  update: CheckinUpdateWithoutAuthorDataInput;
  create: CheckinCreateWithoutAuthorInput;
}

export interface CheckinScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CheckinScalarWhereInput[] | CheckinScalarWhereInput>;
  OR?: Maybe<CheckinScalarWhereInput[] | CheckinScalarWhereInput>;
  NOT?: Maybe<CheckinScalarWhereInput[] | CheckinScalarWhereInput>;
}

export interface CheckinUpdateManyWithWhereNestedInput {
  where: CheckinScalarWhereInput;
  data: CheckinUpdateManyDataInput;
}

export interface CheckinUpdateManyDataInput {
  rating?: Maybe<Int>;
  comment?: Maybe<String>;
  image?: Maybe<String>;
}

export interface FriendRequestUpdateManyWithoutReceiverInput {
  create?: Maybe<
    | FriendRequestCreateWithoutReceiverInput[]
    | FriendRequestCreateWithoutReceiverInput
  >;
  delete?: Maybe<
    FriendRequestWhereUniqueInput[] | FriendRequestWhereUniqueInput
  >;
  connect?: Maybe<
    FriendRequestWhereUniqueInput[] | FriendRequestWhereUniqueInput
  >;
  set?: Maybe<FriendRequestWhereUniqueInput[] | FriendRequestWhereUniqueInput>;
  disconnect?: Maybe<
    FriendRequestWhereUniqueInput[] | FriendRequestWhereUniqueInput
  >;
  update?: Maybe<
    | FriendRequestUpdateWithWhereUniqueWithoutReceiverInput[]
    | FriendRequestUpdateWithWhereUniqueWithoutReceiverInput
  >;
  upsert?: Maybe<
    | FriendRequestUpsertWithWhereUniqueWithoutReceiverInput[]
    | FriendRequestUpsertWithWhereUniqueWithoutReceiverInput
  >;
  deleteMany?: Maybe<
    FriendRequestScalarWhereInput[] | FriendRequestScalarWhereInput
  >;
  updateMany?: Maybe<
    | FriendRequestUpdateManyWithWhereNestedInput[]
    | FriendRequestUpdateManyWithWhereNestedInput
  >;
}

export interface FriendRequestUpdateWithWhereUniqueWithoutReceiverInput {
  where: FriendRequestWhereUniqueInput;
  data: FriendRequestUpdateWithoutReceiverDataInput;
}

export interface FriendRequestUpdateWithoutReceiverDataInput {
  sender?: Maybe<UserUpdateManyInput>;
  message?: Maybe<String>;
}

export interface FriendRequestUpsertWithWhereUniqueWithoutReceiverInput {
  where: FriendRequestWhereUniqueInput;
  update: FriendRequestUpdateWithoutReceiverDataInput;
  create: FriendRequestCreateWithoutReceiverInput;
}

export interface FriendRequestScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  AND?: Maybe<FriendRequestScalarWhereInput[] | FriendRequestScalarWhereInput>;
  OR?: Maybe<FriendRequestScalarWhereInput[] | FriendRequestScalarWhereInput>;
  NOT?: Maybe<FriendRequestScalarWhereInput[] | FriendRequestScalarWhereInput>;
}

export interface FriendRequestUpdateManyWithWhereNestedInput {
  where: FriendRequestScalarWhereInput;
  data: FriendRequestUpdateManyDataInput;
}

export interface FriendRequestUpdateManyDataInput {
  message?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  admin?: Maybe<Boolean>;
  admin_not?: Maybe<Boolean>;
  avatarId?: Maybe<String>;
  avatarId_not?: Maybe<String>;
  avatarId_in?: Maybe<String[] | String>;
  avatarId_not_in?: Maybe<String[] | String>;
  avatarId_lt?: Maybe<String>;
  avatarId_lte?: Maybe<String>;
  avatarId_gt?: Maybe<String>;
  avatarId_gte?: Maybe<String>;
  avatarId_contains?: Maybe<String>;
  avatarId_not_contains?: Maybe<String>;
  avatarId_starts_with?: Maybe<String>;
  avatarId_not_starts_with?: Maybe<String>;
  avatarId_ends_with?: Maybe<String>;
  avatarId_not_ends_with?: Maybe<String>;
  avatarColor?: Maybe<String>;
  avatarColor_not?: Maybe<String>;
  avatarColor_in?: Maybe<String[] | String>;
  avatarColor_not_in?: Maybe<String[] | String>;
  avatarColor_lt?: Maybe<String>;
  avatarColor_lte?: Maybe<String>;
  avatarColor_gt?: Maybe<String>;
  avatarColor_gte?: Maybe<String>;
  avatarColor_contains?: Maybe<String>;
  avatarColor_not_contains?: Maybe<String>;
  avatarColor_starts_with?: Maybe<String>;
  avatarColor_not_starts_with?: Maybe<String>;
  avatarColor_ends_with?: Maybe<String>;
  avatarColor_not_ends_with?: Maybe<String>;
  colorScheme?: Maybe<Int>;
  colorScheme_not?: Maybe<Int>;
  colorScheme_in?: Maybe<Int[] | Int>;
  colorScheme_not_in?: Maybe<Int[] | Int>;
  colorScheme_lt?: Maybe<Int>;
  colorScheme_lte?: Maybe<Int>;
  colorScheme_gt?: Maybe<Int>;
  colorScheme_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  admin?: Maybe<Boolean>;
  avatarId?: Maybe<String>;
  avatarColor?: Maybe<String>;
  colorScheme?: Maybe<Int>;
}

export interface UserUpsertWithoutCheckinsInput {
  update: UserUpdateWithoutCheckinsDataInput;
  create: UserCreateWithoutCheckinsInput;
}

export interface CheckinUpsertWithWhereUniqueWithoutProductInput {
  where: CheckinWhereUniqueInput;
  update: CheckinUpdateWithoutProductDataInput;
  create: CheckinCreateWithoutProductInput;
}

export interface ProductUpsertWithWhereUniqueWithoutSubCategoryInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutSubCategoryDataInput;
  create: ProductCreateWithoutSubCategoryInput;
}

export interface SubCategoryUpsertWithWhereUniqueWithoutCategoryInput {
  where: SubCategoryWhereUniqueInput;
  update: SubCategoryUpdateWithoutCategoryDataInput;
  create: SubCategoryCreateWithoutCategoryInput;
}

export interface CategoryUpdateManyMutationInput {
  name?: Maybe<String>;
  color?: Maybe<String>;
}

export interface CheckinCreateInput {
  id?: Maybe<ID_Input>;
  rating: Int;
  comment?: Maybe<String>;
  image?: Maybe<String>;
  author: UserCreateOneWithoutCheckinsInput;
  product: ProductCreateOneWithoutCheckinsInput;
}

export interface CheckinUpdateInput {
  rating?: Maybe<Int>;
  comment?: Maybe<String>;
  image?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutCheckinsInput>;
  product?: Maybe<ProductUpdateOneRequiredWithoutCheckinsInput>;
}

export interface CheckinUpdateManyMutationInput {
  rating?: Maybe<Int>;
  comment?: Maybe<String>;
  image?: Maybe<String>;
}

export interface CompanyCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  products?: Maybe<ProductCreateManyWithoutCompanyInput>;
}

export interface ProductCreateManyWithoutCompanyInput {
  create?: Maybe<
    ProductCreateWithoutCompanyInput[] | ProductCreateWithoutCompanyInput
  >;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
}

export interface ProductCreateWithoutCompanyInput {
  id?: Maybe<ID_Input>;
  name: String;
  avatarId?: Maybe<String>;
  checkins?: Maybe<CheckinCreateManyWithoutProductInput>;
  category?: Maybe<CategoryCreateManyWithoutProductsInput>;
  subCategory?: Maybe<SubCategoryCreateManyWithoutProductsInput>;
  imageId?: Maybe<String>;
}

export interface CompanyUpdateInput {
  name?: Maybe<String>;
  products?: Maybe<ProductUpdateManyWithoutCompanyInput>;
}

export interface ProductUpdateManyWithoutCompanyInput {
  create?: Maybe<
    ProductCreateWithoutCompanyInput[] | ProductCreateWithoutCompanyInput
  >;
  delete?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  set?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  disconnect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  update?: Maybe<
    | ProductUpdateWithWhereUniqueWithoutCompanyInput[]
    | ProductUpdateWithWhereUniqueWithoutCompanyInput
  >;
  upsert?: Maybe<
    | ProductUpsertWithWhereUniqueWithoutCompanyInput[]
    | ProductUpsertWithWhereUniqueWithoutCompanyInput
  >;
  deleteMany?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  updateMany?: Maybe<
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput
  >;
}

export interface ProductUpdateWithWhereUniqueWithoutCompanyInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutCompanyDataInput;
}

export interface ProductUpdateWithoutCompanyDataInput {
  name?: Maybe<String>;
  avatarId?: Maybe<String>;
  checkins?: Maybe<CheckinUpdateManyWithoutProductInput>;
  category?: Maybe<CategoryUpdateManyWithoutProductsInput>;
  subCategory?: Maybe<SubCategoryUpdateManyWithoutProductsInput>;
  imageId?: Maybe<String>;
}

export interface ProductUpsertWithWhereUniqueWithoutCompanyInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutCompanyDataInput;
  create: ProductCreateWithoutCompanyInput;
}

export interface CompanyUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface FriendRequestCreateInput {
  id?: Maybe<ID_Input>;
  sender?: Maybe<UserCreateManyInput>;
  receiver?: Maybe<UserCreateManyWithoutFriendRequestInput>;
  message?: Maybe<String>;
}

export interface UserCreateManyWithoutFriendRequestInput {
  create?: Maybe<
    UserCreateWithoutFriendRequestInput[] | UserCreateWithoutFriendRequestInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutFriendRequestInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  firstName: String;
  lastName: String;
  password: String;
  admin: Boolean;
  avatarId?: Maybe<String>;
  avatarColor?: Maybe<String>;
  colorScheme?: Maybe<Int>;
  checkins?: Maybe<CheckinCreateManyWithoutAuthorInput>;
  friends?: Maybe<UserCreateManyInput>;
}

export interface FriendRequestUpdateInput {
  sender?: Maybe<UserUpdateManyInput>;
  receiver?: Maybe<UserUpdateManyWithoutFriendRequestInput>;
  message?: Maybe<String>;
}

export interface UserUpdateManyWithoutFriendRequestInput {
  create?: Maybe<
    UserCreateWithoutFriendRequestInput[] | UserCreateWithoutFriendRequestInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFriendRequestInput[]
    | UserUpdateWithWhereUniqueWithoutFriendRequestInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFriendRequestInput[]
    | UserUpsertWithWhereUniqueWithoutFriendRequestInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutFriendRequestInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFriendRequestDataInput;
}

export interface UserUpdateWithoutFriendRequestDataInput {
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  admin?: Maybe<Boolean>;
  avatarId?: Maybe<String>;
  avatarColor?: Maybe<String>;
  colorScheme?: Maybe<Int>;
  checkins?: Maybe<CheckinUpdateManyWithoutAuthorInput>;
  friends?: Maybe<UserUpdateManyInput>;
}

export interface UserUpsertWithWhereUniqueWithoutFriendRequestInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFriendRequestDataInput;
  create: UserCreateWithoutFriendRequestInput;
}

export interface FriendRequestUpdateManyMutationInput {
  message?: Maybe<String>;
}

export interface ProductCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  company: CompanyCreateOneWithoutProductsInput;
  avatarId?: Maybe<String>;
  checkins?: Maybe<CheckinCreateManyWithoutProductInput>;
  category?: Maybe<CategoryCreateManyWithoutProductsInput>;
  subCategory?: Maybe<SubCategoryCreateManyWithoutProductsInput>;
  imageId?: Maybe<String>;
}

export interface ProductUpdateInput {
  name?: Maybe<String>;
  company?: Maybe<CompanyUpdateOneRequiredWithoutProductsInput>;
  avatarId?: Maybe<String>;
  checkins?: Maybe<CheckinUpdateManyWithoutProductInput>;
  category?: Maybe<CategoryUpdateManyWithoutProductsInput>;
  subCategory?: Maybe<SubCategoryUpdateManyWithoutProductsInput>;
  imageId?: Maybe<String>;
}

export interface ProductUpdateManyMutationInput {
  name?: Maybe<String>;
  avatarId?: Maybe<String>;
  imageId?: Maybe<String>;
}

export interface SubCategoryCreateInput {
  id?: Maybe<ID_Input>;
  category: CategoryCreateOneWithoutSubCategoryInput;
  name: String;
  products?: Maybe<ProductCreateManyWithoutSubCategoryInput>;
}

export interface SubCategoryUpdateInput {
  category?: Maybe<CategoryUpdateOneRequiredWithoutSubCategoryInput>;
  name?: Maybe<String>;
  products?: Maybe<ProductUpdateManyWithoutSubCategoryInput>;
}

export interface SubCategoryUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  admin?: Maybe<Boolean>;
  avatarId?: Maybe<String>;
  avatarColor?: Maybe<String>;
  colorScheme?: Maybe<Int>;
  checkins?: Maybe<CheckinUpdateManyWithoutAuthorInput>;
  friends?: Maybe<UserUpdateManyInput>;
  friendRequest?: Maybe<FriendRequestUpdateManyWithoutReceiverInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  admin?: Maybe<Boolean>;
  avatarId?: Maybe<String>;
  avatarColor?: Maybe<String>;
  colorScheme?: Maybe<Int>;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CategoryWhereInput>;
  AND?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
  OR?: Maybe<CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput>;
  NOT?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
}

export interface CheckinSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CheckinWhereInput>;
  AND?: Maybe<CheckinSubscriptionWhereInput[] | CheckinSubscriptionWhereInput>;
  OR?: Maybe<CheckinSubscriptionWhereInput[] | CheckinSubscriptionWhereInput>;
  NOT?: Maybe<CheckinSubscriptionWhereInput[] | CheckinSubscriptionWhereInput>;
}

export interface CompanySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CompanyWhereInput>;
  AND?: Maybe<CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput>;
  OR?: Maybe<CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput>;
  NOT?: Maybe<CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput>;
}

export interface FriendRequestSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FriendRequestWhereInput>;
  AND?: Maybe<
    FriendRequestSubscriptionWhereInput[] | FriendRequestSubscriptionWhereInput
  >;
  OR?: Maybe<
    FriendRequestSubscriptionWhereInput[] | FriendRequestSubscriptionWhereInput
  >;
  NOT?: Maybe<
    FriendRequestSubscriptionWhereInput[] | FriendRequestSubscriptionWhereInput
  >;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  OR?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  NOT?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
}

export interface SubCategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SubCategoryWhereInput>;
  AND?: Maybe<
    SubCategorySubscriptionWhereInput[] | SubCategorySubscriptionWhereInput
  >;
  OR?: Maybe<
    SubCategorySubscriptionWhereInput[] | SubCategorySubscriptionWhereInput
  >;
  NOT?: Maybe<
    SubCategorySubscriptionWhereInput[] | SubCategorySubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Category {
  id: ID_Output;
  name: String;
  color?: String;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  color: () => Promise<String>;
  subCategory: <T = FragmentableArray<SubCategory>>(args?: {
    where?: SubCategoryWhereInput;
    orderBy?: SubCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<Category>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  color: () => Promise<AsyncIterator<String>>;
  subCategory: <T = Promise<AsyncIterator<SubCategorySubscription>>>(args?: {
    where?: SubCategoryWhereInput;
    orderBy?: SubCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  products: <T = Promise<AsyncIterator<ProductSubscription>>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CategoryNullablePromise
  extends Promise<Category | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  color: () => Promise<String>;
  subCategory: <T = FragmentableArray<SubCategory>>(args?: {
    where?: SubCategoryWhereInput;
    orderBy?: SubCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SubCategory {
  id: ID_Output;
  name: String;
}

export interface SubCategoryPromise extends Promise<SubCategory>, Fragmentable {
  id: () => Promise<ID_Output>;
  category: <T = CategoryPromise>() => T;
  name: () => Promise<String>;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SubCategorySubscription
  extends Promise<AsyncIterator<SubCategory>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  category: <T = CategorySubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  products: <T = Promise<AsyncIterator<ProductSubscription>>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SubCategoryNullablePromise
  extends Promise<SubCategory | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  category: <T = CategoryPromise>() => T;
  name: () => Promise<String>;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Product {
  id: ID_Output;
  name: String;
  avatarId?: String;
  imageId?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  company: <T = CompanyPromise>() => T;
  avatarId: () => Promise<String>;
  checkins: <T = FragmentableArray<Checkin>>(args?: {
    where?: CheckinWhereInput;
    orderBy?: CheckinOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  category: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subCategory: <T = FragmentableArray<SubCategory>>(args?: {
    where?: SubCategoryWhereInput;
    orderBy?: SubCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  imageId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  company: <T = CompanySubscription>() => T;
  avatarId: () => Promise<AsyncIterator<String>>;
  checkins: <T = Promise<AsyncIterator<CheckinSubscription>>>(args?: {
    where?: CheckinWhereInput;
    orderBy?: CheckinOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  category: <T = Promise<AsyncIterator<CategorySubscription>>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subCategory: <T = Promise<AsyncIterator<SubCategorySubscription>>>(args?: {
    where?: SubCategoryWhereInput;
    orderBy?: SubCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  imageId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductNullablePromise
  extends Promise<Product | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  company: <T = CompanyPromise>() => T;
  avatarId: () => Promise<String>;
  checkins: <T = FragmentableArray<Checkin>>(args?: {
    where?: CheckinWhereInput;
    orderBy?: CheckinOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  category: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subCategory: <T = FragmentableArray<SubCategory>>(args?: {
    where?: SubCategoryWhereInput;
    orderBy?: SubCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  imageId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Company {
  id: ID_Output;
  name: String;
}

export interface CompanyPromise extends Promise<Company>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CompanySubscription
  extends Promise<AsyncIterator<Company>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  products: <T = Promise<AsyncIterator<ProductSubscription>>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CompanyNullablePromise
  extends Promise<Company | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Checkin {
  id: ID_Output;
  rating: Int;
  comment?: String;
  image?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CheckinPromise extends Promise<Checkin>, Fragmentable {
  id: () => Promise<ID_Output>;
  rating: () => Promise<Int>;
  comment: () => Promise<String>;
  image: () => Promise<String>;
  author: <T = UserPromise>() => T;
  product: <T = ProductPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CheckinSubscription
  extends Promise<AsyncIterator<Checkin>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rating: () => Promise<AsyncIterator<Int>>;
  comment: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  product: <T = ProductSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CheckinNullablePromise
  extends Promise<Checkin | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  rating: () => Promise<Int>;
  comment: () => Promise<String>;
  image: () => Promise<String>;
  author: <T = UserPromise>() => T;
  product: <T = ProductPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  email?: String;
  firstName: String;
  lastName: String;
  password: String;
  admin: Boolean;
  avatarId?: String;
  avatarColor?: String;
  colorScheme?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  admin: () => Promise<Boolean>;
  avatarId: () => Promise<String>;
  avatarColor: () => Promise<String>;
  colorScheme: () => Promise<Int>;
  checkins: <T = FragmentableArray<Checkin>>(args?: {
    where?: CheckinWhereInput;
    orderBy?: CheckinOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  friends: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  friendRequest: <T = FragmentableArray<FriendRequest>>(args?: {
    where?: FriendRequestWhereInput;
    orderBy?: FriendRequestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  admin: () => Promise<AsyncIterator<Boolean>>;
  avatarId: () => Promise<AsyncIterator<String>>;
  avatarColor: () => Promise<AsyncIterator<String>>;
  colorScheme: () => Promise<AsyncIterator<Int>>;
  checkins: <T = Promise<AsyncIterator<CheckinSubscription>>>(args?: {
    where?: CheckinWhereInput;
    orderBy?: CheckinOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  friends: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  friendRequest: <
    T = Promise<AsyncIterator<FriendRequestSubscription>>
  >(args?: {
    where?: FriendRequestWhereInput;
    orderBy?: FriendRequestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  admin: () => Promise<Boolean>;
  avatarId: () => Promise<String>;
  avatarColor: () => Promise<String>;
  colorScheme: () => Promise<Int>;
  checkins: <T = FragmentableArray<Checkin>>(args?: {
    where?: CheckinWhereInput;
    orderBy?: CheckinOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  friends: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  friendRequest: <T = FragmentableArray<FriendRequest>>(args?: {
    where?: FriendRequestWhereInput;
    orderBy?: FriendRequestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FriendRequest {
  id: ID_Output;
  message?: String;
}

export interface FriendRequestPromise
  extends Promise<FriendRequest>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sender: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  receiver: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  message: () => Promise<String>;
}

export interface FriendRequestSubscription
  extends Promise<AsyncIterator<FriendRequest>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sender: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  receiver: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  message: () => Promise<AsyncIterator<String>>;
}

export interface FriendRequestNullablePromise
  extends Promise<FriendRequest | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sender: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  receiver: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  message: () => Promise<String>;
}

export interface CategoryConnection {
  pageInfo: PageInfo;
  edges: CategoryEdge[];
}

export interface CategoryConnectionPromise
  extends Promise<CategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CategoryEdge {
  node: Category;
  cursor: String;
}

export interface CategoryEdgePromise
  extends Promise<CategoryEdge>,
    Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise
  extends Promise<AggregateCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CheckinConnection {
  pageInfo: PageInfo;
  edges: CheckinEdge[];
}

export interface CheckinConnectionPromise
  extends Promise<CheckinConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CheckinEdge>>() => T;
  aggregate: <T = AggregateCheckinPromise>() => T;
}

export interface CheckinConnectionSubscription
  extends Promise<AsyncIterator<CheckinConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CheckinEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCheckinSubscription>() => T;
}

export interface CheckinEdge {
  node: Checkin;
  cursor: String;
}

export interface CheckinEdgePromise extends Promise<CheckinEdge>, Fragmentable {
  node: <T = CheckinPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CheckinEdgeSubscription
  extends Promise<AsyncIterator<CheckinEdge>>,
    Fragmentable {
  node: <T = CheckinSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCheckin {
  count: Int;
}

export interface AggregateCheckinPromise
  extends Promise<AggregateCheckin>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCheckinSubscription
  extends Promise<AsyncIterator<AggregateCheckin>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CompanyConnection {
  pageInfo: PageInfo;
  edges: CompanyEdge[];
}

export interface CompanyConnectionPromise
  extends Promise<CompanyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CompanyEdge>>() => T;
  aggregate: <T = AggregateCompanyPromise>() => T;
}

export interface CompanyConnectionSubscription
  extends Promise<AsyncIterator<CompanyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CompanyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCompanySubscription>() => T;
}

export interface CompanyEdge {
  node: Company;
  cursor: String;
}

export interface CompanyEdgePromise extends Promise<CompanyEdge>, Fragmentable {
  node: <T = CompanyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CompanyEdgeSubscription
  extends Promise<AsyncIterator<CompanyEdge>>,
    Fragmentable {
  node: <T = CompanySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCompany {
  count: Int;
}

export interface AggregateCompanyPromise
  extends Promise<AggregateCompany>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompanySubscription
  extends Promise<AsyncIterator<AggregateCompany>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FriendRequestConnection {
  pageInfo: PageInfo;
  edges: FriendRequestEdge[];
}

export interface FriendRequestConnectionPromise
  extends Promise<FriendRequestConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FriendRequestEdge>>() => T;
  aggregate: <T = AggregateFriendRequestPromise>() => T;
}

export interface FriendRequestConnectionSubscription
  extends Promise<AsyncIterator<FriendRequestConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FriendRequestEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFriendRequestSubscription>() => T;
}

export interface FriendRequestEdge {
  node: FriendRequest;
  cursor: String;
}

export interface FriendRequestEdgePromise
  extends Promise<FriendRequestEdge>,
    Fragmentable {
  node: <T = FriendRequestPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FriendRequestEdgeSubscription
  extends Promise<AsyncIterator<FriendRequestEdge>>,
    Fragmentable {
  node: <T = FriendRequestSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFriendRequest {
  count: Int;
}

export interface AggregateFriendRequestPromise
  extends Promise<AggregateFriendRequest>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFriendRequestSubscription
  extends Promise<AsyncIterator<AggregateFriendRequest>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SubCategoryConnection {
  pageInfo: PageInfo;
  edges: SubCategoryEdge[];
}

export interface SubCategoryConnectionPromise
  extends Promise<SubCategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SubCategoryEdge>>() => T;
  aggregate: <T = AggregateSubCategoryPromise>() => T;
}

export interface SubCategoryConnectionSubscription
  extends Promise<AsyncIterator<SubCategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SubCategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSubCategorySubscription>() => T;
}

export interface SubCategoryEdge {
  node: SubCategory;
  cursor: String;
}

export interface SubCategoryEdgePromise
  extends Promise<SubCategoryEdge>,
    Fragmentable {
  node: <T = SubCategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SubCategoryEdgeSubscription
  extends Promise<AsyncIterator<SubCategoryEdge>>,
    Fragmentable {
  node: <T = SubCategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSubCategory {
  count: Int;
}

export interface AggregateSubCategoryPromise
  extends Promise<AggregateSubCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSubCategorySubscription
  extends Promise<AsyncIterator<AggregateSubCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  node: Category;
  updatedFields: String[];
  previousValues: CategoryPreviousValues;
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface CategoryPreviousValues {
  id: ID_Output;
  name: String;
  color?: String;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  color: () => Promise<String>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  color: () => Promise<AsyncIterator<String>>;
}

export interface CheckinSubscriptionPayload {
  mutation: MutationType;
  node: Checkin;
  updatedFields: String[];
  previousValues: CheckinPreviousValues;
}

export interface CheckinSubscriptionPayloadPromise
  extends Promise<CheckinSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CheckinPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CheckinPreviousValuesPromise>() => T;
}

export interface CheckinSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CheckinSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CheckinSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CheckinPreviousValuesSubscription>() => T;
}

export interface CheckinPreviousValues {
  id: ID_Output;
  rating: Int;
  comment?: String;
  image?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CheckinPreviousValuesPromise
  extends Promise<CheckinPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  rating: () => Promise<Int>;
  comment: () => Promise<String>;
  image: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CheckinPreviousValuesSubscription
  extends Promise<AsyncIterator<CheckinPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rating: () => Promise<AsyncIterator<Int>>;
  comment: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CompanySubscriptionPayload {
  mutation: MutationType;
  node: Company;
  updatedFields: String[];
  previousValues: CompanyPreviousValues;
}

export interface CompanySubscriptionPayloadPromise
  extends Promise<CompanySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CompanyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompanyPreviousValuesPromise>() => T;
}

export interface CompanySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompanySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompanySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CompanyPreviousValuesSubscription>() => T;
}

export interface CompanyPreviousValues {
  id: ID_Output;
  name: String;
}

export interface CompanyPreviousValuesPromise
  extends Promise<CompanyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CompanyPreviousValuesSubscription
  extends Promise<AsyncIterator<CompanyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface FriendRequestSubscriptionPayload {
  mutation: MutationType;
  node: FriendRequest;
  updatedFields: String[];
  previousValues: FriendRequestPreviousValues;
}

export interface FriendRequestSubscriptionPayloadPromise
  extends Promise<FriendRequestSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FriendRequestPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FriendRequestPreviousValuesPromise>() => T;
}

export interface FriendRequestSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FriendRequestSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FriendRequestSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FriendRequestPreviousValuesSubscription>() => T;
}

export interface FriendRequestPreviousValues {
  id: ID_Output;
  message?: String;
}

export interface FriendRequestPreviousValuesPromise
  extends Promise<FriendRequestPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  message: () => Promise<String>;
}

export interface FriendRequestPreviousValuesSubscription
  extends Promise<AsyncIterator<FriendRequestPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  message: () => Promise<AsyncIterator<String>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface ProductPreviousValues {
  id: ID_Output;
  name: String;
  avatarId?: String;
  imageId?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  avatarId: () => Promise<String>;
  imageId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  avatarId: () => Promise<AsyncIterator<String>>;
  imageId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SubCategorySubscriptionPayload {
  mutation: MutationType;
  node: SubCategory;
  updatedFields: String[];
  previousValues: SubCategoryPreviousValues;
}

export interface SubCategorySubscriptionPayloadPromise
  extends Promise<SubCategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SubCategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SubCategoryPreviousValuesPromise>() => T;
}

export interface SubCategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SubCategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SubCategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SubCategoryPreviousValuesSubscription>() => T;
}

export interface SubCategoryPreviousValues {
  id: ID_Output;
  name: String;
}

export interface SubCategoryPreviousValuesPromise
  extends Promise<SubCategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface SubCategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<SubCategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email?: String;
  firstName: String;
  lastName: String;
  password: String;
  admin: Boolean;
  avatarId?: String;
  avatarColor?: String;
  colorScheme?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  admin: () => Promise<Boolean>;
  avatarId: () => Promise<String>;
  avatarColor: () => Promise<String>;
  colorScheme: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  admin: () => Promise<AsyncIterator<Boolean>>;
  avatarId: () => Promise<AsyncIterator<String>>;
  avatarColor: () => Promise<AsyncIterator<String>>;
  colorScheme: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "Checkin",
    embedded: false
  },
  {
    name: "Company",
    embedded: false
  },
  {
    name: "Category",
    embedded: false
  },
  {
    name: "SubCategory",
    embedded: false
  },
  {
    name: "FriendRequest",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://tastice-prisma-83fbd4dddb.herokuapp.com/tastice-backend/dev`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
