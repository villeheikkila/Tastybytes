### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

type Category {
  color: String
  id: ID!
  name: String!
  products(after: String, before: String, first: Int, last: Int, orderBy: ProductOrderByInput, skip: Int, where: ProductWhereInput): [Product!]
  subCategory(after: String, before: String, first: Int, last: Int, orderBy: SubCategoryOrderByInput, skip: Int, where: SubCategoryWhereInput): [SubCategory!]
}

enum CategoryOrderByInput {
  color_ASC
  color_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  color: String
  color_contains: String
  color_ends_with: String
  color_gt: String
  color_gte: String
  color_in: [String!]
  color_lt: String
  color_lte: String
  color_not: String
  color_not_contains: String
  color_not_ends_with: String
  color_not_in: [String!]
  color_not_starts_with: String
  color_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  products_every: ProductWhereInput
  products_none: ProductWhereInput
  products_some: ProductWhereInput
  subCategory_every: SubCategoryWhereInput
  subCategory_none: SubCategoryWhereInput
  subCategory_some: SubCategoryWhereInput
}

type Checkin {
  author: User!
  comment: String
  createdAt: DateTime!
  id: ID!
  image: String
  product: Product!
  rating: Int!
  updatedAt: DateTime!
}

enum CheckinOrderByInput {
  comment_ASC
  comment_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  image_ASC
  image_DESC
  rating_ASC
  rating_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CheckinWhereInput {
  AND: [CheckinWhereInput!]
  author: UserWhereInput
  comment: String
  comment_contains: String
  comment_ends_with: String
  comment_gt: String
  comment_gte: String
  comment_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_not: String
  comment_not_contains: String
  comment_not_ends_with: String
  comment_not_in: [String!]
  comment_not_starts_with: String
  comment_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  image: String
  image_contains: String
  image_ends_with: String
  image_gt: String
  image_gte: String
  image_in: [String!]
  image_lt: String
  image_lte: String
  image_not: String
  image_not_contains: String
  image_not_ends_with: String
  image_not_in: [String!]
  image_not_starts_with: String
  image_starts_with: String
  NOT: [CheckinWhereInput!]
  OR: [CheckinWhereInput!]
  product: ProductWhereInput
  rating: Int
  rating_gt: Int
  rating_gte: Int
  rating_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_not: Int
  rating_not_in: [Int!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

type Company {
  id: ID!
  name: String!
  products(after: String, before: String, first: Int, last: Int, orderBy: ProductOrderByInput, skip: Int, where: ProductWhereInput): [Product!]
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  products_every: ProductWhereInput
  products_none: ProductWhereInput
  products_some: ProductWhereInput
}

scalar DateTime

type FriendRequest {
  id: ID!
  message: String
  receiver(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  sender(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
}

type FriendRequestPreviousValues {
  id: ID!
  message: String
}

type FriendRequestSubscriptionPayload {
  mutation: MutationType!
  node: FriendRequest
  previousValues: FriendRequestPreviousValues
  updatedFields: [String!]
}

input FriendRequestWhereInput {
  AND: [FriendRequestWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  message: String
  message_contains: String
  message_ends_with: String
  message_gt: String
  message_gte: String
  message_in: [String!]
  message_lt: String
  message_lte: String
  message_not: String
  message_not_contains: String
  message_not_ends_with: String
  message_not_in: [String!]
  message_not_starts_with: String
  message_starts_with: String
  NOT: [FriendRequestWhereInput!]
  OR: [FriendRequestWhereInput!]
  receiver_every: UserWhereInput
  receiver_none: UserWhereInput
  receiver_some: UserWhereInput
  sender_every: UserWhereInput
  sender_none: UserWhereInput
  sender_some: UserWhereInput
}

type Mutation {
  acceptFriendRequest(id: ID): User
  addProduct(categoryId: ID, company: String, imageId: String, name: String, subCategories: [String!]): Product
  createCategory(name: String): Category
  createCheckin(authorId: ID, comment: String, image: String, productId: ID, rating: Int): Checkin
  createCompany(name: String): Company
  createFriendRequest(message: String, receiverId: ID, senderId: ID): FriendRequest
  createSubCategory(categoryId: ID, name: String): SubCategory
  deleteCategory(id: ID): Category
  deleteCheckin(id: ID): Checkin
  deleteFriend(friendId: ID, id: ID): User
  deleteFriendRequest(id: ID): FriendRequest
  deleteProduct(id: ID): Product
  deleteUser(id: ID): User
  login(email: String, password: String): AuthPayload
  signup(email: String, firstName: String, lastName: String, password: String): AuthPayload
  updateCategory(id: ID, name: String): Category
  updateCheckin(comment: String, id: ID, rating: Int): Checkin
  updateProduct(categoryId: ID, company: String, id: ID, imageId: String, name: String, subCategories: [String!]): Product
  updateUser(colorScheme: Int, email: String, firstName: String, id: ID, lastName: String): User
  updateUserAvatar(avatarId: String, id: ID): User
  updateUserPassword(existingPassword: String, id: ID, password: String): User
}

enum MutationType {
  CREATED
  DELETED
  UPDATED
}

type Product {
  avatarId: String
  category(after: String, before: String, first: Int, last: Int, orderBy: CategoryOrderByInput, skip: Int, where: CategoryWhereInput): [Category!]
  checkins(after: String, before: String, first: Int, last: Int, orderBy: CheckinOrderByInput, skip: Int, where: CheckinWhereInput): [Checkin!]
  company: Company!
  createdAt: DateTime!
  id: ID!
  imageId: String
  name: String!
  subCategory(after: String, before: String, first: Int, last: Int, orderBy: SubCategoryOrderByInput, skip: Int, where: SubCategoryWhereInput): [SubCategory!]
  updatedAt: DateTime!
}

enum ProductOrderByInput {
  avatarId_ASC
  avatarId_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  imageId_ASC
  imageId_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductPreviousValues {
  avatarId: String
  createdAt: DateTime!
  id: ID!
  imageId: String
  name: String!
  updatedAt: DateTime!
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  previousValues: ProductPreviousValues
  updatedFields: [String!]
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  avatarId: String
  avatarId_contains: String
  avatarId_ends_with: String
  avatarId_gt: String
  avatarId_gte: String
  avatarId_in: [String!]
  avatarId_lt: String
  avatarId_lte: String
  avatarId_not: String
  avatarId_not_contains: String
  avatarId_not_ends_with: String
  avatarId_not_in: [String!]
  avatarId_not_starts_with: String
  avatarId_starts_with: String
  category_every: CategoryWhereInput
  category_none: CategoryWhereInput
  category_some: CategoryWhereInput
  checkins_every: CheckinWhereInput
  checkins_none: CheckinWhereInput
  checkins_some: CheckinWhereInput
  company: CompanyWhereInput
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  imageId: String
  imageId_contains: String
  imageId_ends_with: String
  imageId_gt: String
  imageId_gte: String
  imageId_in: [String!]
  imageId_lt: String
  imageId_lte: String
  imageId_not: String
  imageId_not_contains: String
  imageId_not_ends_with: String
  imageId_not_in: [String!]
  imageId_not_starts_with: String
  imageId_starts_with: String
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  subCategory_every: SubCategoryWhereInput
  subCategory_none: SubCategoryWhereInput
  subCategory_some: SubCategoryWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

type Query {
  categories: [Category!]
  checkin(id: ID): [Checkin!]
  checkins: [Checkin!]
  companies: [Company!]
  company(id: ID): [Company!]
  friendRequest(id: ID): [FriendRequest!]
  friendRequests: [FriendRequest!]
  me: User
  product(id: ID): [Product!]
  products: [Product!]
  searchCheckins(filter: String, first: Int, skip: Int): [Checkin!]
  searchProductCheckins(filter: String, first: Int, id: ID, skip: Int): [Checkin!]
  searchProducts(filter: String, first: Int, skip: Int): [Product!]
  searchUserCheckins(filter: String, first: Int, id: ID, skip: Int): [Checkin!]
  searchUsers(filter: String): [User!]
  subCategories: [SubCategory!]
  user(id: ID): [User!]
  users: [User!]
}

type SubCategory {
  category: Category!
  id: ID!
  name: String!
  products(after: String, before: String, first: Int, last: Int, orderBy: ProductOrderByInput, skip: Int, where: ProductWhereInput): [Product!]
}

enum SubCategoryOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input SubCategoryWhereInput {
  AND: [SubCategoryWhereInput!]
  category: CategoryWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [SubCategoryWhereInput!]
  OR: [SubCategoryWhereInput!]
  products_every: ProductWhereInput
  products_none: ProductWhereInput
  products_some: ProductWhereInput
}

type Subscription {
  friendRequest(id: ID): FriendRequestSubscriptionPayload
  product: ProductSubscriptionPayload
  user: UserSubscriptionPayload
}

type User {
  admin: Boolean!
  avatarColor: String
  avatarId: String
  checkins(after: String, before: String, first: Int, last: Int, orderBy: CheckinOrderByInput, skip: Int, where: CheckinWhereInput): [Checkin!]
  colorScheme: Int
  email: String
  firstName: String!
  friends(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  id: ID!
  lastName: String!
}

enum UserOrderByInput {
  admin_ASC
  admin_DESC
  avatarColor_ASC
  avatarColor_DESC
  avatarId_ASC
  avatarId_DESC
  colorScheme_ASC
  colorScheme_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  id_ASC
  id_DESC
  lastName_ASC
  lastName_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  admin: Boolean!
  avatarColor: String
  avatarId: String
  colorScheme: Int
  createdAt: DateTime!
  email: String
  firstName: String!
  id: ID!
  lastName: String!
  password: String!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  previousValues: UserPreviousValues
  updatedFields: [String!]
}

input UserWhereInput {
  admin: Boolean
  admin_not: Boolean
  AND: [UserWhereInput!]
  avatarColor: String
  avatarColor_contains: String
  avatarColor_ends_with: String
  avatarColor_gt: String
  avatarColor_gte: String
  avatarColor_in: [String!]
  avatarColor_lt: String
  avatarColor_lte: String
  avatarColor_not: String
  avatarColor_not_contains: String
  avatarColor_not_ends_with: String
  avatarColor_not_in: [String!]
  avatarColor_not_starts_with: String
  avatarColor_starts_with: String
  avatarId: String
  avatarId_contains: String
  avatarId_ends_with: String
  avatarId_gt: String
  avatarId_gte: String
  avatarId_in: [String!]
  avatarId_lt: String
  avatarId_lte: String
  avatarId_not: String
  avatarId_not_contains: String
  avatarId_not_ends_with: String
  avatarId_not_in: [String!]
  avatarId_not_starts_with: String
  avatarId_starts_with: String
  checkins_every: CheckinWhereInput
  checkins_none: CheckinWhereInput
  checkins_some: CheckinWhereInput
  colorScheme: Int
  colorScheme_gt: Int
  colorScheme_gte: Int
  colorScheme_in: [Int!]
  colorScheme_lt: Int
  colorScheme_lte: Int
  colorScheme_not: Int
  colorScheme_not_in: [Int!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  firstName: String
  firstName_contains: String
  firstName_ends_with: String
  firstName_gt: String
  firstName_gte: String
  firstName_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_not: String
  firstName_not_contains: String
  firstName_not_ends_with: String
  firstName_not_in: [String!]
  firstName_not_starts_with: String
  firstName_starts_with: String
  friendRequest_every: FriendRequestWhereInput
  friendRequest_none: FriendRequestWhereInput
  friendRequest_some: FriendRequestWhereInput
  friends_every: UserWhereInput
  friends_none: UserWhereInput
  friends_some: UserWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  lastName: String
  lastName_contains: String
  lastName_ends_with: String
  lastName_gt: String
  lastName_gte: String
  lastName_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_not: String
  lastName_not_contains: String
  lastName_not_ends_with: String
  lastName_not_in: [String!]
  lastName_not_starts_with: String
  lastName_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}
