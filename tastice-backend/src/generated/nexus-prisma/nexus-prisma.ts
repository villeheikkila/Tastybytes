/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      Checkin: CheckinObject
      Product: ProductObject
      Company: CompanyObject
      Category: CategoryObject
      SubCategory: SubCategoryObject
      FriendRequest: FriendRequestObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      ProductConnection: ProductConnectionObject
      ProductEdge: ProductEdgeObject
      AggregateProduct: AggregateProductObject
      CheckinConnection: CheckinConnectionObject
      CheckinEdge: CheckinEdgeObject
      AggregateCheckin: AggregateCheckinObject
      CompanyConnection: CompanyConnectionObject
      CompanyEdge: CompanyEdgeObject
      AggregateCompany: AggregateCompanyObject
      CategoryConnection: CategoryConnectionObject
      CategoryEdge: CategoryEdgeObject
      AggregateCategory: AggregateCategoryObject
      SubCategoryConnection: SubCategoryConnectionObject
      SubCategoryEdge: SubCategoryEdgeObject
      AggregateSubCategory: AggregateSubCategoryObject
      FriendRequestConnection: FriendRequestConnectionObject
      FriendRequestEdge: FriendRequestEdgeObject
      AggregateFriendRequest: AggregateFriendRequestObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      ProductSubscriptionPayload: ProductSubscriptionPayloadObject
      ProductPreviousValues: ProductPreviousValuesObject
      CheckinSubscriptionPayload: CheckinSubscriptionPayloadObject
      CheckinPreviousValues: CheckinPreviousValuesObject
      CompanySubscriptionPayload: CompanySubscriptionPayloadObject
      CompanyPreviousValues: CompanyPreviousValuesObject
      CategorySubscriptionPayload: CategorySubscriptionPayloadObject
      CategoryPreviousValues: CategoryPreviousValuesObject
      SubCategorySubscriptionPayload: SubCategorySubscriptionPayloadObject
      SubCategoryPreviousValues: SubCategoryPreviousValuesObject
      FriendRequestSubscriptionPayload: FriendRequestSubscriptionPayloadObject
      FriendRequestPreviousValues: FriendRequestPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      Checkin: CheckinFieldDetails
      Product: ProductFieldDetails
      Company: CompanyFieldDetails
      Category: CategoryFieldDetails
      SubCategory: SubCategoryFieldDetails
      FriendRequest: FriendRequestFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      ProductConnection: ProductConnectionFieldDetails
      ProductEdge: ProductEdgeFieldDetails
      AggregateProduct: AggregateProductFieldDetails
      CheckinConnection: CheckinConnectionFieldDetails
      CheckinEdge: CheckinEdgeFieldDetails
      AggregateCheckin: AggregateCheckinFieldDetails
      CompanyConnection: CompanyConnectionFieldDetails
      CompanyEdge: CompanyEdgeFieldDetails
      AggregateCompany: AggregateCompanyFieldDetails
      CategoryConnection: CategoryConnectionFieldDetails
      CategoryEdge: CategoryEdgeFieldDetails
      AggregateCategory: AggregateCategoryFieldDetails
      SubCategoryConnection: SubCategoryConnectionFieldDetails
      SubCategoryEdge: SubCategoryEdgeFieldDetails
      AggregateSubCategory: AggregateSubCategoryFieldDetails
      FriendRequestConnection: FriendRequestConnectionFieldDetails
      FriendRequestEdge: FriendRequestEdgeFieldDetails
      AggregateFriendRequest: AggregateFriendRequestFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      ProductSubscriptionPayload: ProductSubscriptionPayloadFieldDetails
      ProductPreviousValues: ProductPreviousValuesFieldDetails
      CheckinSubscriptionPayload: CheckinSubscriptionPayloadFieldDetails
      CheckinPreviousValues: CheckinPreviousValuesFieldDetails
      CompanySubscriptionPayload: CompanySubscriptionPayloadFieldDetails
      CompanyPreviousValues: CompanyPreviousValuesFieldDetails
      CategorySubscriptionPayload: CategorySubscriptionPayloadFieldDetails
      CategoryPreviousValues: CategoryPreviousValuesFieldDetails
      SubCategorySubscriptionPayload: SubCategorySubscriptionPayloadFieldDetails
      SubCategoryPreviousValues: SubCategoryPreviousValuesFieldDetails
      FriendRequestSubscriptionPayload: FriendRequestSubscriptionPayloadFieldDetails
      FriendRequestPreviousValues: FriendRequestPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      CheckinWhereInput: CheckinWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      FriendRequestWhereInput: FriendRequestWhereInputInputObject
      ProductWhereInput: ProductWhereInputInputObject
      CompanyWhereInput: CompanyWhereInputInputObject
      CategoryWhereInput: CategoryWhereInputInputObject
      SubCategoryWhereInput: SubCategoryWhereInputInputObject
      ProductWhereUniqueInput: ProductWhereUniqueInputInputObject
      CheckinWhereUniqueInput: CheckinWhereUniqueInputInputObject
      CompanyWhereUniqueInput: CompanyWhereUniqueInputInputObject
      CategoryWhereUniqueInput: CategoryWhereUniqueInputInputObject
      SubCategoryWhereUniqueInput: SubCategoryWhereUniqueInputInputObject
      FriendRequestWhereUniqueInput: FriendRequestWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      CheckinCreateManyWithoutAuthorInput: CheckinCreateManyWithoutAuthorInputInputObject
      CheckinCreateWithoutAuthorInput: CheckinCreateWithoutAuthorInputInputObject
      ProductCreateOneWithoutCheckinsInput: ProductCreateOneWithoutCheckinsInputInputObject
      ProductCreateWithoutCheckinsInput: ProductCreateWithoutCheckinsInputInputObject
      CompanyCreateOneWithoutProductsInput: CompanyCreateOneWithoutProductsInputInputObject
      CompanyCreateWithoutProductsInput: CompanyCreateWithoutProductsInputInputObject
      CategoryCreateManyWithoutProductsInput: CategoryCreateManyWithoutProductsInputInputObject
      CategoryCreateWithoutProductsInput: CategoryCreateWithoutProductsInputInputObject
      SubCategoryCreateManyWithoutCategoryInput: SubCategoryCreateManyWithoutCategoryInputInputObject
      SubCategoryCreateWithoutCategoryInput: SubCategoryCreateWithoutCategoryInputInputObject
      ProductCreateManyWithoutSubCategoryInput: ProductCreateManyWithoutSubCategoryInputInputObject
      ProductCreateWithoutSubCategoryInput: ProductCreateWithoutSubCategoryInputInputObject
      CheckinCreateManyWithoutProductInput: CheckinCreateManyWithoutProductInputInputObject
      CheckinCreateWithoutProductInput: CheckinCreateWithoutProductInputInputObject
      UserCreateOneWithoutCheckinsInput: UserCreateOneWithoutCheckinsInputInputObject
      UserCreateWithoutCheckinsInput: UserCreateWithoutCheckinsInputInputObject
      UserCreateManyInput: UserCreateManyInputInputObject
      FriendRequestCreateManyWithoutReceiverInput: FriendRequestCreateManyWithoutReceiverInputInputObject
      FriendRequestCreateWithoutReceiverInput: FriendRequestCreateWithoutReceiverInputInputObject
      SubCategoryCreateManyWithoutProductsInput: SubCategoryCreateManyWithoutProductsInputInputObject
      SubCategoryCreateWithoutProductsInput: SubCategoryCreateWithoutProductsInputInputObject
      CategoryCreateOneWithoutSubCategoryInput: CategoryCreateOneWithoutSubCategoryInputInputObject
      CategoryCreateWithoutSubCategoryInput: CategoryCreateWithoutSubCategoryInputInputObject
      ProductCreateManyWithoutCategoryInput: ProductCreateManyWithoutCategoryInputInputObject
      ProductCreateWithoutCategoryInput: ProductCreateWithoutCategoryInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      CheckinUpdateManyWithoutAuthorInput: CheckinUpdateManyWithoutAuthorInputInputObject
      CheckinUpdateWithWhereUniqueWithoutAuthorInput: CheckinUpdateWithWhereUniqueWithoutAuthorInputInputObject
      CheckinUpdateWithoutAuthorDataInput: CheckinUpdateWithoutAuthorDataInputInputObject
      ProductUpdateOneRequiredWithoutCheckinsInput: ProductUpdateOneRequiredWithoutCheckinsInputInputObject
      ProductUpdateWithoutCheckinsDataInput: ProductUpdateWithoutCheckinsDataInputInputObject
      CompanyUpdateOneRequiredWithoutProductsInput: CompanyUpdateOneRequiredWithoutProductsInputInputObject
      CompanyUpdateWithoutProductsDataInput: CompanyUpdateWithoutProductsDataInputInputObject
      CompanyUpsertWithoutProductsInput: CompanyUpsertWithoutProductsInputInputObject
      CategoryUpdateManyWithoutProductsInput: CategoryUpdateManyWithoutProductsInputInputObject
      CategoryUpdateWithWhereUniqueWithoutProductsInput: CategoryUpdateWithWhereUniqueWithoutProductsInputInputObject
      CategoryUpdateWithoutProductsDataInput: CategoryUpdateWithoutProductsDataInputInputObject
      SubCategoryUpdateManyWithoutCategoryInput: SubCategoryUpdateManyWithoutCategoryInputInputObject
      SubCategoryUpdateWithWhereUniqueWithoutCategoryInput: SubCategoryUpdateWithWhereUniqueWithoutCategoryInputInputObject
      SubCategoryUpdateWithoutCategoryDataInput: SubCategoryUpdateWithoutCategoryDataInputInputObject
      ProductUpdateManyWithoutSubCategoryInput: ProductUpdateManyWithoutSubCategoryInputInputObject
      ProductUpdateWithWhereUniqueWithoutSubCategoryInput: ProductUpdateWithWhereUniqueWithoutSubCategoryInputInputObject
      ProductUpdateWithoutSubCategoryDataInput: ProductUpdateWithoutSubCategoryDataInputInputObject
      CheckinUpdateManyWithoutProductInput: CheckinUpdateManyWithoutProductInputInputObject
      CheckinUpdateWithWhereUniqueWithoutProductInput: CheckinUpdateWithWhereUniqueWithoutProductInputInputObject
      CheckinUpdateWithoutProductDataInput: CheckinUpdateWithoutProductDataInputInputObject
      UserUpdateOneRequiredWithoutCheckinsInput: UserUpdateOneRequiredWithoutCheckinsInputInputObject
      UserUpdateWithoutCheckinsDataInput: UserUpdateWithoutCheckinsDataInputInputObject
      UserUpdateManyInput: UserUpdateManyInputInputObject
      UserUpdateWithWhereUniqueNestedInput: UserUpdateWithWhereUniqueNestedInputInputObject
      UserUpdateDataInput: UserUpdateDataInputInputObject
      FriendRequestUpdateManyWithoutReceiverInput: FriendRequestUpdateManyWithoutReceiverInputInputObject
      FriendRequestUpdateWithWhereUniqueWithoutReceiverInput: FriendRequestUpdateWithWhereUniqueWithoutReceiverInputInputObject
      FriendRequestUpdateWithoutReceiverDataInput: FriendRequestUpdateWithoutReceiverDataInputInputObject
      FriendRequestUpsertWithWhereUniqueWithoutReceiverInput: FriendRequestUpsertWithWhereUniqueWithoutReceiverInputInputObject
      FriendRequestScalarWhereInput: FriendRequestScalarWhereInputInputObject
      FriendRequestUpdateManyWithWhereNestedInput: FriendRequestUpdateManyWithWhereNestedInputInputObject
      FriendRequestUpdateManyDataInput: FriendRequestUpdateManyDataInputInputObject
      UserUpsertWithWhereUniqueNestedInput: UserUpsertWithWhereUniqueNestedInputInputObject
      UserScalarWhereInput: UserScalarWhereInputInputObject
      UserUpdateManyWithWhereNestedInput: UserUpdateManyWithWhereNestedInputInputObject
      UserUpdateManyDataInput: UserUpdateManyDataInputInputObject
      UserUpsertWithoutCheckinsInput: UserUpsertWithoutCheckinsInputInputObject
      CheckinUpsertWithWhereUniqueWithoutProductInput: CheckinUpsertWithWhereUniqueWithoutProductInputInputObject
      CheckinScalarWhereInput: CheckinScalarWhereInputInputObject
      CheckinUpdateManyWithWhereNestedInput: CheckinUpdateManyWithWhereNestedInputInputObject
      CheckinUpdateManyDataInput: CheckinUpdateManyDataInputInputObject
      ProductUpsertWithWhereUniqueWithoutSubCategoryInput: ProductUpsertWithWhereUniqueWithoutSubCategoryInputInputObject
      ProductScalarWhereInput: ProductScalarWhereInputInputObject
      ProductUpdateManyWithWhereNestedInput: ProductUpdateManyWithWhereNestedInputInputObject
      ProductUpdateManyDataInput: ProductUpdateManyDataInputInputObject
      SubCategoryUpsertWithWhereUniqueWithoutCategoryInput: SubCategoryUpsertWithWhereUniqueWithoutCategoryInputInputObject
      SubCategoryScalarWhereInput: SubCategoryScalarWhereInputInputObject
      SubCategoryUpdateManyWithWhereNestedInput: SubCategoryUpdateManyWithWhereNestedInputInputObject
      SubCategoryUpdateManyDataInput: SubCategoryUpdateManyDataInputInputObject
      CategoryUpsertWithWhereUniqueWithoutProductsInput: CategoryUpsertWithWhereUniqueWithoutProductsInputInputObject
      CategoryScalarWhereInput: CategoryScalarWhereInputInputObject
      CategoryUpdateManyWithWhereNestedInput: CategoryUpdateManyWithWhereNestedInputInputObject
      CategoryUpdateManyDataInput: CategoryUpdateManyDataInputInputObject
      SubCategoryUpdateManyWithoutProductsInput: SubCategoryUpdateManyWithoutProductsInputInputObject
      SubCategoryUpdateWithWhereUniqueWithoutProductsInput: SubCategoryUpdateWithWhereUniqueWithoutProductsInputInputObject
      SubCategoryUpdateWithoutProductsDataInput: SubCategoryUpdateWithoutProductsDataInputInputObject
      CategoryUpdateOneRequiredWithoutSubCategoryInput: CategoryUpdateOneRequiredWithoutSubCategoryInputInputObject
      CategoryUpdateWithoutSubCategoryDataInput: CategoryUpdateWithoutSubCategoryDataInputInputObject
      ProductUpdateManyWithoutCategoryInput: ProductUpdateManyWithoutCategoryInputInputObject
      ProductUpdateWithWhereUniqueWithoutCategoryInput: ProductUpdateWithWhereUniqueWithoutCategoryInputInputObject
      ProductUpdateWithoutCategoryDataInput: ProductUpdateWithoutCategoryDataInputInputObject
      ProductUpsertWithWhereUniqueWithoutCategoryInput: ProductUpsertWithWhereUniqueWithoutCategoryInputInputObject
      CategoryUpsertWithoutSubCategoryInput: CategoryUpsertWithoutSubCategoryInputInputObject
      SubCategoryUpsertWithWhereUniqueWithoutProductsInput: SubCategoryUpsertWithWhereUniqueWithoutProductsInputInputObject
      ProductUpsertWithoutCheckinsInput: ProductUpsertWithoutCheckinsInputInputObject
      CheckinUpsertWithWhereUniqueWithoutAuthorInput: CheckinUpsertWithWhereUniqueWithoutAuthorInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      ProductCreateInput: ProductCreateInputInputObject
      ProductUpdateInput: ProductUpdateInputInputObject
      ProductUpdateManyMutationInput: ProductUpdateManyMutationInputInputObject
      CheckinCreateInput: CheckinCreateInputInputObject
      CheckinUpdateInput: CheckinUpdateInputInputObject
      CheckinUpdateManyMutationInput: CheckinUpdateManyMutationInputInputObject
      CompanyCreateInput: CompanyCreateInputInputObject
      ProductCreateManyWithoutCompanyInput: ProductCreateManyWithoutCompanyInputInputObject
      ProductCreateWithoutCompanyInput: ProductCreateWithoutCompanyInputInputObject
      CompanyUpdateInput: CompanyUpdateInputInputObject
      ProductUpdateManyWithoutCompanyInput: ProductUpdateManyWithoutCompanyInputInputObject
      ProductUpdateWithWhereUniqueWithoutCompanyInput: ProductUpdateWithWhereUniqueWithoutCompanyInputInputObject
      ProductUpdateWithoutCompanyDataInput: ProductUpdateWithoutCompanyDataInputInputObject
      ProductUpsertWithWhereUniqueWithoutCompanyInput: ProductUpsertWithWhereUniqueWithoutCompanyInputInputObject
      CompanyUpdateManyMutationInput: CompanyUpdateManyMutationInputInputObject
      CategoryCreateInput: CategoryCreateInputInputObject
      CategoryUpdateInput: CategoryUpdateInputInputObject
      CategoryUpdateManyMutationInput: CategoryUpdateManyMutationInputInputObject
      SubCategoryCreateInput: SubCategoryCreateInputInputObject
      SubCategoryUpdateInput: SubCategoryUpdateInputInputObject
      SubCategoryUpdateManyMutationInput: SubCategoryUpdateManyMutationInputInputObject
      FriendRequestCreateInput: FriendRequestCreateInputInputObject
      UserCreateManyWithoutFriendRequestInput: UserCreateManyWithoutFriendRequestInputInputObject
      UserCreateWithoutFriendRequestInput: UserCreateWithoutFriendRequestInputInputObject
      FriendRequestUpdateInput: FriendRequestUpdateInputInputObject
      UserUpdateManyWithoutFriendRequestInput: UserUpdateManyWithoutFriendRequestInputInputObject
      UserUpdateWithWhereUniqueWithoutFriendRequestInput: UserUpdateWithWhereUniqueWithoutFriendRequestInputInputObject
      UserUpdateWithoutFriendRequestDataInput: UserUpdateWithoutFriendRequestDataInputInputObject
      UserUpsertWithWhereUniqueWithoutFriendRequestInput: UserUpsertWithWhereUniqueWithoutFriendRequestInputInputObject
      FriendRequestUpdateManyMutationInput: FriendRequestUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      ProductSubscriptionWhereInput: ProductSubscriptionWhereInputInputObject
      CheckinSubscriptionWhereInput: CheckinSubscriptionWhereInputInputObject
      CompanySubscriptionWhereInput: CompanySubscriptionWhereInputInputObject
      CategorySubscriptionWhereInput: CategorySubscriptionWhereInputInputObject
      SubCategorySubscriptionWhereInput: SubCategorySubscriptionWhereInputInputObject
      FriendRequestSubscriptionWhereInput: FriendRequestSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    CheckinOrderByInput: CheckinOrderByInputValues,
    ProductOrderByInput: ProductOrderByInputValues,
    CategoryOrderByInput: CategoryOrderByInputValues,
    SubCategoryOrderByInput: SubCategoryOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    FriendRequestOrderByInput: FriendRequestOrderByInputValues,
    CompanyOrderByInput: CompanyOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'product', args?: QueryProductArgs[] | false, alias?: string  } 
  | { name: 'products', args?: QueryProductsArgs[] | false, alias?: string  } 
  | { name: 'productsConnection', args?: QueryProductsConnectionArgs[] | false, alias?: string  } 
  | { name: 'checkin', args?: QueryCheckinArgs[] | false, alias?: string  } 
  | { name: 'checkins', args?: QueryCheckinsArgs[] | false, alias?: string  } 
  | { name: 'checkinsConnection', args?: QueryCheckinsConnectionArgs[] | false, alias?: string  } 
  | { name: 'company', args?: QueryCompanyArgs[] | false, alias?: string  } 
  | { name: 'companies', args?: QueryCompaniesArgs[] | false, alias?: string  } 
  | { name: 'companiesConnection', args?: QueryCompaniesConnectionArgs[] | false, alias?: string  } 
  | { name: 'category', args?: QueryCategoryArgs[] | false, alias?: string  } 
  | { name: 'categories', args?: QueryCategoriesArgs[] | false, alias?: string  } 
  | { name: 'categoriesConnection', args?: QueryCategoriesConnectionArgs[] | false, alias?: string  } 
  | { name: 'subCategory', args?: QuerySubCategoryArgs[] | false, alias?: string  } 
  | { name: 'subCategories', args?: QuerySubCategoriesArgs[] | false, alias?: string  } 
  | { name: 'subCategoriesConnection', args?: QuerySubCategoriesConnectionArgs[] | false, alias?: string  } 
  | { name: 'friendRequest', args?: QueryFriendRequestArgs[] | false, alias?: string  } 
  | { name: 'friendRequests', args?: QueryFriendRequestsArgs[] | false, alias?: string  } 
  | { name: 'friendRequestsConnection', args?: QueryFriendRequestsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'product'
  | 'products'
  | 'productsConnection'
  | 'checkin'
  | 'checkins'
  | 'checkinsConnection'
  | 'company'
  | 'companies'
  | 'companiesConnection'
  | 'category'
  | 'categories'
  | 'categoriesConnection'
  | 'subCategory'
  | 'subCategories'
  | 'subCategoriesConnection'
  | 'friendRequest'
  | 'friendRequests'
  | 'friendRequestsConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProductArgs =
  | 'where'
type QueryProductsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProductsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCheckinArgs =
  | 'where'
type QueryCheckinsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCheckinsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCompanyArgs =
  | 'where'
type QueryCompaniesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCompaniesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCategoryArgs =
  | 'where'
type QueryCategoriesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCategoriesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySubCategoryArgs =
  | 'where'
type QuerySubCategoriesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySubCategoriesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFriendRequestArgs =
  | 'where'
type QueryFriendRequestsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFriendRequestsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  product: {
    type: 'Product'
    args: Record<QueryProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProductWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product | null> | prisma.Product | null
  }
  products: {
    type: 'Product'
    args: Record<QueryProductsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProductWhereInput | null, orderBy?: prisma.ProductOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product[]> | prisma.Product[]
  }
  productsConnection: {
    type: 'ProductConnection'
    args: Record<QueryProductsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProductWhereInput | null, orderBy?: prisma.ProductOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductConnection> | prisma.ProductConnection
  }
  checkin: {
    type: 'Checkin'
    args: Record<QueryCheckinArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CheckinWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Checkin | null> | prisma.Checkin | null
  }
  checkins: {
    type: 'Checkin'
    args: Record<QueryCheckinsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CheckinWhereInput | null, orderBy?: prisma.CheckinOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Checkin[]> | prisma.Checkin[]
  }
  checkinsConnection: {
    type: 'CheckinConnection'
    args: Record<QueryCheckinsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CheckinWhereInput | null, orderBy?: prisma.CheckinOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CheckinConnection> | prisma.CheckinConnection
  }
  company: {
    type: 'Company'
    args: Record<QueryCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CompanyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
  companies: {
    type: 'Company'
    args: Record<QueryCompaniesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CompanyWhereInput | null, orderBy?: prisma.CompanyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company[]> | prisma.Company[]
  }
  companiesConnection: {
    type: 'CompanyConnection'
    args: Record<QueryCompaniesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CompanyWhereInput | null, orderBy?: prisma.CompanyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyConnection> | prisma.CompanyConnection
  }
  category: {
    type: 'Category'
    args: Record<QueryCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CategoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category | null> | prisma.Category | null
  }
  categories: {
    type: 'Category'
    args: Record<QueryCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CategoryWhereInput | null, orderBy?: prisma.CategoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category[]> | prisma.Category[]
  }
  categoriesConnection: {
    type: 'CategoryConnection'
    args: Record<QueryCategoriesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CategoryWhereInput | null, orderBy?: prisma.CategoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CategoryConnection> | prisma.CategoryConnection
  }
  subCategory: {
    type: 'SubCategory'
    args: Record<QuerySubCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: SubCategoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubCategory | null> | prisma.SubCategory | null
  }
  subCategories: {
    type: 'SubCategory'
    args: Record<QuerySubCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SubCategoryWhereInput | null, orderBy?: prisma.SubCategoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubCategory[]> | prisma.SubCategory[]
  }
  subCategoriesConnection: {
    type: 'SubCategoryConnection'
    args: Record<QuerySubCategoriesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SubCategoryWhereInput | null, orderBy?: prisma.SubCategoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubCategoryConnection> | prisma.SubCategoryConnection
  }
  friendRequest: {
    type: 'FriendRequest'
    args: Record<QueryFriendRequestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: FriendRequestWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FriendRequest | null> | prisma.FriendRequest | null
  }
  friendRequests: {
    type: 'FriendRequest'
    args: Record<QueryFriendRequestsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FriendRequestWhereInput | null, orderBy?: prisma.FriendRequestOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FriendRequest[]> | prisma.FriendRequest[]
  }
  friendRequestsConnection: {
    type: 'FriendRequestConnection'
    args: Record<QueryFriendRequestsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FriendRequestWhereInput | null, orderBy?: prisma.FriendRequestOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FriendRequestConnection> | prisma.FriendRequestConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'admin', args?: [] | false, alias?: string  } 
  | { name: 'avatarId', args?: [] | false, alias?: string  } 
  | { name: 'avatarColor', args?: [] | false, alias?: string  } 
  | { name: 'colorScheme', args?: [] | false, alias?: string  } 
  | { name: 'checkins', args?: UserCheckinsArgs[] | false, alias?: string  } 
  | { name: 'friends', args?: UserFriendsArgs[] | false, alias?: string  } 
  | { name: 'friendRequest', args?: UserFriendRequestArgs[] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'email'
  | 'firstName'
  | 'lastName'
  | 'password'
  | 'admin'
  | 'avatarId'
  | 'avatarColor'
  | 'colorScheme'
  | 'checkins'
  | 'friends'
  | 'friendRequest'
  | 'createdAt'
  | 'updatedAt'


type UserCheckinsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserFriendsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserFriendRequestArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  admin: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  avatarId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  avatarColor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  colorScheme: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  checkins: {
    type: 'Checkin'
    args: Record<UserCheckinsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: CheckinWhereInput | null, orderBy?: prisma.CheckinOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Checkin[]> | prisma.Checkin[]
  }
  friends: {
    type: 'User'
    args: Record<UserFriendsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  friendRequest: {
    type: 'FriendRequest'
    args: Record<UserFriendRequestArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: FriendRequestWhereInput | null, orderBy?: prisma.FriendRequestOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FriendRequest[]> | prisma.FriendRequest[]
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Checkin

type CheckinObject =
  | CheckinFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'rating', args?: [] | false, alias?: string  } 
  | { name: 'comment', args?: [] | false, alias?: string  } 
  | { name: 'image', args?: [] | false, alias?: string  } 
  | { name: 'author', args?: [] | false, alias?: string  } 
  | { name: 'product', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CheckinFields =
  | 'id'
  | 'rating'
  | 'comment'
  | 'image'
  | 'author'
  | 'product'
  | 'createdAt'
  | 'updatedAt'



  

export interface CheckinFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  rating: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  comment: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  image: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  author: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Checkin">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  product: {
    type: 'Product'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Checkin">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product> | prisma.Product
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Product

type ProductObject =
  | ProductFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'avatarId', args?: [] | false, alias?: string  } 
  | { name: 'checkins', args?: ProductCheckinsArgs[] | false, alias?: string  } 
  | { name: 'category', args?: ProductCategoryArgs[] | false, alias?: string  } 
  | { name: 'subCategory', args?: ProductSubCategoryArgs[] | false, alias?: string  } 
  | { name: 'imageId', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ProductFields =
  | 'id'
  | 'name'
  | 'company'
  | 'avatarId'
  | 'checkins'
  | 'category'
  | 'subCategory'
  | 'imageId'
  | 'createdAt'
  | 'updatedAt'


type ProductCheckinsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type ProductCategoryArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type ProductSubCategoryArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ProductFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Product">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  avatarId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  checkins: {
    type: 'Checkin'
    args: Record<ProductCheckinsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Product">,
      args: { where?: CheckinWhereInput | null, orderBy?: prisma.CheckinOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Checkin[]> | prisma.Checkin[]
  }
  category: {
    type: 'Category'
    args: Record<ProductCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Product">,
      args: { where?: CategoryWhereInput | null, orderBy?: prisma.CategoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category[]> | prisma.Category[]
  }
  subCategory: {
    type: 'SubCategory'
    args: Record<ProductSubCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Product">,
      args: { where?: SubCategoryWhereInput | null, orderBy?: prisma.SubCategoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubCategory[]> | prisma.SubCategory[]
  }
  imageId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Company

type CompanyObject =
  | CompanyFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'products', args?: CompanyProductsArgs[] | false, alias?: string  } 

type CompanyFields =
  | 'id'
  | 'name'
  | 'products'


type CompanyProductsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface CompanyFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  products: {
    type: 'Product'
    args: Record<CompanyProductsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Company">,
      args: { where?: ProductWhereInput | null, orderBy?: prisma.ProductOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product[]> | prisma.Product[]
  }
}
  

// Types for Category

type CategoryObject =
  | CategoryFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'color', args?: [] | false, alias?: string  } 
  | { name: 'subCategory', args?: CategorySubCategoryArgs[] | false, alias?: string  } 
  | { name: 'products', args?: CategoryProductsArgs[] | false, alias?: string  } 

type CategoryFields =
  | 'id'
  | 'name'
  | 'color'
  | 'subCategory'
  | 'products'


type CategorySubCategoryArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type CategoryProductsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface CategoryFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  color: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  subCategory: {
    type: 'SubCategory'
    args: Record<CategorySubCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Category">,
      args: { where?: SubCategoryWhereInput | null, orderBy?: prisma.SubCategoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubCategory[]> | prisma.SubCategory[]
  }
  products: {
    type: 'Product'
    args: Record<CategoryProductsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Category">,
      args: { where?: ProductWhereInput | null, orderBy?: prisma.ProductOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product[]> | prisma.Product[]
  }
}
  

// Types for SubCategory

type SubCategoryObject =
  | SubCategoryFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'category', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'products', args?: SubCategoryProductsArgs[] | false, alias?: string  } 

type SubCategoryFields =
  | 'id'
  | 'category'
  | 'name'
  | 'products'


type SubCategoryProductsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface SubCategoryFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  category: {
    type: 'Category'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubCategory">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category> | prisma.Category
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  products: {
    type: 'Product'
    args: Record<SubCategoryProductsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"SubCategory">,
      args: { where?: ProductWhereInput | null, orderBy?: prisma.ProductOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product[]> | prisma.Product[]
  }
}
  

// Types for FriendRequest

type FriendRequestObject =
  | FriendRequestFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'sender', args?: FriendRequestSenderArgs[] | false, alias?: string  } 
  | { name: 'receiver', args?: FriendRequestReceiverArgs[] | false, alias?: string  } 
  | { name: 'message', args?: [] | false, alias?: string  } 

type FriendRequestFields =
  | 'id'
  | 'sender'
  | 'receiver'
  | 'message'


type FriendRequestSenderArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type FriendRequestReceiverArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface FriendRequestFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  sender: {
    type: 'User'
    args: Record<FriendRequestSenderArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"FriendRequest">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  receiver: {
    type: 'User'
    args: Record<FriendRequestReceiverArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"FriendRequest">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  message: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProductConnection

type ProductConnectionObject =
  | ProductConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProductConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProductConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProductEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProductConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductEdge[]> | prisma.ProductEdge[]
  }
  aggregate: {
    type: 'AggregateProduct'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProduct> | prisma.AggregateProduct
  }
}
  

// Types for ProductEdge

type ProductEdgeObject =
  | ProductEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProductEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProductEdgeFieldDetails {
  node: {
    type: 'Product'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product> | prisma.Product
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProduct

type AggregateProductObject =
  | AggregateProductFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProductFields =
  | 'count'



  

export interface AggregateProductFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CheckinConnection

type CheckinConnectionObject =
  | CheckinConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CheckinConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CheckinConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CheckinConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CheckinEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CheckinConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CheckinEdge[]> | prisma.CheckinEdge[]
  }
  aggregate: {
    type: 'AggregateCheckin'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CheckinConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCheckin> | prisma.AggregateCheckin
  }
}
  

// Types for CheckinEdge

type CheckinEdgeObject =
  | CheckinEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CheckinEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CheckinEdgeFieldDetails {
  node: {
    type: 'Checkin'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CheckinEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Checkin> | prisma.Checkin
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCheckin

type AggregateCheckinObject =
  | AggregateCheckinFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCheckinFields =
  | 'count'



  

export interface AggregateCheckinFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CompanyConnection

type CompanyConnectionObject =
  | CompanyConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CompanyConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CompanyConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CompanyEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyEdge[]> | prisma.CompanyEdge[]
  }
  aggregate: {
    type: 'AggregateCompany'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCompany> | prisma.AggregateCompany
  }
}
  

// Types for CompanyEdge

type CompanyEdgeObject =
  | CompanyEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CompanyEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CompanyEdgeFieldDetails {
  node: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCompany

type AggregateCompanyObject =
  | AggregateCompanyFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCompanyFields =
  | 'count'



  

export interface AggregateCompanyFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CategoryConnection

type CategoryConnectionObject =
  | CategoryConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CategoryConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CategoryConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CategoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CategoryEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CategoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CategoryEdge[]> | prisma.CategoryEdge[]
  }
  aggregate: {
    type: 'AggregateCategory'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CategoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCategory> | prisma.AggregateCategory
  }
}
  

// Types for CategoryEdge

type CategoryEdgeObject =
  | CategoryEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CategoryEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CategoryEdgeFieldDetails {
  node: {
    type: 'Category'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CategoryEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category> | prisma.Category
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCategory

type AggregateCategoryObject =
  | AggregateCategoryFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCategoryFields =
  | 'count'



  

export interface AggregateCategoryFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SubCategoryConnection

type SubCategoryConnectionObject =
  | SubCategoryConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type SubCategoryConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface SubCategoryConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubCategoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'SubCategoryEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"SubCategoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubCategoryEdge[]> | prisma.SubCategoryEdge[]
  }
  aggregate: {
    type: 'AggregateSubCategory'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubCategoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateSubCategory> | prisma.AggregateSubCategory
  }
}
  

// Types for SubCategoryEdge

type SubCategoryEdgeObject =
  | SubCategoryEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type SubCategoryEdgeFields =
  | 'node'
  | 'cursor'



  

export interface SubCategoryEdgeFieldDetails {
  node: {
    type: 'SubCategory'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubCategoryEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubCategory> | prisma.SubCategory
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateSubCategory

type AggregateSubCategoryObject =
  | AggregateSubCategoryFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateSubCategoryFields =
  | 'count'



  

export interface AggregateSubCategoryFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FriendRequestConnection

type FriendRequestConnectionObject =
  | FriendRequestConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type FriendRequestConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface FriendRequestConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FriendRequestConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'FriendRequestEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"FriendRequestConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FriendRequestEdge[]> | prisma.FriendRequestEdge[]
  }
  aggregate: {
    type: 'AggregateFriendRequest'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FriendRequestConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateFriendRequest> | prisma.AggregateFriendRequest
  }
}
  

// Types for FriendRequestEdge

type FriendRequestEdgeObject =
  | FriendRequestEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type FriendRequestEdgeFields =
  | 'node'
  | 'cursor'



  

export interface FriendRequestEdgeFieldDetails {
  node: {
    type: 'FriendRequest'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FriendRequestEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FriendRequest> | prisma.FriendRequest
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateFriendRequest

type AggregateFriendRequestObject =
  | AggregateFriendRequestFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateFriendRequestFields =
  | 'count'



  

export interface AggregateFriendRequestFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createProduct', args?: MutationCreateProductArgs[] | false, alias?: string  } 
  | { name: 'updateProduct', args?: MutationUpdateProductArgs[] | false, alias?: string  } 
  | { name: 'updateManyProducts', args?: MutationUpdateManyProductsArgs[] | false, alias?: string  } 
  | { name: 'upsertProduct', args?: MutationUpsertProductArgs[] | false, alias?: string  } 
  | { name: 'deleteProduct', args?: MutationDeleteProductArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProducts', args?: MutationDeleteManyProductsArgs[] | false, alias?: string  } 
  | { name: 'createCheckin', args?: MutationCreateCheckinArgs[] | false, alias?: string  } 
  | { name: 'updateCheckin', args?: MutationUpdateCheckinArgs[] | false, alias?: string  } 
  | { name: 'updateManyCheckins', args?: MutationUpdateManyCheckinsArgs[] | false, alias?: string  } 
  | { name: 'upsertCheckin', args?: MutationUpsertCheckinArgs[] | false, alias?: string  } 
  | { name: 'deleteCheckin', args?: MutationDeleteCheckinArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCheckins', args?: MutationDeleteManyCheckinsArgs[] | false, alias?: string  } 
  | { name: 'createCompany', args?: MutationCreateCompanyArgs[] | false, alias?: string  } 
  | { name: 'updateCompany', args?: MutationUpdateCompanyArgs[] | false, alias?: string  } 
  | { name: 'updateManyCompanies', args?: MutationUpdateManyCompaniesArgs[] | false, alias?: string  } 
  | { name: 'upsertCompany', args?: MutationUpsertCompanyArgs[] | false, alias?: string  } 
  | { name: 'deleteCompany', args?: MutationDeleteCompanyArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCompanies', args?: MutationDeleteManyCompaniesArgs[] | false, alias?: string  } 
  | { name: 'createCategory', args?: MutationCreateCategoryArgs[] | false, alias?: string  } 
  | { name: 'updateCategory', args?: MutationUpdateCategoryArgs[] | false, alias?: string  } 
  | { name: 'updateManyCategories', args?: MutationUpdateManyCategoriesArgs[] | false, alias?: string  } 
  | { name: 'upsertCategory', args?: MutationUpsertCategoryArgs[] | false, alias?: string  } 
  | { name: 'deleteCategory', args?: MutationDeleteCategoryArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCategories', args?: MutationDeleteManyCategoriesArgs[] | false, alias?: string  } 
  | { name: 'createSubCategory', args?: MutationCreateSubCategoryArgs[] | false, alias?: string  } 
  | { name: 'updateSubCategory', args?: MutationUpdateSubCategoryArgs[] | false, alias?: string  } 
  | { name: 'updateManySubCategories', args?: MutationUpdateManySubCategoriesArgs[] | false, alias?: string  } 
  | { name: 'upsertSubCategory', args?: MutationUpsertSubCategoryArgs[] | false, alias?: string  } 
  | { name: 'deleteSubCategory', args?: MutationDeleteSubCategoryArgs[] | false, alias?: string  } 
  | { name: 'deleteManySubCategories', args?: MutationDeleteManySubCategoriesArgs[] | false, alias?: string  } 
  | { name: 'createFriendRequest', args?: MutationCreateFriendRequestArgs[] | false, alias?: string  } 
  | { name: 'updateFriendRequest', args?: MutationUpdateFriendRequestArgs[] | false, alias?: string  } 
  | { name: 'updateManyFriendRequests', args?: MutationUpdateManyFriendRequestsArgs[] | false, alias?: string  } 
  | { name: 'upsertFriendRequest', args?: MutationUpsertFriendRequestArgs[] | false, alias?: string  } 
  | { name: 'deleteFriendRequest', args?: MutationDeleteFriendRequestArgs[] | false, alias?: string  } 
  | { name: 'deleteManyFriendRequests', args?: MutationDeleteManyFriendRequestsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createProduct'
  | 'updateProduct'
  | 'updateManyProducts'
  | 'upsertProduct'
  | 'deleteProduct'
  | 'deleteManyProducts'
  | 'createCheckin'
  | 'updateCheckin'
  | 'updateManyCheckins'
  | 'upsertCheckin'
  | 'deleteCheckin'
  | 'deleteManyCheckins'
  | 'createCompany'
  | 'updateCompany'
  | 'updateManyCompanies'
  | 'upsertCompany'
  | 'deleteCompany'
  | 'deleteManyCompanies'
  | 'createCategory'
  | 'updateCategory'
  | 'updateManyCategories'
  | 'upsertCategory'
  | 'deleteCategory'
  | 'deleteManyCategories'
  | 'createSubCategory'
  | 'updateSubCategory'
  | 'updateManySubCategories'
  | 'upsertSubCategory'
  | 'deleteSubCategory'
  | 'deleteManySubCategories'
  | 'createFriendRequest'
  | 'updateFriendRequest'
  | 'updateManyFriendRequests'
  | 'upsertFriendRequest'
  | 'deleteFriendRequest'
  | 'deleteManyFriendRequests'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateProductArgs =
  | 'data'
type MutationUpdateProductArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProductsArgs =
  | 'data'
  | 'where'
type MutationUpsertProductArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProductArgs =
  | 'where'
type MutationDeleteManyProductsArgs =
  | 'where'
type MutationCreateCheckinArgs =
  | 'data'
type MutationUpdateCheckinArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCheckinsArgs =
  | 'data'
  | 'where'
type MutationUpsertCheckinArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCheckinArgs =
  | 'where'
type MutationDeleteManyCheckinsArgs =
  | 'where'
type MutationCreateCompanyArgs =
  | 'data'
type MutationUpdateCompanyArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCompaniesArgs =
  | 'data'
  | 'where'
type MutationUpsertCompanyArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCompanyArgs =
  | 'where'
type MutationDeleteManyCompaniesArgs =
  | 'where'
type MutationCreateCategoryArgs =
  | 'data'
type MutationUpdateCategoryArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCategoriesArgs =
  | 'data'
  | 'where'
type MutationUpsertCategoryArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCategoryArgs =
  | 'where'
type MutationDeleteManyCategoriesArgs =
  | 'where'
type MutationCreateSubCategoryArgs =
  | 'data'
type MutationUpdateSubCategoryArgs =
  | 'data'
  | 'where'
type MutationUpdateManySubCategoriesArgs =
  | 'data'
  | 'where'
type MutationUpsertSubCategoryArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteSubCategoryArgs =
  | 'where'
type MutationDeleteManySubCategoriesArgs =
  | 'where'
type MutationCreateFriendRequestArgs =
  | 'data'
type MutationUpdateFriendRequestArgs =
  | 'data'
  | 'where'
type MutationUpdateManyFriendRequestsArgs =
  | 'data'
  | 'where'
type MutationUpsertFriendRequestArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteFriendRequestArgs =
  | 'where'
type MutationDeleteManyFriendRequestsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProduct: {
    type: 'Product'
    args: Record<MutationCreateProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product> | prisma.Product
  }
  updateProduct: {
    type: 'Product'
    args: Record<MutationUpdateProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductUpdateInput, where: ProductWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product | null> | prisma.Product | null
  }
  updateManyProducts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProductsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductUpdateManyMutationInput, where?: ProductWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProduct: {
    type: 'Product'
    args: Record<MutationUpsertProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProductWhereUniqueInput, create: ProductCreateInput, update: ProductUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product> | prisma.Product
  }
  deleteProduct: {
    type: 'Product'
    args: Record<MutationDeleteProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProductWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product | null> | prisma.Product | null
  }
  deleteManyProducts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProductsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProductWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCheckin: {
    type: 'Checkin'
    args: Record<MutationCreateCheckinArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CheckinCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Checkin> | prisma.Checkin
  }
  updateCheckin: {
    type: 'Checkin'
    args: Record<MutationUpdateCheckinArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CheckinUpdateInput, where: CheckinWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Checkin | null> | prisma.Checkin | null
  }
  updateManyCheckins: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCheckinsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CheckinUpdateManyMutationInput, where?: CheckinWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCheckin: {
    type: 'Checkin'
    args: Record<MutationUpsertCheckinArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CheckinWhereUniqueInput, create: CheckinCreateInput, update: CheckinUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Checkin> | prisma.Checkin
  }
  deleteCheckin: {
    type: 'Checkin'
    args: Record<MutationDeleteCheckinArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CheckinWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Checkin | null> | prisma.Checkin | null
  }
  deleteManyCheckins: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCheckinsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CheckinWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCompany: {
    type: 'Company'
    args: Record<MutationCreateCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CompanyCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  updateCompany: {
    type: 'Company'
    args: Record<MutationUpdateCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CompanyUpdateInput, where: CompanyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
  updateManyCompanies: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCompaniesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CompanyUpdateManyMutationInput, where?: CompanyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCompany: {
    type: 'Company'
    args: Record<MutationUpsertCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CompanyWhereUniqueInput, create: CompanyCreateInput, update: CompanyUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  deleteCompany: {
    type: 'Company'
    args: Record<MutationDeleteCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CompanyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
  deleteManyCompanies: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCompaniesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CompanyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCategory: {
    type: 'Category'
    args: Record<MutationCreateCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CategoryCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category> | prisma.Category
  }
  updateCategory: {
    type: 'Category'
    args: Record<MutationUpdateCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CategoryUpdateInput, where: CategoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category | null> | prisma.Category | null
  }
  updateManyCategories: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CategoryUpdateManyMutationInput, where?: CategoryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCategory: {
    type: 'Category'
    args: Record<MutationUpsertCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CategoryWhereUniqueInput, create: CategoryCreateInput, update: CategoryUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category> | prisma.Category
  }
  deleteCategory: {
    type: 'Category'
    args: Record<MutationDeleteCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CategoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category | null> | prisma.Category | null
  }
  deleteManyCategories: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CategoryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createSubCategory: {
    type: 'SubCategory'
    args: Record<MutationCreateSubCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SubCategoryCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubCategory> | prisma.SubCategory
  }
  updateSubCategory: {
    type: 'SubCategory'
    args: Record<MutationUpdateSubCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SubCategoryUpdateInput, where: SubCategoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubCategory | null> | prisma.SubCategory | null
  }
  updateManySubCategories: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManySubCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SubCategoryUpdateManyMutationInput, where?: SubCategoryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertSubCategory: {
    type: 'SubCategory'
    args: Record<MutationUpsertSubCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SubCategoryWhereUniqueInput, create: SubCategoryCreateInput, update: SubCategoryUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubCategory> | prisma.SubCategory
  }
  deleteSubCategory: {
    type: 'SubCategory'
    args: Record<MutationDeleteSubCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SubCategoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubCategory | null> | prisma.SubCategory | null
  }
  deleteManySubCategories: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManySubCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: SubCategoryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createFriendRequest: {
    type: 'FriendRequest'
    args: Record<MutationCreateFriendRequestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FriendRequestCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FriendRequest> | prisma.FriendRequest
  }
  updateFriendRequest: {
    type: 'FriendRequest'
    args: Record<MutationUpdateFriendRequestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FriendRequestUpdateInput, where: FriendRequestWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FriendRequest | null> | prisma.FriendRequest | null
  }
  updateManyFriendRequests: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyFriendRequestsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FriendRequestUpdateManyMutationInput, where?: FriendRequestWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertFriendRequest: {
    type: 'FriendRequest'
    args: Record<MutationUpsertFriendRequestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FriendRequestWhereUniqueInput, create: FriendRequestCreateInput, update: FriendRequestUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FriendRequest> | prisma.FriendRequest
  }
  deleteFriendRequest: {
    type: 'FriendRequest'
    args: Record<MutationDeleteFriendRequestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FriendRequestWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FriendRequest | null> | prisma.FriendRequest | null
  }
  deleteManyFriendRequests: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyFriendRequestsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: FriendRequestWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'product', args?: SubscriptionProductArgs[] | false, alias?: string  } 
  | { name: 'checkin', args?: SubscriptionCheckinArgs[] | false, alias?: string  } 
  | { name: 'company', args?: SubscriptionCompanyArgs[] | false, alias?: string  } 
  | { name: 'category', args?: SubscriptionCategoryArgs[] | false, alias?: string  } 
  | { name: 'subCategory', args?: SubscriptionSubCategoryArgs[] | false, alias?: string  } 
  | { name: 'friendRequest', args?: SubscriptionFriendRequestArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'product'
  | 'checkin'
  | 'company'
  | 'category'
  | 'subCategory'
  | 'friendRequest'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionProductArgs =
  | 'where'
type SubscriptionCheckinArgs =
  | 'where'
type SubscriptionCompanyArgs =
  | 'where'
type SubscriptionCategoryArgs =
  | 'where'
type SubscriptionSubCategoryArgs =
  | 'where'
type SubscriptionFriendRequestArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  product: {
    type: 'ProductSubscriptionPayload'
    args: Record<SubscriptionProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProductSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductSubscriptionPayload | null> | prisma.ProductSubscriptionPayload | null
  }
  checkin: {
    type: 'CheckinSubscriptionPayload'
    args: Record<SubscriptionCheckinArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CheckinSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CheckinSubscriptionPayload | null> | prisma.CheckinSubscriptionPayload | null
  }
  company: {
    type: 'CompanySubscriptionPayload'
    args: Record<SubscriptionCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CompanySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanySubscriptionPayload | null> | prisma.CompanySubscriptionPayload | null
  }
  category: {
    type: 'CategorySubscriptionPayload'
    args: Record<SubscriptionCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CategorySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CategorySubscriptionPayload | null> | prisma.CategorySubscriptionPayload | null
  }
  subCategory: {
    type: 'SubCategorySubscriptionPayload'
    args: Record<SubscriptionSubCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: SubCategorySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubCategorySubscriptionPayload | null> | prisma.SubCategorySubscriptionPayload | null
  }
  friendRequest: {
    type: 'FriendRequestSubscriptionPayload'
    args: Record<SubscriptionFriendRequestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: FriendRequestSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FriendRequestSubscriptionPayload | null> | prisma.FriendRequestSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'admin', args?: [] | false, alias?: string  } 
  | { name: 'avatarId', args?: [] | false, alias?: string  } 
  | { name: 'avatarColor', args?: [] | false, alias?: string  } 
  | { name: 'colorScheme', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'email'
  | 'firstName'
  | 'lastName'
  | 'password'
  | 'admin'
  | 'avatarId'
  | 'avatarColor'
  | 'colorScheme'
  | 'createdAt'
  | 'updatedAt'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  admin: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  avatarId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  avatarColor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  colorScheme: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProductSubscriptionPayload

type ProductSubscriptionPayloadObject =
  | ProductSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProductSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProductSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Product'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProductSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product | null> | prisma.Product | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProductPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProductSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductPreviousValues | null> | prisma.ProductPreviousValues | null
  }
}
  

// Types for ProductPreviousValues

type ProductPreviousValuesObject =
  | ProductPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'avatarId', args?: [] | false, alias?: string  } 
  | { name: 'imageId', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ProductPreviousValuesFields =
  | 'id'
  | 'name'
  | 'avatarId'
  | 'imageId'
  | 'createdAt'
  | 'updatedAt'



  

export interface ProductPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  avatarId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  imageId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CheckinSubscriptionPayload

type CheckinSubscriptionPayloadObject =
  | CheckinSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CheckinSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CheckinSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CheckinSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Checkin'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CheckinSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Checkin | null> | prisma.Checkin | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CheckinPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CheckinSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CheckinPreviousValues | null> | prisma.CheckinPreviousValues | null
  }
}
  

// Types for CheckinPreviousValues

type CheckinPreviousValuesObject =
  | CheckinPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'rating', args?: [] | false, alias?: string  } 
  | { name: 'comment', args?: [] | false, alias?: string  } 
  | { name: 'image', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CheckinPreviousValuesFields =
  | 'id'
  | 'rating'
  | 'comment'
  | 'image'
  | 'createdAt'
  | 'updatedAt'



  

export interface CheckinPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  rating: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  comment: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  image: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CompanySubscriptionPayload

type CompanySubscriptionPayloadObject =
  | CompanySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CompanySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CompanySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CompanySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CompanyPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CompanySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyPreviousValues | null> | prisma.CompanyPreviousValues | null
  }
}
  

// Types for CompanyPreviousValues

type CompanyPreviousValuesObject =
  | CompanyPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type CompanyPreviousValuesFields =
  | 'id'
  | 'name'



  

export interface CompanyPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CategorySubscriptionPayload

type CategorySubscriptionPayloadObject =
  | CategorySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CategorySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CategorySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CategorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Category'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CategorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category | null> | prisma.Category | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CategoryPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CategorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CategoryPreviousValues | null> | prisma.CategoryPreviousValues | null
  }
}
  

// Types for CategoryPreviousValues

type CategoryPreviousValuesObject =
  | CategoryPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'color', args?: [] | false, alias?: string  } 

type CategoryPreviousValuesFields =
  | 'id'
  | 'name'
  | 'color'



  

export interface CategoryPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  color: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for SubCategorySubscriptionPayload

type SubCategorySubscriptionPayloadObject =
  | SubCategorySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type SubCategorySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface SubCategorySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubCategorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'SubCategory'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SubCategorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubCategory | null> | prisma.SubCategory | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'SubCategoryPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SubCategorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubCategoryPreviousValues | null> | prisma.SubCategoryPreviousValues | null
  }
}
  

// Types for SubCategoryPreviousValues

type SubCategoryPreviousValuesObject =
  | SubCategoryPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type SubCategoryPreviousValuesFields =
  | 'id'
  | 'name'



  

export interface SubCategoryPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FriendRequestSubscriptionPayload

type FriendRequestSubscriptionPayloadObject =
  | FriendRequestSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type FriendRequestSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface FriendRequestSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FriendRequestSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'FriendRequest'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FriendRequestSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FriendRequest | null> | prisma.FriendRequest | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'FriendRequestPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FriendRequestSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FriendRequestPreviousValues | null> | prisma.FriendRequestPreviousValues | null
  }
}
  

// Types for FriendRequestPreviousValues

type FriendRequestPreviousValuesObject =
  | FriendRequestPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'message', args?: [] | false, alias?: string  } 

type FriendRequestPreviousValuesFields =
  | 'id'
  | 'message'



  

export interface FriendRequestPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  message: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface CheckinWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  rating?: number | null
  rating_not?: number | null
  rating_in?: number[]
  rating_not_in?: number[]
  rating_lt?: number | null
  rating_lte?: number | null
  rating_gt?: number | null
  rating_gte?: number | null
  comment?: string | null
  comment_not?: string | null
  comment_in?: string[]
  comment_not_in?: string[]
  comment_lt?: string | null
  comment_lte?: string | null
  comment_gt?: string | null
  comment_gte?: string | null
  comment_contains?: string | null
  comment_not_contains?: string | null
  comment_starts_with?: string | null
  comment_not_starts_with?: string | null
  comment_ends_with?: string | null
  comment_not_ends_with?: string | null
  image?: string | null
  image_not?: string | null
  image_in?: string[]
  image_not_in?: string[]
  image_lt?: string | null
  image_lte?: string | null
  image_gt?: string | null
  image_gte?: string | null
  image_contains?: string | null
  image_not_contains?: string | null
  image_starts_with?: string | null
  image_not_starts_with?: string | null
  image_ends_with?: string | null
  image_not_ends_with?: string | null
  author?: UserWhereInput | null
  product?: ProductWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: CheckinWhereInput[]
  OR?: CheckinWhereInput[]
  NOT?: CheckinWhereInput[]
}
export type CheckinWhereInputInputObject =
  | Extract<keyof CheckinWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'rating_not', alias?: string  } 
  | { name: 'rating_in', alias?: string  } 
  | { name: 'rating_not_in', alias?: string  } 
  | { name: 'rating_lt', alias?: string  } 
  | { name: 'rating_lte', alias?: string  } 
  | { name: 'rating_gt', alias?: string  } 
  | { name: 'rating_gte', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'comment_not', alias?: string  } 
  | { name: 'comment_in', alias?: string  } 
  | { name: 'comment_not_in', alias?: string  } 
  | { name: 'comment_lt', alias?: string  } 
  | { name: 'comment_lte', alias?: string  } 
  | { name: 'comment_gt', alias?: string  } 
  | { name: 'comment_gte', alias?: string  } 
  | { name: 'comment_contains', alias?: string  } 
  | { name: 'comment_not_contains', alias?: string  } 
  | { name: 'comment_starts_with', alias?: string  } 
  | { name: 'comment_not_starts_with', alias?: string  } 
  | { name: 'comment_ends_with', alias?: string  } 
  | { name: 'comment_not_ends_with', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'image_not', alias?: string  } 
  | { name: 'image_in', alias?: string  } 
  | { name: 'image_not_in', alias?: string  } 
  | { name: 'image_lt', alias?: string  } 
  | { name: 'image_lte', alias?: string  } 
  | { name: 'image_gt', alias?: string  } 
  | { name: 'image_gte', alias?: string  } 
  | { name: 'image_contains', alias?: string  } 
  | { name: 'image_not_contains', alias?: string  } 
  | { name: 'image_starts_with', alias?: string  } 
  | { name: 'image_not_starts_with', alias?: string  } 
  | { name: 'image_ends_with', alias?: string  } 
  | { name: 'image_not_ends_with', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'product', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  firstName?: string | null
  firstName_not?: string | null
  firstName_in?: string[]
  firstName_not_in?: string[]
  firstName_lt?: string | null
  firstName_lte?: string | null
  firstName_gt?: string | null
  firstName_gte?: string | null
  firstName_contains?: string | null
  firstName_not_contains?: string | null
  firstName_starts_with?: string | null
  firstName_not_starts_with?: string | null
  firstName_ends_with?: string | null
  firstName_not_ends_with?: string | null
  lastName?: string | null
  lastName_not?: string | null
  lastName_in?: string[]
  lastName_not_in?: string[]
  lastName_lt?: string | null
  lastName_lte?: string | null
  lastName_gt?: string | null
  lastName_gte?: string | null
  lastName_contains?: string | null
  lastName_not_contains?: string | null
  lastName_starts_with?: string | null
  lastName_not_starts_with?: string | null
  lastName_ends_with?: string | null
  lastName_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  admin?: boolean | null
  admin_not?: boolean | null
  avatarId?: string | null
  avatarId_not?: string | null
  avatarId_in?: string[]
  avatarId_not_in?: string[]
  avatarId_lt?: string | null
  avatarId_lte?: string | null
  avatarId_gt?: string | null
  avatarId_gte?: string | null
  avatarId_contains?: string | null
  avatarId_not_contains?: string | null
  avatarId_starts_with?: string | null
  avatarId_not_starts_with?: string | null
  avatarId_ends_with?: string | null
  avatarId_not_ends_with?: string | null
  avatarColor?: string | null
  avatarColor_not?: string | null
  avatarColor_in?: string[]
  avatarColor_not_in?: string[]
  avatarColor_lt?: string | null
  avatarColor_lte?: string | null
  avatarColor_gt?: string | null
  avatarColor_gte?: string | null
  avatarColor_contains?: string | null
  avatarColor_not_contains?: string | null
  avatarColor_starts_with?: string | null
  avatarColor_not_starts_with?: string | null
  avatarColor_ends_with?: string | null
  avatarColor_not_ends_with?: string | null
  colorScheme?: number | null
  colorScheme_not?: number | null
  colorScheme_in?: number[]
  colorScheme_not_in?: number[]
  colorScheme_lt?: number | null
  colorScheme_lte?: number | null
  colorScheme_gt?: number | null
  colorScheme_gte?: number | null
  checkins_every?: CheckinWhereInput | null
  checkins_some?: CheckinWhereInput | null
  checkins_none?: CheckinWhereInput | null
  friends_every?: UserWhereInput | null
  friends_some?: UserWhereInput | null
  friends_none?: UserWhereInput | null
  friendRequest_every?: FriendRequestWhereInput | null
  friendRequest_some?: FriendRequestWhereInput | null
  friendRequest_none?: FriendRequestWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'firstName_not', alias?: string  } 
  | { name: 'firstName_in', alias?: string  } 
  | { name: 'firstName_not_in', alias?: string  } 
  | { name: 'firstName_lt', alias?: string  } 
  | { name: 'firstName_lte', alias?: string  } 
  | { name: 'firstName_gt', alias?: string  } 
  | { name: 'firstName_gte', alias?: string  } 
  | { name: 'firstName_contains', alias?: string  } 
  | { name: 'firstName_not_contains', alias?: string  } 
  | { name: 'firstName_starts_with', alias?: string  } 
  | { name: 'firstName_not_starts_with', alias?: string  } 
  | { name: 'firstName_ends_with', alias?: string  } 
  | { name: 'firstName_not_ends_with', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'lastName_not', alias?: string  } 
  | { name: 'lastName_in', alias?: string  } 
  | { name: 'lastName_not_in', alias?: string  } 
  | { name: 'lastName_lt', alias?: string  } 
  | { name: 'lastName_lte', alias?: string  } 
  | { name: 'lastName_gt', alias?: string  } 
  | { name: 'lastName_gte', alias?: string  } 
  | { name: 'lastName_contains', alias?: string  } 
  | { name: 'lastName_not_contains', alias?: string  } 
  | { name: 'lastName_starts_with', alias?: string  } 
  | { name: 'lastName_not_starts_with', alias?: string  } 
  | { name: 'lastName_ends_with', alias?: string  } 
  | { name: 'lastName_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'admin', alias?: string  } 
  | { name: 'admin_not', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'avatarId_not', alias?: string  } 
  | { name: 'avatarId_in', alias?: string  } 
  | { name: 'avatarId_not_in', alias?: string  } 
  | { name: 'avatarId_lt', alias?: string  } 
  | { name: 'avatarId_lte', alias?: string  } 
  | { name: 'avatarId_gt', alias?: string  } 
  | { name: 'avatarId_gte', alias?: string  } 
  | { name: 'avatarId_contains', alias?: string  } 
  | { name: 'avatarId_not_contains', alias?: string  } 
  | { name: 'avatarId_starts_with', alias?: string  } 
  | { name: 'avatarId_not_starts_with', alias?: string  } 
  | { name: 'avatarId_ends_with', alias?: string  } 
  | { name: 'avatarId_not_ends_with', alias?: string  } 
  | { name: 'avatarColor', alias?: string  } 
  | { name: 'avatarColor_not', alias?: string  } 
  | { name: 'avatarColor_in', alias?: string  } 
  | { name: 'avatarColor_not_in', alias?: string  } 
  | { name: 'avatarColor_lt', alias?: string  } 
  | { name: 'avatarColor_lte', alias?: string  } 
  | { name: 'avatarColor_gt', alias?: string  } 
  | { name: 'avatarColor_gte', alias?: string  } 
  | { name: 'avatarColor_contains', alias?: string  } 
  | { name: 'avatarColor_not_contains', alias?: string  } 
  | { name: 'avatarColor_starts_with', alias?: string  } 
  | { name: 'avatarColor_not_starts_with', alias?: string  } 
  | { name: 'avatarColor_ends_with', alias?: string  } 
  | { name: 'avatarColor_not_ends_with', alias?: string  } 
  | { name: 'colorScheme', alias?: string  } 
  | { name: 'colorScheme_not', alias?: string  } 
  | { name: 'colorScheme_in', alias?: string  } 
  | { name: 'colorScheme_not_in', alias?: string  } 
  | { name: 'colorScheme_lt', alias?: string  } 
  | { name: 'colorScheme_lte', alias?: string  } 
  | { name: 'colorScheme_gt', alias?: string  } 
  | { name: 'colorScheme_gte', alias?: string  } 
  | { name: 'checkins_every', alias?: string  } 
  | { name: 'checkins_some', alias?: string  } 
  | { name: 'checkins_none', alias?: string  } 
  | { name: 'friends_every', alias?: string  } 
  | { name: 'friends_some', alias?: string  } 
  | { name: 'friends_none', alias?: string  } 
  | { name: 'friendRequest_every', alias?: string  } 
  | { name: 'friendRequest_some', alias?: string  } 
  | { name: 'friendRequest_none', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FriendRequestWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  sender_every?: UserWhereInput | null
  sender_some?: UserWhereInput | null
  sender_none?: UserWhereInput | null
  receiver_every?: UserWhereInput | null
  receiver_some?: UserWhereInput | null
  receiver_none?: UserWhereInput | null
  message?: string | null
  message_not?: string | null
  message_in?: string[]
  message_not_in?: string[]
  message_lt?: string | null
  message_lte?: string | null
  message_gt?: string | null
  message_gte?: string | null
  message_contains?: string | null
  message_not_contains?: string | null
  message_starts_with?: string | null
  message_not_starts_with?: string | null
  message_ends_with?: string | null
  message_not_ends_with?: string | null
  AND?: FriendRequestWhereInput[]
  OR?: FriendRequestWhereInput[]
  NOT?: FriendRequestWhereInput[]
}
export type FriendRequestWhereInputInputObject =
  | Extract<keyof FriendRequestWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'sender_every', alias?: string  } 
  | { name: 'sender_some', alias?: string  } 
  | { name: 'sender_none', alias?: string  } 
  | { name: 'receiver_every', alias?: string  } 
  | { name: 'receiver_some', alias?: string  } 
  | { name: 'receiver_none', alias?: string  } 
  | { name: 'message', alias?: string  } 
  | { name: 'message_not', alias?: string  } 
  | { name: 'message_in', alias?: string  } 
  | { name: 'message_not_in', alias?: string  } 
  | { name: 'message_lt', alias?: string  } 
  | { name: 'message_lte', alias?: string  } 
  | { name: 'message_gt', alias?: string  } 
  | { name: 'message_gte', alias?: string  } 
  | { name: 'message_contains', alias?: string  } 
  | { name: 'message_not_contains', alias?: string  } 
  | { name: 'message_starts_with', alias?: string  } 
  | { name: 'message_not_starts_with', alias?: string  } 
  | { name: 'message_ends_with', alias?: string  } 
  | { name: 'message_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProductWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  company?: CompanyWhereInput | null
  avatarId?: string | null
  avatarId_not?: string | null
  avatarId_in?: string[]
  avatarId_not_in?: string[]
  avatarId_lt?: string | null
  avatarId_lte?: string | null
  avatarId_gt?: string | null
  avatarId_gte?: string | null
  avatarId_contains?: string | null
  avatarId_not_contains?: string | null
  avatarId_starts_with?: string | null
  avatarId_not_starts_with?: string | null
  avatarId_ends_with?: string | null
  avatarId_not_ends_with?: string | null
  checkins_every?: CheckinWhereInput | null
  checkins_some?: CheckinWhereInput | null
  checkins_none?: CheckinWhereInput | null
  category_every?: CategoryWhereInput | null
  category_some?: CategoryWhereInput | null
  category_none?: CategoryWhereInput | null
  subCategory_every?: SubCategoryWhereInput | null
  subCategory_some?: SubCategoryWhereInput | null
  subCategory_none?: SubCategoryWhereInput | null
  imageId?: string | null
  imageId_not?: string | null
  imageId_in?: string[]
  imageId_not_in?: string[]
  imageId_lt?: string | null
  imageId_lte?: string | null
  imageId_gt?: string | null
  imageId_gte?: string | null
  imageId_contains?: string | null
  imageId_not_contains?: string | null
  imageId_starts_with?: string | null
  imageId_not_starts_with?: string | null
  imageId_ends_with?: string | null
  imageId_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ProductWhereInput[]
  OR?: ProductWhereInput[]
  NOT?: ProductWhereInput[]
}
export type ProductWhereInputInputObject =
  | Extract<keyof ProductWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'avatarId_not', alias?: string  } 
  | { name: 'avatarId_in', alias?: string  } 
  | { name: 'avatarId_not_in', alias?: string  } 
  | { name: 'avatarId_lt', alias?: string  } 
  | { name: 'avatarId_lte', alias?: string  } 
  | { name: 'avatarId_gt', alias?: string  } 
  | { name: 'avatarId_gte', alias?: string  } 
  | { name: 'avatarId_contains', alias?: string  } 
  | { name: 'avatarId_not_contains', alias?: string  } 
  | { name: 'avatarId_starts_with', alias?: string  } 
  | { name: 'avatarId_not_starts_with', alias?: string  } 
  | { name: 'avatarId_ends_with', alias?: string  } 
  | { name: 'avatarId_not_ends_with', alias?: string  } 
  | { name: 'checkins_every', alias?: string  } 
  | { name: 'checkins_some', alias?: string  } 
  | { name: 'checkins_none', alias?: string  } 
  | { name: 'category_every', alias?: string  } 
  | { name: 'category_some', alias?: string  } 
  | { name: 'category_none', alias?: string  } 
  | { name: 'subCategory_every', alias?: string  } 
  | { name: 'subCategory_some', alias?: string  } 
  | { name: 'subCategory_none', alias?: string  } 
  | { name: 'imageId', alias?: string  } 
  | { name: 'imageId_not', alias?: string  } 
  | { name: 'imageId_in', alias?: string  } 
  | { name: 'imageId_not_in', alias?: string  } 
  | { name: 'imageId_lt', alias?: string  } 
  | { name: 'imageId_lte', alias?: string  } 
  | { name: 'imageId_gt', alias?: string  } 
  | { name: 'imageId_gte', alias?: string  } 
  | { name: 'imageId_contains', alias?: string  } 
  | { name: 'imageId_not_contains', alias?: string  } 
  | { name: 'imageId_starts_with', alias?: string  } 
  | { name: 'imageId_not_starts_with', alias?: string  } 
  | { name: 'imageId_ends_with', alias?: string  } 
  | { name: 'imageId_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CompanyWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  products_every?: ProductWhereInput | null
  products_some?: ProductWhereInput | null
  products_none?: ProductWhereInput | null
  AND?: CompanyWhereInput[]
  OR?: CompanyWhereInput[]
  NOT?: CompanyWhereInput[]
}
export type CompanyWhereInputInputObject =
  | Extract<keyof CompanyWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'products_every', alias?: string  } 
  | { name: 'products_some', alias?: string  } 
  | { name: 'products_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CategoryWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  color?: string | null
  color_not?: string | null
  color_in?: string[]
  color_not_in?: string[]
  color_lt?: string | null
  color_lte?: string | null
  color_gt?: string | null
  color_gte?: string | null
  color_contains?: string | null
  color_not_contains?: string | null
  color_starts_with?: string | null
  color_not_starts_with?: string | null
  color_ends_with?: string | null
  color_not_ends_with?: string | null
  subCategory_every?: SubCategoryWhereInput | null
  subCategory_some?: SubCategoryWhereInput | null
  subCategory_none?: SubCategoryWhereInput | null
  products_every?: ProductWhereInput | null
  products_some?: ProductWhereInput | null
  products_none?: ProductWhereInput | null
  AND?: CategoryWhereInput[]
  OR?: CategoryWhereInput[]
  NOT?: CategoryWhereInput[]
}
export type CategoryWhereInputInputObject =
  | Extract<keyof CategoryWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'color', alias?: string  } 
  | { name: 'color_not', alias?: string  } 
  | { name: 'color_in', alias?: string  } 
  | { name: 'color_not_in', alias?: string  } 
  | { name: 'color_lt', alias?: string  } 
  | { name: 'color_lte', alias?: string  } 
  | { name: 'color_gt', alias?: string  } 
  | { name: 'color_gte', alias?: string  } 
  | { name: 'color_contains', alias?: string  } 
  | { name: 'color_not_contains', alias?: string  } 
  | { name: 'color_starts_with', alias?: string  } 
  | { name: 'color_not_starts_with', alias?: string  } 
  | { name: 'color_ends_with', alias?: string  } 
  | { name: 'color_not_ends_with', alias?: string  } 
  | { name: 'subCategory_every', alias?: string  } 
  | { name: 'subCategory_some', alias?: string  } 
  | { name: 'subCategory_none', alias?: string  } 
  | { name: 'products_every', alias?: string  } 
  | { name: 'products_some', alias?: string  } 
  | { name: 'products_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SubCategoryWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  category?: CategoryWhereInput | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  products_every?: ProductWhereInput | null
  products_some?: ProductWhereInput | null
  products_none?: ProductWhereInput | null
  AND?: SubCategoryWhereInput[]
  OR?: SubCategoryWhereInput[]
  NOT?: SubCategoryWhereInput[]
}
export type SubCategoryWhereInputInputObject =
  | Extract<keyof SubCategoryWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'products_every', alias?: string  } 
  | { name: 'products_some', alias?: string  } 
  | { name: 'products_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProductWhereUniqueInput {
  id?: string | null
}
export type ProductWhereUniqueInputInputObject =
  | Extract<keyof ProductWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CheckinWhereUniqueInput {
  id?: string | null
}
export type CheckinWhereUniqueInputInputObject =
  | Extract<keyof CheckinWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CompanyWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type CompanyWhereUniqueInputInputObject =
  | Extract<keyof CompanyWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface CategoryWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type CategoryWhereUniqueInputInputObject =
  | Extract<keyof CategoryWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface SubCategoryWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type SubCategoryWhereUniqueInputInputObject =
  | Extract<keyof SubCategoryWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface FriendRequestWhereUniqueInput {
  id?: string | null
}
export type FriendRequestWhereUniqueInputInputObject =
  | Extract<keyof FriendRequestWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  email?: string | null
  firstName?: string
  lastName?: string
  password?: string
  admin?: boolean
  avatarId?: string | null
  avatarColor?: string | null
  colorScheme?: number | null
  checkins?: CheckinCreateManyWithoutAuthorInput | null
  friends?: UserCreateManyInput | null
  friendRequest?: FriendRequestCreateManyWithoutReceiverInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'admin', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'avatarColor', alias?: string  } 
  | { name: 'colorScheme', alias?: string  } 
  | { name: 'checkins', alias?: string  } 
  | { name: 'friends', alias?: string  } 
  | { name: 'friendRequest', alias?: string  } 
  
export interface CheckinCreateManyWithoutAuthorInput {
  create?: CheckinCreateWithoutAuthorInput[]
  connect?: CheckinWhereUniqueInput[]
}
export type CheckinCreateManyWithoutAuthorInputInputObject =
  | Extract<keyof CheckinCreateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CheckinCreateWithoutAuthorInput {
  id?: string | null
  rating?: number
  comment?: string | null
  image?: string | null
  product?: ProductCreateOneWithoutCheckinsInput
}
export type CheckinCreateWithoutAuthorInputInputObject =
  | Extract<keyof CheckinCreateWithoutAuthorInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'product', alias?: string  } 
  
export interface ProductCreateOneWithoutCheckinsInput {
  create?: ProductCreateWithoutCheckinsInput | null
  connect?: ProductWhereUniqueInput | null
}
export type ProductCreateOneWithoutCheckinsInputInputObject =
  | Extract<keyof ProductCreateOneWithoutCheckinsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductCreateWithoutCheckinsInput {
  id?: string | null
  name?: string
  company?: CompanyCreateOneWithoutProductsInput
  avatarId?: string | null
  category?: CategoryCreateManyWithoutProductsInput | null
  subCategory?: SubCategoryCreateManyWithoutProductsInput | null
  imageId?: string | null
}
export type ProductCreateWithoutCheckinsInputInputObject =
  | Extract<keyof ProductCreateWithoutCheckinsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'subCategory', alias?: string  } 
  | { name: 'imageId', alias?: string  } 
  
export interface CompanyCreateOneWithoutProductsInput {
  create?: CompanyCreateWithoutProductsInput | null
  connect?: CompanyWhereUniqueInput | null
}
export type CompanyCreateOneWithoutProductsInputInputObject =
  | Extract<keyof CompanyCreateOneWithoutProductsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CompanyCreateWithoutProductsInput {
  id?: string | null
  name?: string
}
export type CompanyCreateWithoutProductsInputInputObject =
  | Extract<keyof CompanyCreateWithoutProductsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface CategoryCreateManyWithoutProductsInput {
  create?: CategoryCreateWithoutProductsInput[]
  connect?: CategoryWhereUniqueInput[]
}
export type CategoryCreateManyWithoutProductsInputInputObject =
  | Extract<keyof CategoryCreateManyWithoutProductsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CategoryCreateWithoutProductsInput {
  id?: string | null
  name?: string
  color?: string | null
  subCategory?: SubCategoryCreateManyWithoutCategoryInput | null
}
export type CategoryCreateWithoutProductsInputInputObject =
  | Extract<keyof CategoryCreateWithoutProductsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'color', alias?: string  } 
  | { name: 'subCategory', alias?: string  } 
  
export interface SubCategoryCreateManyWithoutCategoryInput {
  create?: SubCategoryCreateWithoutCategoryInput[]
  connect?: SubCategoryWhereUniqueInput[]
}
export type SubCategoryCreateManyWithoutCategoryInputInputObject =
  | Extract<keyof SubCategoryCreateManyWithoutCategoryInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SubCategoryCreateWithoutCategoryInput {
  id?: string | null
  name?: string
  products?: ProductCreateManyWithoutSubCategoryInput | null
}
export type SubCategoryCreateWithoutCategoryInputInputObject =
  | Extract<keyof SubCategoryCreateWithoutCategoryInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface ProductCreateManyWithoutSubCategoryInput {
  create?: ProductCreateWithoutSubCategoryInput[]
  connect?: ProductWhereUniqueInput[]
}
export type ProductCreateManyWithoutSubCategoryInputInputObject =
  | Extract<keyof ProductCreateManyWithoutSubCategoryInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductCreateWithoutSubCategoryInput {
  id?: string | null
  name?: string
  company?: CompanyCreateOneWithoutProductsInput
  avatarId?: string | null
  checkins?: CheckinCreateManyWithoutProductInput | null
  category?: CategoryCreateManyWithoutProductsInput | null
  imageId?: string | null
}
export type ProductCreateWithoutSubCategoryInputInputObject =
  | Extract<keyof ProductCreateWithoutSubCategoryInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'checkins', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'imageId', alias?: string  } 
  
export interface CheckinCreateManyWithoutProductInput {
  create?: CheckinCreateWithoutProductInput[]
  connect?: CheckinWhereUniqueInput[]
}
export type CheckinCreateManyWithoutProductInputInputObject =
  | Extract<keyof CheckinCreateManyWithoutProductInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CheckinCreateWithoutProductInput {
  id?: string | null
  rating?: number
  comment?: string | null
  image?: string | null
  author?: UserCreateOneWithoutCheckinsInput
}
export type CheckinCreateWithoutProductInputInputObject =
  | Extract<keyof CheckinCreateWithoutProductInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'author', alias?: string  } 
  
export interface UserCreateOneWithoutCheckinsInput {
  create?: UserCreateWithoutCheckinsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutCheckinsInputInputObject =
  | Extract<keyof UserCreateOneWithoutCheckinsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutCheckinsInput {
  id?: string | null
  email?: string | null
  firstName?: string
  lastName?: string
  password?: string
  admin?: boolean
  avatarId?: string | null
  avatarColor?: string | null
  colorScheme?: number | null
  friends?: UserCreateManyInput | null
  friendRequest?: FriendRequestCreateManyWithoutReceiverInput | null
}
export type UserCreateWithoutCheckinsInputInputObject =
  | Extract<keyof UserCreateWithoutCheckinsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'admin', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'avatarColor', alias?: string  } 
  | { name: 'colorScheme', alias?: string  } 
  | { name: 'friends', alias?: string  } 
  | { name: 'friendRequest', alias?: string  } 
  
export interface UserCreateManyInput {
  create?: UserCreateInput[]
  connect?: UserWhereUniqueInput[]
}
export type UserCreateManyInputInputObject =
  | Extract<keyof UserCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FriendRequestCreateManyWithoutReceiverInput {
  create?: FriendRequestCreateWithoutReceiverInput[]
  connect?: FriendRequestWhereUniqueInput[]
}
export type FriendRequestCreateManyWithoutReceiverInputInputObject =
  | Extract<keyof FriendRequestCreateManyWithoutReceiverInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FriendRequestCreateWithoutReceiverInput {
  id?: string | null
  sender?: UserCreateManyInput | null
  message?: string | null
}
export type FriendRequestCreateWithoutReceiverInputInputObject =
  | Extract<keyof FriendRequestCreateWithoutReceiverInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'sender', alias?: string  } 
  | { name: 'message', alias?: string  } 
  
export interface SubCategoryCreateManyWithoutProductsInput {
  create?: SubCategoryCreateWithoutProductsInput[]
  connect?: SubCategoryWhereUniqueInput[]
}
export type SubCategoryCreateManyWithoutProductsInputInputObject =
  | Extract<keyof SubCategoryCreateManyWithoutProductsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SubCategoryCreateWithoutProductsInput {
  id?: string | null
  category?: CategoryCreateOneWithoutSubCategoryInput
  name?: string
}
export type SubCategoryCreateWithoutProductsInputInputObject =
  | Extract<keyof SubCategoryCreateWithoutProductsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface CategoryCreateOneWithoutSubCategoryInput {
  create?: CategoryCreateWithoutSubCategoryInput | null
  connect?: CategoryWhereUniqueInput | null
}
export type CategoryCreateOneWithoutSubCategoryInputInputObject =
  | Extract<keyof CategoryCreateOneWithoutSubCategoryInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CategoryCreateWithoutSubCategoryInput {
  id?: string | null
  name?: string
  color?: string | null
  products?: ProductCreateManyWithoutCategoryInput | null
}
export type CategoryCreateWithoutSubCategoryInputInputObject =
  | Extract<keyof CategoryCreateWithoutSubCategoryInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'color', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface ProductCreateManyWithoutCategoryInput {
  create?: ProductCreateWithoutCategoryInput[]
  connect?: ProductWhereUniqueInput[]
}
export type ProductCreateManyWithoutCategoryInputInputObject =
  | Extract<keyof ProductCreateManyWithoutCategoryInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductCreateWithoutCategoryInput {
  id?: string | null
  name?: string
  company?: CompanyCreateOneWithoutProductsInput
  avatarId?: string | null
  checkins?: CheckinCreateManyWithoutProductInput | null
  subCategory?: SubCategoryCreateManyWithoutProductsInput | null
  imageId?: string | null
}
export type ProductCreateWithoutCategoryInputInputObject =
  | Extract<keyof ProductCreateWithoutCategoryInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'checkins', alias?: string  } 
  | { name: 'subCategory', alias?: string  } 
  | { name: 'imageId', alias?: string  } 
  
export interface UserUpdateInput {
  email?: string | null
  firstName?: string | null
  lastName?: string | null
  password?: string | null
  admin?: boolean | null
  avatarId?: string | null
  avatarColor?: string | null
  colorScheme?: number | null
  checkins?: CheckinUpdateManyWithoutAuthorInput | null
  friends?: UserUpdateManyInput | null
  friendRequest?: FriendRequestUpdateManyWithoutReceiverInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'admin', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'avatarColor', alias?: string  } 
  | { name: 'colorScheme', alias?: string  } 
  | { name: 'checkins', alias?: string  } 
  | { name: 'friends', alias?: string  } 
  | { name: 'friendRequest', alias?: string  } 
  
export interface CheckinUpdateManyWithoutAuthorInput {
  create?: CheckinCreateWithoutAuthorInput[]
  delete?: CheckinWhereUniqueInput[]
  connect?: CheckinWhereUniqueInput[]
  set?: CheckinWhereUniqueInput[]
  disconnect?: CheckinWhereUniqueInput[]
  update?: CheckinUpdateWithWhereUniqueWithoutAuthorInput[]
  upsert?: CheckinUpsertWithWhereUniqueWithoutAuthorInput[]
  deleteMany?: CheckinScalarWhereInput[]
  updateMany?: CheckinUpdateManyWithWhereNestedInput[]
}
export type CheckinUpdateManyWithoutAuthorInputInputObject =
  | Extract<keyof CheckinUpdateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CheckinUpdateWithWhereUniqueWithoutAuthorInput {
  where?: CheckinWhereUniqueInput
  data?: CheckinUpdateWithoutAuthorDataInput
}
export type CheckinUpdateWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof CheckinUpdateWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CheckinUpdateWithoutAuthorDataInput {
  rating?: number | null
  comment?: string | null
  image?: string | null
  product?: ProductUpdateOneRequiredWithoutCheckinsInput | null
}
export type CheckinUpdateWithoutAuthorDataInputInputObject =
  | Extract<keyof CheckinUpdateWithoutAuthorDataInput, string>
  | { name: 'rating', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'product', alias?: string  } 
  
export interface ProductUpdateOneRequiredWithoutCheckinsInput {
  create?: ProductCreateWithoutCheckinsInput | null
  update?: ProductUpdateWithoutCheckinsDataInput | null
  upsert?: ProductUpsertWithoutCheckinsInput | null
  connect?: ProductWhereUniqueInput | null
}
export type ProductUpdateOneRequiredWithoutCheckinsInputInputObject =
  | Extract<keyof ProductUpdateOneRequiredWithoutCheckinsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductUpdateWithoutCheckinsDataInput {
  name?: string | null
  company?: CompanyUpdateOneRequiredWithoutProductsInput | null
  avatarId?: string | null
  category?: CategoryUpdateManyWithoutProductsInput | null
  subCategory?: SubCategoryUpdateManyWithoutProductsInput | null
  imageId?: string | null
}
export type ProductUpdateWithoutCheckinsDataInputInputObject =
  | Extract<keyof ProductUpdateWithoutCheckinsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'subCategory', alias?: string  } 
  | { name: 'imageId', alias?: string  } 
  
export interface CompanyUpdateOneRequiredWithoutProductsInput {
  create?: CompanyCreateWithoutProductsInput | null
  update?: CompanyUpdateWithoutProductsDataInput | null
  upsert?: CompanyUpsertWithoutProductsInput | null
  connect?: CompanyWhereUniqueInput | null
}
export type CompanyUpdateOneRequiredWithoutProductsInputInputObject =
  | Extract<keyof CompanyUpdateOneRequiredWithoutProductsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CompanyUpdateWithoutProductsDataInput {
  name?: string | null
}
export type CompanyUpdateWithoutProductsDataInputInputObject =
  | Extract<keyof CompanyUpdateWithoutProductsDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface CompanyUpsertWithoutProductsInput {
  update?: CompanyUpdateWithoutProductsDataInput
  create?: CompanyCreateWithoutProductsInput
}
export type CompanyUpsertWithoutProductsInputInputObject =
  | Extract<keyof CompanyUpsertWithoutProductsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CategoryUpdateManyWithoutProductsInput {
  create?: CategoryCreateWithoutProductsInput[]
  delete?: CategoryWhereUniqueInput[]
  connect?: CategoryWhereUniqueInput[]
  set?: CategoryWhereUniqueInput[]
  disconnect?: CategoryWhereUniqueInput[]
  update?: CategoryUpdateWithWhereUniqueWithoutProductsInput[]
  upsert?: CategoryUpsertWithWhereUniqueWithoutProductsInput[]
  deleteMany?: CategoryScalarWhereInput[]
  updateMany?: CategoryUpdateManyWithWhereNestedInput[]
}
export type CategoryUpdateManyWithoutProductsInputInputObject =
  | Extract<keyof CategoryUpdateManyWithoutProductsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CategoryUpdateWithWhereUniqueWithoutProductsInput {
  where?: CategoryWhereUniqueInput
  data?: CategoryUpdateWithoutProductsDataInput
}
export type CategoryUpdateWithWhereUniqueWithoutProductsInputInputObject =
  | Extract<keyof CategoryUpdateWithWhereUniqueWithoutProductsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CategoryUpdateWithoutProductsDataInput {
  name?: string | null
  color?: string | null
  subCategory?: SubCategoryUpdateManyWithoutCategoryInput | null
}
export type CategoryUpdateWithoutProductsDataInputInputObject =
  | Extract<keyof CategoryUpdateWithoutProductsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'color', alias?: string  } 
  | { name: 'subCategory', alias?: string  } 
  
export interface SubCategoryUpdateManyWithoutCategoryInput {
  create?: SubCategoryCreateWithoutCategoryInput[]
  delete?: SubCategoryWhereUniqueInput[]
  connect?: SubCategoryWhereUniqueInput[]
  set?: SubCategoryWhereUniqueInput[]
  disconnect?: SubCategoryWhereUniqueInput[]
  update?: SubCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
  upsert?: SubCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
  deleteMany?: SubCategoryScalarWhereInput[]
  updateMany?: SubCategoryUpdateManyWithWhereNestedInput[]
}
export type SubCategoryUpdateManyWithoutCategoryInputInputObject =
  | Extract<keyof SubCategoryUpdateManyWithoutCategoryInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface SubCategoryUpdateWithWhereUniqueWithoutCategoryInput {
  where?: SubCategoryWhereUniqueInput
  data?: SubCategoryUpdateWithoutCategoryDataInput
}
export type SubCategoryUpdateWithWhereUniqueWithoutCategoryInputInputObject =
  | Extract<keyof SubCategoryUpdateWithWhereUniqueWithoutCategoryInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface SubCategoryUpdateWithoutCategoryDataInput {
  name?: string | null
  products?: ProductUpdateManyWithoutSubCategoryInput | null
}
export type SubCategoryUpdateWithoutCategoryDataInputInputObject =
  | Extract<keyof SubCategoryUpdateWithoutCategoryDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface ProductUpdateManyWithoutSubCategoryInput {
  create?: ProductCreateWithoutSubCategoryInput[]
  delete?: ProductWhereUniqueInput[]
  connect?: ProductWhereUniqueInput[]
  set?: ProductWhereUniqueInput[]
  disconnect?: ProductWhereUniqueInput[]
  update?: ProductUpdateWithWhereUniqueWithoutSubCategoryInput[]
  upsert?: ProductUpsertWithWhereUniqueWithoutSubCategoryInput[]
  deleteMany?: ProductScalarWhereInput[]
  updateMany?: ProductUpdateManyWithWhereNestedInput[]
}
export type ProductUpdateManyWithoutSubCategoryInputInputObject =
  | Extract<keyof ProductUpdateManyWithoutSubCategoryInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProductUpdateWithWhereUniqueWithoutSubCategoryInput {
  where?: ProductWhereUniqueInput
  data?: ProductUpdateWithoutSubCategoryDataInput
}
export type ProductUpdateWithWhereUniqueWithoutSubCategoryInputInputObject =
  | Extract<keyof ProductUpdateWithWhereUniqueWithoutSubCategoryInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProductUpdateWithoutSubCategoryDataInput {
  name?: string | null
  company?: CompanyUpdateOneRequiredWithoutProductsInput | null
  avatarId?: string | null
  checkins?: CheckinUpdateManyWithoutProductInput | null
  category?: CategoryUpdateManyWithoutProductsInput | null
  imageId?: string | null
}
export type ProductUpdateWithoutSubCategoryDataInputInputObject =
  | Extract<keyof ProductUpdateWithoutSubCategoryDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'checkins', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'imageId', alias?: string  } 
  
export interface CheckinUpdateManyWithoutProductInput {
  create?: CheckinCreateWithoutProductInput[]
  delete?: CheckinWhereUniqueInput[]
  connect?: CheckinWhereUniqueInput[]
  set?: CheckinWhereUniqueInput[]
  disconnect?: CheckinWhereUniqueInput[]
  update?: CheckinUpdateWithWhereUniqueWithoutProductInput[]
  upsert?: CheckinUpsertWithWhereUniqueWithoutProductInput[]
  deleteMany?: CheckinScalarWhereInput[]
  updateMany?: CheckinUpdateManyWithWhereNestedInput[]
}
export type CheckinUpdateManyWithoutProductInputInputObject =
  | Extract<keyof CheckinUpdateManyWithoutProductInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CheckinUpdateWithWhereUniqueWithoutProductInput {
  where?: CheckinWhereUniqueInput
  data?: CheckinUpdateWithoutProductDataInput
}
export type CheckinUpdateWithWhereUniqueWithoutProductInputInputObject =
  | Extract<keyof CheckinUpdateWithWhereUniqueWithoutProductInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CheckinUpdateWithoutProductDataInput {
  rating?: number | null
  comment?: string | null
  image?: string | null
  author?: UserUpdateOneRequiredWithoutCheckinsInput | null
}
export type CheckinUpdateWithoutProductDataInputInputObject =
  | Extract<keyof CheckinUpdateWithoutProductDataInput, string>
  | { name: 'rating', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'author', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutCheckinsInput {
  create?: UserCreateWithoutCheckinsInput | null
  update?: UserUpdateWithoutCheckinsDataInput | null
  upsert?: UserUpsertWithoutCheckinsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutCheckinsInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutCheckinsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutCheckinsDataInput {
  email?: string | null
  firstName?: string | null
  lastName?: string | null
  password?: string | null
  admin?: boolean | null
  avatarId?: string | null
  avatarColor?: string | null
  colorScheme?: number | null
  friends?: UserUpdateManyInput | null
  friendRequest?: FriendRequestUpdateManyWithoutReceiverInput | null
}
export type UserUpdateWithoutCheckinsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutCheckinsDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'admin', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'avatarColor', alias?: string  } 
  | { name: 'colorScheme', alias?: string  } 
  | { name: 'friends', alias?: string  } 
  | { name: 'friendRequest', alias?: string  } 
  
export interface UserUpdateManyInput {
  create?: UserCreateInput[]
  update?: UserUpdateWithWhereUniqueNestedInput[]
  upsert?: UserUpsertWithWhereUniqueNestedInput[]
  delete?: UserWhereUniqueInput[]
  connect?: UserWhereUniqueInput[]
  set?: UserWhereUniqueInput[]
  disconnect?: UserWhereUniqueInput[]
  deleteMany?: UserScalarWhereInput[]
  updateMany?: UserUpdateManyWithWhereNestedInput[]
}
export type UserUpdateManyInputInputObject =
  | Extract<keyof UserUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserUpdateWithWhereUniqueNestedInput {
  where?: UserWhereUniqueInput
  data?: UserUpdateDataInput
}
export type UserUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof UserUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateDataInput {
  email?: string | null
  firstName?: string | null
  lastName?: string | null
  password?: string | null
  admin?: boolean | null
  avatarId?: string | null
  avatarColor?: string | null
  colorScheme?: number | null
  checkins?: CheckinUpdateManyWithoutAuthorInput | null
  friends?: UserUpdateManyInput | null
  friendRequest?: FriendRequestUpdateManyWithoutReceiverInput | null
}
export type UserUpdateDataInputInputObject =
  | Extract<keyof UserUpdateDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'admin', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'avatarColor', alias?: string  } 
  | { name: 'colorScheme', alias?: string  } 
  | { name: 'checkins', alias?: string  } 
  | { name: 'friends', alias?: string  } 
  | { name: 'friendRequest', alias?: string  } 
  
export interface FriendRequestUpdateManyWithoutReceiverInput {
  create?: FriendRequestCreateWithoutReceiverInput[]
  delete?: FriendRequestWhereUniqueInput[]
  connect?: FriendRequestWhereUniqueInput[]
  set?: FriendRequestWhereUniqueInput[]
  disconnect?: FriendRequestWhereUniqueInput[]
  update?: FriendRequestUpdateWithWhereUniqueWithoutReceiverInput[]
  upsert?: FriendRequestUpsertWithWhereUniqueWithoutReceiverInput[]
  deleteMany?: FriendRequestScalarWhereInput[]
  updateMany?: FriendRequestUpdateManyWithWhereNestedInput[]
}
export type FriendRequestUpdateManyWithoutReceiverInputInputObject =
  | Extract<keyof FriendRequestUpdateManyWithoutReceiverInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface FriendRequestUpdateWithWhereUniqueWithoutReceiverInput {
  where?: FriendRequestWhereUniqueInput
  data?: FriendRequestUpdateWithoutReceiverDataInput
}
export type FriendRequestUpdateWithWhereUniqueWithoutReceiverInputInputObject =
  | Extract<keyof FriendRequestUpdateWithWhereUniqueWithoutReceiverInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface FriendRequestUpdateWithoutReceiverDataInput {
  sender?: UserUpdateManyInput | null
  message?: string | null
}
export type FriendRequestUpdateWithoutReceiverDataInputInputObject =
  | Extract<keyof FriendRequestUpdateWithoutReceiverDataInput, string>
  | { name: 'sender', alias?: string  } 
  | { name: 'message', alias?: string  } 
  
export interface FriendRequestUpsertWithWhereUniqueWithoutReceiverInput {
  where?: FriendRequestWhereUniqueInput
  update?: FriendRequestUpdateWithoutReceiverDataInput
  create?: FriendRequestCreateWithoutReceiverInput
}
export type FriendRequestUpsertWithWhereUniqueWithoutReceiverInputInputObject =
  | Extract<keyof FriendRequestUpsertWithWhereUniqueWithoutReceiverInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface FriendRequestScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  message?: string | null
  message_not?: string | null
  message_in?: string[]
  message_not_in?: string[]
  message_lt?: string | null
  message_lte?: string | null
  message_gt?: string | null
  message_gte?: string | null
  message_contains?: string | null
  message_not_contains?: string | null
  message_starts_with?: string | null
  message_not_starts_with?: string | null
  message_ends_with?: string | null
  message_not_ends_with?: string | null
  AND?: FriendRequestScalarWhereInput[]
  OR?: FriendRequestScalarWhereInput[]
  NOT?: FriendRequestScalarWhereInput[]
}
export type FriendRequestScalarWhereInputInputObject =
  | Extract<keyof FriendRequestScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'message', alias?: string  } 
  | { name: 'message_not', alias?: string  } 
  | { name: 'message_in', alias?: string  } 
  | { name: 'message_not_in', alias?: string  } 
  | { name: 'message_lt', alias?: string  } 
  | { name: 'message_lte', alias?: string  } 
  | { name: 'message_gt', alias?: string  } 
  | { name: 'message_gte', alias?: string  } 
  | { name: 'message_contains', alias?: string  } 
  | { name: 'message_not_contains', alias?: string  } 
  | { name: 'message_starts_with', alias?: string  } 
  | { name: 'message_not_starts_with', alias?: string  } 
  | { name: 'message_ends_with', alias?: string  } 
  | { name: 'message_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FriendRequestUpdateManyWithWhereNestedInput {
  where?: FriendRequestScalarWhereInput
  data?: FriendRequestUpdateManyDataInput
}
export type FriendRequestUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof FriendRequestUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface FriendRequestUpdateManyDataInput {
  message?: string | null
}
export type FriendRequestUpdateManyDataInputInputObject =
  | Extract<keyof FriendRequestUpdateManyDataInput, string>
  | { name: 'message', alias?: string  } 
  
export interface UserUpsertWithWhereUniqueNestedInput {
  where?: UserWhereUniqueInput
  update?: UserUpdateDataInput
  create?: UserCreateInput
}
export type UserUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof UserUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  firstName?: string | null
  firstName_not?: string | null
  firstName_in?: string[]
  firstName_not_in?: string[]
  firstName_lt?: string | null
  firstName_lte?: string | null
  firstName_gt?: string | null
  firstName_gte?: string | null
  firstName_contains?: string | null
  firstName_not_contains?: string | null
  firstName_starts_with?: string | null
  firstName_not_starts_with?: string | null
  firstName_ends_with?: string | null
  firstName_not_ends_with?: string | null
  lastName?: string | null
  lastName_not?: string | null
  lastName_in?: string[]
  lastName_not_in?: string[]
  lastName_lt?: string | null
  lastName_lte?: string | null
  lastName_gt?: string | null
  lastName_gte?: string | null
  lastName_contains?: string | null
  lastName_not_contains?: string | null
  lastName_starts_with?: string | null
  lastName_not_starts_with?: string | null
  lastName_ends_with?: string | null
  lastName_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  admin?: boolean | null
  admin_not?: boolean | null
  avatarId?: string | null
  avatarId_not?: string | null
  avatarId_in?: string[]
  avatarId_not_in?: string[]
  avatarId_lt?: string | null
  avatarId_lte?: string | null
  avatarId_gt?: string | null
  avatarId_gte?: string | null
  avatarId_contains?: string | null
  avatarId_not_contains?: string | null
  avatarId_starts_with?: string | null
  avatarId_not_starts_with?: string | null
  avatarId_ends_with?: string | null
  avatarId_not_ends_with?: string | null
  avatarColor?: string | null
  avatarColor_not?: string | null
  avatarColor_in?: string[]
  avatarColor_not_in?: string[]
  avatarColor_lt?: string | null
  avatarColor_lte?: string | null
  avatarColor_gt?: string | null
  avatarColor_gte?: string | null
  avatarColor_contains?: string | null
  avatarColor_not_contains?: string | null
  avatarColor_starts_with?: string | null
  avatarColor_not_starts_with?: string | null
  avatarColor_ends_with?: string | null
  avatarColor_not_ends_with?: string | null
  colorScheme?: number | null
  colorScheme_not?: number | null
  colorScheme_in?: number[]
  colorScheme_not_in?: number[]
  colorScheme_lt?: number | null
  colorScheme_lte?: number | null
  colorScheme_gt?: number | null
  colorScheme_gte?: number | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: UserScalarWhereInput[]
  OR?: UserScalarWhereInput[]
  NOT?: UserScalarWhereInput[]
}
export type UserScalarWhereInputInputObject =
  | Extract<keyof UserScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'firstName_not', alias?: string  } 
  | { name: 'firstName_in', alias?: string  } 
  | { name: 'firstName_not_in', alias?: string  } 
  | { name: 'firstName_lt', alias?: string  } 
  | { name: 'firstName_lte', alias?: string  } 
  | { name: 'firstName_gt', alias?: string  } 
  | { name: 'firstName_gte', alias?: string  } 
  | { name: 'firstName_contains', alias?: string  } 
  | { name: 'firstName_not_contains', alias?: string  } 
  | { name: 'firstName_starts_with', alias?: string  } 
  | { name: 'firstName_not_starts_with', alias?: string  } 
  | { name: 'firstName_ends_with', alias?: string  } 
  | { name: 'firstName_not_ends_with', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'lastName_not', alias?: string  } 
  | { name: 'lastName_in', alias?: string  } 
  | { name: 'lastName_not_in', alias?: string  } 
  | { name: 'lastName_lt', alias?: string  } 
  | { name: 'lastName_lte', alias?: string  } 
  | { name: 'lastName_gt', alias?: string  } 
  | { name: 'lastName_gte', alias?: string  } 
  | { name: 'lastName_contains', alias?: string  } 
  | { name: 'lastName_not_contains', alias?: string  } 
  | { name: 'lastName_starts_with', alias?: string  } 
  | { name: 'lastName_not_starts_with', alias?: string  } 
  | { name: 'lastName_ends_with', alias?: string  } 
  | { name: 'lastName_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'admin', alias?: string  } 
  | { name: 'admin_not', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'avatarId_not', alias?: string  } 
  | { name: 'avatarId_in', alias?: string  } 
  | { name: 'avatarId_not_in', alias?: string  } 
  | { name: 'avatarId_lt', alias?: string  } 
  | { name: 'avatarId_lte', alias?: string  } 
  | { name: 'avatarId_gt', alias?: string  } 
  | { name: 'avatarId_gte', alias?: string  } 
  | { name: 'avatarId_contains', alias?: string  } 
  | { name: 'avatarId_not_contains', alias?: string  } 
  | { name: 'avatarId_starts_with', alias?: string  } 
  | { name: 'avatarId_not_starts_with', alias?: string  } 
  | { name: 'avatarId_ends_with', alias?: string  } 
  | { name: 'avatarId_not_ends_with', alias?: string  } 
  | { name: 'avatarColor', alias?: string  } 
  | { name: 'avatarColor_not', alias?: string  } 
  | { name: 'avatarColor_in', alias?: string  } 
  | { name: 'avatarColor_not_in', alias?: string  } 
  | { name: 'avatarColor_lt', alias?: string  } 
  | { name: 'avatarColor_lte', alias?: string  } 
  | { name: 'avatarColor_gt', alias?: string  } 
  | { name: 'avatarColor_gte', alias?: string  } 
  | { name: 'avatarColor_contains', alias?: string  } 
  | { name: 'avatarColor_not_contains', alias?: string  } 
  | { name: 'avatarColor_starts_with', alias?: string  } 
  | { name: 'avatarColor_not_starts_with', alias?: string  } 
  | { name: 'avatarColor_ends_with', alias?: string  } 
  | { name: 'avatarColor_not_ends_with', alias?: string  } 
  | { name: 'colorScheme', alias?: string  } 
  | { name: 'colorScheme_not', alias?: string  } 
  | { name: 'colorScheme_in', alias?: string  } 
  | { name: 'colorScheme_not_in', alias?: string  } 
  | { name: 'colorScheme_lt', alias?: string  } 
  | { name: 'colorScheme_lte', alias?: string  } 
  | { name: 'colorScheme_gt', alias?: string  } 
  | { name: 'colorScheme_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserUpdateManyWithWhereNestedInput {
  where?: UserScalarWhereInput
  data?: UserUpdateManyDataInput
}
export type UserUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof UserUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateManyDataInput {
  email?: string | null
  firstName?: string | null
  lastName?: string | null
  password?: string | null
  admin?: boolean | null
  avatarId?: string | null
  avatarColor?: string | null
  colorScheme?: number | null
}
export type UserUpdateManyDataInputInputObject =
  | Extract<keyof UserUpdateManyDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'admin', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'avatarColor', alias?: string  } 
  | { name: 'colorScheme', alias?: string  } 
  
export interface UserUpsertWithoutCheckinsInput {
  update?: UserUpdateWithoutCheckinsDataInput
  create?: UserCreateWithoutCheckinsInput
}
export type UserUpsertWithoutCheckinsInputInputObject =
  | Extract<keyof UserUpsertWithoutCheckinsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CheckinUpsertWithWhereUniqueWithoutProductInput {
  where?: CheckinWhereUniqueInput
  update?: CheckinUpdateWithoutProductDataInput
  create?: CheckinCreateWithoutProductInput
}
export type CheckinUpsertWithWhereUniqueWithoutProductInputInputObject =
  | Extract<keyof CheckinUpsertWithWhereUniqueWithoutProductInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CheckinScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  rating?: number | null
  rating_not?: number | null
  rating_in?: number[]
  rating_not_in?: number[]
  rating_lt?: number | null
  rating_lte?: number | null
  rating_gt?: number | null
  rating_gte?: number | null
  comment?: string | null
  comment_not?: string | null
  comment_in?: string[]
  comment_not_in?: string[]
  comment_lt?: string | null
  comment_lte?: string | null
  comment_gt?: string | null
  comment_gte?: string | null
  comment_contains?: string | null
  comment_not_contains?: string | null
  comment_starts_with?: string | null
  comment_not_starts_with?: string | null
  comment_ends_with?: string | null
  comment_not_ends_with?: string | null
  image?: string | null
  image_not?: string | null
  image_in?: string[]
  image_not_in?: string[]
  image_lt?: string | null
  image_lte?: string | null
  image_gt?: string | null
  image_gte?: string | null
  image_contains?: string | null
  image_not_contains?: string | null
  image_starts_with?: string | null
  image_not_starts_with?: string | null
  image_ends_with?: string | null
  image_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: CheckinScalarWhereInput[]
  OR?: CheckinScalarWhereInput[]
  NOT?: CheckinScalarWhereInput[]
}
export type CheckinScalarWhereInputInputObject =
  | Extract<keyof CheckinScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'rating_not', alias?: string  } 
  | { name: 'rating_in', alias?: string  } 
  | { name: 'rating_not_in', alias?: string  } 
  | { name: 'rating_lt', alias?: string  } 
  | { name: 'rating_lte', alias?: string  } 
  | { name: 'rating_gt', alias?: string  } 
  | { name: 'rating_gte', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'comment_not', alias?: string  } 
  | { name: 'comment_in', alias?: string  } 
  | { name: 'comment_not_in', alias?: string  } 
  | { name: 'comment_lt', alias?: string  } 
  | { name: 'comment_lte', alias?: string  } 
  | { name: 'comment_gt', alias?: string  } 
  | { name: 'comment_gte', alias?: string  } 
  | { name: 'comment_contains', alias?: string  } 
  | { name: 'comment_not_contains', alias?: string  } 
  | { name: 'comment_starts_with', alias?: string  } 
  | { name: 'comment_not_starts_with', alias?: string  } 
  | { name: 'comment_ends_with', alias?: string  } 
  | { name: 'comment_not_ends_with', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'image_not', alias?: string  } 
  | { name: 'image_in', alias?: string  } 
  | { name: 'image_not_in', alias?: string  } 
  | { name: 'image_lt', alias?: string  } 
  | { name: 'image_lte', alias?: string  } 
  | { name: 'image_gt', alias?: string  } 
  | { name: 'image_gte', alias?: string  } 
  | { name: 'image_contains', alias?: string  } 
  | { name: 'image_not_contains', alias?: string  } 
  | { name: 'image_starts_with', alias?: string  } 
  | { name: 'image_not_starts_with', alias?: string  } 
  | { name: 'image_ends_with', alias?: string  } 
  | { name: 'image_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CheckinUpdateManyWithWhereNestedInput {
  where?: CheckinScalarWhereInput
  data?: CheckinUpdateManyDataInput
}
export type CheckinUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof CheckinUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CheckinUpdateManyDataInput {
  rating?: number | null
  comment?: string | null
  image?: string | null
}
export type CheckinUpdateManyDataInputInputObject =
  | Extract<keyof CheckinUpdateManyDataInput, string>
  | { name: 'rating', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'image', alias?: string  } 
  
export interface ProductUpsertWithWhereUniqueWithoutSubCategoryInput {
  where?: ProductWhereUniqueInput
  update?: ProductUpdateWithoutSubCategoryDataInput
  create?: ProductCreateWithoutSubCategoryInput
}
export type ProductUpsertWithWhereUniqueWithoutSubCategoryInputInputObject =
  | Extract<keyof ProductUpsertWithWhereUniqueWithoutSubCategoryInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProductScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  avatarId?: string | null
  avatarId_not?: string | null
  avatarId_in?: string[]
  avatarId_not_in?: string[]
  avatarId_lt?: string | null
  avatarId_lte?: string | null
  avatarId_gt?: string | null
  avatarId_gte?: string | null
  avatarId_contains?: string | null
  avatarId_not_contains?: string | null
  avatarId_starts_with?: string | null
  avatarId_not_starts_with?: string | null
  avatarId_ends_with?: string | null
  avatarId_not_ends_with?: string | null
  imageId?: string | null
  imageId_not?: string | null
  imageId_in?: string[]
  imageId_not_in?: string[]
  imageId_lt?: string | null
  imageId_lte?: string | null
  imageId_gt?: string | null
  imageId_gte?: string | null
  imageId_contains?: string | null
  imageId_not_contains?: string | null
  imageId_starts_with?: string | null
  imageId_not_starts_with?: string | null
  imageId_ends_with?: string | null
  imageId_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ProductScalarWhereInput[]
  OR?: ProductScalarWhereInput[]
  NOT?: ProductScalarWhereInput[]
}
export type ProductScalarWhereInputInputObject =
  | Extract<keyof ProductScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'avatarId_not', alias?: string  } 
  | { name: 'avatarId_in', alias?: string  } 
  | { name: 'avatarId_not_in', alias?: string  } 
  | { name: 'avatarId_lt', alias?: string  } 
  | { name: 'avatarId_lte', alias?: string  } 
  | { name: 'avatarId_gt', alias?: string  } 
  | { name: 'avatarId_gte', alias?: string  } 
  | { name: 'avatarId_contains', alias?: string  } 
  | { name: 'avatarId_not_contains', alias?: string  } 
  | { name: 'avatarId_starts_with', alias?: string  } 
  | { name: 'avatarId_not_starts_with', alias?: string  } 
  | { name: 'avatarId_ends_with', alias?: string  } 
  | { name: 'avatarId_not_ends_with', alias?: string  } 
  | { name: 'imageId', alias?: string  } 
  | { name: 'imageId_not', alias?: string  } 
  | { name: 'imageId_in', alias?: string  } 
  | { name: 'imageId_not_in', alias?: string  } 
  | { name: 'imageId_lt', alias?: string  } 
  | { name: 'imageId_lte', alias?: string  } 
  | { name: 'imageId_gt', alias?: string  } 
  | { name: 'imageId_gte', alias?: string  } 
  | { name: 'imageId_contains', alias?: string  } 
  | { name: 'imageId_not_contains', alias?: string  } 
  | { name: 'imageId_starts_with', alias?: string  } 
  | { name: 'imageId_not_starts_with', alias?: string  } 
  | { name: 'imageId_ends_with', alias?: string  } 
  | { name: 'imageId_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProductUpdateManyWithWhereNestedInput {
  where?: ProductScalarWhereInput
  data?: ProductUpdateManyDataInput
}
export type ProductUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ProductUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProductUpdateManyDataInput {
  name?: string | null
  avatarId?: string | null
  imageId?: string | null
}
export type ProductUpdateManyDataInputInputObject =
  | Extract<keyof ProductUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'imageId', alias?: string  } 
  
export interface SubCategoryUpsertWithWhereUniqueWithoutCategoryInput {
  where?: SubCategoryWhereUniqueInput
  update?: SubCategoryUpdateWithoutCategoryDataInput
  create?: SubCategoryCreateWithoutCategoryInput
}
export type SubCategoryUpsertWithWhereUniqueWithoutCategoryInputInputObject =
  | Extract<keyof SubCategoryUpsertWithWhereUniqueWithoutCategoryInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface SubCategoryScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: SubCategoryScalarWhereInput[]
  OR?: SubCategoryScalarWhereInput[]
  NOT?: SubCategoryScalarWhereInput[]
}
export type SubCategoryScalarWhereInputInputObject =
  | Extract<keyof SubCategoryScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SubCategoryUpdateManyWithWhereNestedInput {
  where?: SubCategoryScalarWhereInput
  data?: SubCategoryUpdateManyDataInput
}
export type SubCategoryUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof SubCategoryUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface SubCategoryUpdateManyDataInput {
  name?: string | null
}
export type SubCategoryUpdateManyDataInputInputObject =
  | Extract<keyof SubCategoryUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface CategoryUpsertWithWhereUniqueWithoutProductsInput {
  where?: CategoryWhereUniqueInput
  update?: CategoryUpdateWithoutProductsDataInput
  create?: CategoryCreateWithoutProductsInput
}
export type CategoryUpsertWithWhereUniqueWithoutProductsInputInputObject =
  | Extract<keyof CategoryUpsertWithWhereUniqueWithoutProductsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CategoryScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  color?: string | null
  color_not?: string | null
  color_in?: string[]
  color_not_in?: string[]
  color_lt?: string | null
  color_lte?: string | null
  color_gt?: string | null
  color_gte?: string | null
  color_contains?: string | null
  color_not_contains?: string | null
  color_starts_with?: string | null
  color_not_starts_with?: string | null
  color_ends_with?: string | null
  color_not_ends_with?: string | null
  AND?: CategoryScalarWhereInput[]
  OR?: CategoryScalarWhereInput[]
  NOT?: CategoryScalarWhereInput[]
}
export type CategoryScalarWhereInputInputObject =
  | Extract<keyof CategoryScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'color', alias?: string  } 
  | { name: 'color_not', alias?: string  } 
  | { name: 'color_in', alias?: string  } 
  | { name: 'color_not_in', alias?: string  } 
  | { name: 'color_lt', alias?: string  } 
  | { name: 'color_lte', alias?: string  } 
  | { name: 'color_gt', alias?: string  } 
  | { name: 'color_gte', alias?: string  } 
  | { name: 'color_contains', alias?: string  } 
  | { name: 'color_not_contains', alias?: string  } 
  | { name: 'color_starts_with', alias?: string  } 
  | { name: 'color_not_starts_with', alias?: string  } 
  | { name: 'color_ends_with', alias?: string  } 
  | { name: 'color_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CategoryUpdateManyWithWhereNestedInput {
  where?: CategoryScalarWhereInput
  data?: CategoryUpdateManyDataInput
}
export type CategoryUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof CategoryUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CategoryUpdateManyDataInput {
  name?: string | null
  color?: string | null
}
export type CategoryUpdateManyDataInputInputObject =
  | Extract<keyof CategoryUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'color', alias?: string  } 
  
export interface SubCategoryUpdateManyWithoutProductsInput {
  create?: SubCategoryCreateWithoutProductsInput[]
  delete?: SubCategoryWhereUniqueInput[]
  connect?: SubCategoryWhereUniqueInput[]
  set?: SubCategoryWhereUniqueInput[]
  disconnect?: SubCategoryWhereUniqueInput[]
  update?: SubCategoryUpdateWithWhereUniqueWithoutProductsInput[]
  upsert?: SubCategoryUpsertWithWhereUniqueWithoutProductsInput[]
  deleteMany?: SubCategoryScalarWhereInput[]
  updateMany?: SubCategoryUpdateManyWithWhereNestedInput[]
}
export type SubCategoryUpdateManyWithoutProductsInputInputObject =
  | Extract<keyof SubCategoryUpdateManyWithoutProductsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface SubCategoryUpdateWithWhereUniqueWithoutProductsInput {
  where?: SubCategoryWhereUniqueInput
  data?: SubCategoryUpdateWithoutProductsDataInput
}
export type SubCategoryUpdateWithWhereUniqueWithoutProductsInputInputObject =
  | Extract<keyof SubCategoryUpdateWithWhereUniqueWithoutProductsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface SubCategoryUpdateWithoutProductsDataInput {
  category?: CategoryUpdateOneRequiredWithoutSubCategoryInput | null
  name?: string | null
}
export type SubCategoryUpdateWithoutProductsDataInputInputObject =
  | Extract<keyof SubCategoryUpdateWithoutProductsDataInput, string>
  | { name: 'category', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface CategoryUpdateOneRequiredWithoutSubCategoryInput {
  create?: CategoryCreateWithoutSubCategoryInput | null
  update?: CategoryUpdateWithoutSubCategoryDataInput | null
  upsert?: CategoryUpsertWithoutSubCategoryInput | null
  connect?: CategoryWhereUniqueInput | null
}
export type CategoryUpdateOneRequiredWithoutSubCategoryInputInputObject =
  | Extract<keyof CategoryUpdateOneRequiredWithoutSubCategoryInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CategoryUpdateWithoutSubCategoryDataInput {
  name?: string | null
  color?: string | null
  products?: ProductUpdateManyWithoutCategoryInput | null
}
export type CategoryUpdateWithoutSubCategoryDataInputInputObject =
  | Extract<keyof CategoryUpdateWithoutSubCategoryDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'color', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface ProductUpdateManyWithoutCategoryInput {
  create?: ProductCreateWithoutCategoryInput[]
  delete?: ProductWhereUniqueInput[]
  connect?: ProductWhereUniqueInput[]
  set?: ProductWhereUniqueInput[]
  disconnect?: ProductWhereUniqueInput[]
  update?: ProductUpdateWithWhereUniqueWithoutCategoryInput[]
  upsert?: ProductUpsertWithWhereUniqueWithoutCategoryInput[]
  deleteMany?: ProductScalarWhereInput[]
  updateMany?: ProductUpdateManyWithWhereNestedInput[]
}
export type ProductUpdateManyWithoutCategoryInputInputObject =
  | Extract<keyof ProductUpdateManyWithoutCategoryInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProductUpdateWithWhereUniqueWithoutCategoryInput {
  where?: ProductWhereUniqueInput
  data?: ProductUpdateWithoutCategoryDataInput
}
export type ProductUpdateWithWhereUniqueWithoutCategoryInputInputObject =
  | Extract<keyof ProductUpdateWithWhereUniqueWithoutCategoryInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProductUpdateWithoutCategoryDataInput {
  name?: string | null
  company?: CompanyUpdateOneRequiredWithoutProductsInput | null
  avatarId?: string | null
  checkins?: CheckinUpdateManyWithoutProductInput | null
  subCategory?: SubCategoryUpdateManyWithoutProductsInput | null
  imageId?: string | null
}
export type ProductUpdateWithoutCategoryDataInputInputObject =
  | Extract<keyof ProductUpdateWithoutCategoryDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'checkins', alias?: string  } 
  | { name: 'subCategory', alias?: string  } 
  | { name: 'imageId', alias?: string  } 
  
export interface ProductUpsertWithWhereUniqueWithoutCategoryInput {
  where?: ProductWhereUniqueInput
  update?: ProductUpdateWithoutCategoryDataInput
  create?: ProductCreateWithoutCategoryInput
}
export type ProductUpsertWithWhereUniqueWithoutCategoryInputInputObject =
  | Extract<keyof ProductUpsertWithWhereUniqueWithoutCategoryInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CategoryUpsertWithoutSubCategoryInput {
  update?: CategoryUpdateWithoutSubCategoryDataInput
  create?: CategoryCreateWithoutSubCategoryInput
}
export type CategoryUpsertWithoutSubCategoryInputInputObject =
  | Extract<keyof CategoryUpsertWithoutSubCategoryInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface SubCategoryUpsertWithWhereUniqueWithoutProductsInput {
  where?: SubCategoryWhereUniqueInput
  update?: SubCategoryUpdateWithoutProductsDataInput
  create?: SubCategoryCreateWithoutProductsInput
}
export type SubCategoryUpsertWithWhereUniqueWithoutProductsInputInputObject =
  | Extract<keyof SubCategoryUpsertWithWhereUniqueWithoutProductsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProductUpsertWithoutCheckinsInput {
  update?: ProductUpdateWithoutCheckinsDataInput
  create?: ProductCreateWithoutCheckinsInput
}
export type ProductUpsertWithoutCheckinsInputInputObject =
  | Extract<keyof ProductUpsertWithoutCheckinsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CheckinUpsertWithWhereUniqueWithoutAuthorInput {
  where?: CheckinWhereUniqueInput
  update?: CheckinUpdateWithoutAuthorDataInput
  create?: CheckinCreateWithoutAuthorInput
}
export type CheckinUpsertWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof CheckinUpsertWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  email?: string | null
  firstName?: string | null
  lastName?: string | null
  password?: string | null
  admin?: boolean | null
  avatarId?: string | null
  avatarColor?: string | null
  colorScheme?: number | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'admin', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'avatarColor', alias?: string  } 
  | { name: 'colorScheme', alias?: string  } 
  
export interface ProductCreateInput {
  id?: string | null
  name?: string
  company?: CompanyCreateOneWithoutProductsInput
  avatarId?: string | null
  checkins?: CheckinCreateManyWithoutProductInput | null
  category?: CategoryCreateManyWithoutProductsInput | null
  subCategory?: SubCategoryCreateManyWithoutProductsInput | null
  imageId?: string | null
}
export type ProductCreateInputInputObject =
  | Extract<keyof ProductCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'checkins', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'subCategory', alias?: string  } 
  | { name: 'imageId', alias?: string  } 
  
export interface ProductUpdateInput {
  name?: string | null
  company?: CompanyUpdateOneRequiredWithoutProductsInput | null
  avatarId?: string | null
  checkins?: CheckinUpdateManyWithoutProductInput | null
  category?: CategoryUpdateManyWithoutProductsInput | null
  subCategory?: SubCategoryUpdateManyWithoutProductsInput | null
  imageId?: string | null
}
export type ProductUpdateInputInputObject =
  | Extract<keyof ProductUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'checkins', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'subCategory', alias?: string  } 
  | { name: 'imageId', alias?: string  } 
  
export interface ProductUpdateManyMutationInput {
  name?: string | null
  avatarId?: string | null
  imageId?: string | null
}
export type ProductUpdateManyMutationInputInputObject =
  | Extract<keyof ProductUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'imageId', alias?: string  } 
  
export interface CheckinCreateInput {
  id?: string | null
  rating?: number
  comment?: string | null
  image?: string | null
  author?: UserCreateOneWithoutCheckinsInput
  product?: ProductCreateOneWithoutCheckinsInput
}
export type CheckinCreateInputInputObject =
  | Extract<keyof CheckinCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'product', alias?: string  } 
  
export interface CheckinUpdateInput {
  rating?: number | null
  comment?: string | null
  image?: string | null
  author?: UserUpdateOneRequiredWithoutCheckinsInput | null
  product?: ProductUpdateOneRequiredWithoutCheckinsInput | null
}
export type CheckinUpdateInputInputObject =
  | Extract<keyof CheckinUpdateInput, string>
  | { name: 'rating', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'product', alias?: string  } 
  
export interface CheckinUpdateManyMutationInput {
  rating?: number | null
  comment?: string | null
  image?: string | null
}
export type CheckinUpdateManyMutationInputInputObject =
  | Extract<keyof CheckinUpdateManyMutationInput, string>
  | { name: 'rating', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'image', alias?: string  } 
  
export interface CompanyCreateInput {
  id?: string | null
  name?: string
  products?: ProductCreateManyWithoutCompanyInput | null
}
export type CompanyCreateInputInputObject =
  | Extract<keyof CompanyCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface ProductCreateManyWithoutCompanyInput {
  create?: ProductCreateWithoutCompanyInput[]
  connect?: ProductWhereUniqueInput[]
}
export type ProductCreateManyWithoutCompanyInputInputObject =
  | Extract<keyof ProductCreateManyWithoutCompanyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductCreateWithoutCompanyInput {
  id?: string | null
  name?: string
  avatarId?: string | null
  checkins?: CheckinCreateManyWithoutProductInput | null
  category?: CategoryCreateManyWithoutProductsInput | null
  subCategory?: SubCategoryCreateManyWithoutProductsInput | null
  imageId?: string | null
}
export type ProductCreateWithoutCompanyInputInputObject =
  | Extract<keyof ProductCreateWithoutCompanyInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'checkins', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'subCategory', alias?: string  } 
  | { name: 'imageId', alias?: string  } 
  
export interface CompanyUpdateInput {
  name?: string | null
  products?: ProductUpdateManyWithoutCompanyInput | null
}
export type CompanyUpdateInputInputObject =
  | Extract<keyof CompanyUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface ProductUpdateManyWithoutCompanyInput {
  create?: ProductCreateWithoutCompanyInput[]
  delete?: ProductWhereUniqueInput[]
  connect?: ProductWhereUniqueInput[]
  set?: ProductWhereUniqueInput[]
  disconnect?: ProductWhereUniqueInput[]
  update?: ProductUpdateWithWhereUniqueWithoutCompanyInput[]
  upsert?: ProductUpsertWithWhereUniqueWithoutCompanyInput[]
  deleteMany?: ProductScalarWhereInput[]
  updateMany?: ProductUpdateManyWithWhereNestedInput[]
}
export type ProductUpdateManyWithoutCompanyInputInputObject =
  | Extract<keyof ProductUpdateManyWithoutCompanyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProductUpdateWithWhereUniqueWithoutCompanyInput {
  where?: ProductWhereUniqueInput
  data?: ProductUpdateWithoutCompanyDataInput
}
export type ProductUpdateWithWhereUniqueWithoutCompanyInputInputObject =
  | Extract<keyof ProductUpdateWithWhereUniqueWithoutCompanyInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProductUpdateWithoutCompanyDataInput {
  name?: string | null
  avatarId?: string | null
  checkins?: CheckinUpdateManyWithoutProductInput | null
  category?: CategoryUpdateManyWithoutProductsInput | null
  subCategory?: SubCategoryUpdateManyWithoutProductsInput | null
  imageId?: string | null
}
export type ProductUpdateWithoutCompanyDataInputInputObject =
  | Extract<keyof ProductUpdateWithoutCompanyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'checkins', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'subCategory', alias?: string  } 
  | { name: 'imageId', alias?: string  } 
  
export interface ProductUpsertWithWhereUniqueWithoutCompanyInput {
  where?: ProductWhereUniqueInput
  update?: ProductUpdateWithoutCompanyDataInput
  create?: ProductCreateWithoutCompanyInput
}
export type ProductUpsertWithWhereUniqueWithoutCompanyInputInputObject =
  | Extract<keyof ProductUpsertWithWhereUniqueWithoutCompanyInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CompanyUpdateManyMutationInput {
  name?: string | null
}
export type CompanyUpdateManyMutationInputInputObject =
  | Extract<keyof CompanyUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface CategoryCreateInput {
  id?: string | null
  name?: string
  color?: string | null
  subCategory?: SubCategoryCreateManyWithoutCategoryInput | null
  products?: ProductCreateManyWithoutCategoryInput | null
}
export type CategoryCreateInputInputObject =
  | Extract<keyof CategoryCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'color', alias?: string  } 
  | { name: 'subCategory', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface CategoryUpdateInput {
  name?: string | null
  color?: string | null
  subCategory?: SubCategoryUpdateManyWithoutCategoryInput | null
  products?: ProductUpdateManyWithoutCategoryInput | null
}
export type CategoryUpdateInputInputObject =
  | Extract<keyof CategoryUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'color', alias?: string  } 
  | { name: 'subCategory', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface CategoryUpdateManyMutationInput {
  name?: string | null
  color?: string | null
}
export type CategoryUpdateManyMutationInputInputObject =
  | Extract<keyof CategoryUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'color', alias?: string  } 
  
export interface SubCategoryCreateInput {
  id?: string | null
  category?: CategoryCreateOneWithoutSubCategoryInput
  name?: string
  products?: ProductCreateManyWithoutSubCategoryInput | null
}
export type SubCategoryCreateInputInputObject =
  | Extract<keyof SubCategoryCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface SubCategoryUpdateInput {
  category?: CategoryUpdateOneRequiredWithoutSubCategoryInput | null
  name?: string | null
  products?: ProductUpdateManyWithoutSubCategoryInput | null
}
export type SubCategoryUpdateInputInputObject =
  | Extract<keyof SubCategoryUpdateInput, string>
  | { name: 'category', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface SubCategoryUpdateManyMutationInput {
  name?: string | null
}
export type SubCategoryUpdateManyMutationInputInputObject =
  | Extract<keyof SubCategoryUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface FriendRequestCreateInput {
  id?: string | null
  sender?: UserCreateManyInput | null
  receiver?: UserCreateManyWithoutFriendRequestInput | null
  message?: string | null
}
export type FriendRequestCreateInputInputObject =
  | Extract<keyof FriendRequestCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'sender', alias?: string  } 
  | { name: 'receiver', alias?: string  } 
  | { name: 'message', alias?: string  } 
  
export interface UserCreateManyWithoutFriendRequestInput {
  create?: UserCreateWithoutFriendRequestInput[]
  connect?: UserWhereUniqueInput[]
}
export type UserCreateManyWithoutFriendRequestInputInputObject =
  | Extract<keyof UserCreateManyWithoutFriendRequestInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutFriendRequestInput {
  id?: string | null
  email?: string | null
  firstName?: string
  lastName?: string
  password?: string
  admin?: boolean
  avatarId?: string | null
  avatarColor?: string | null
  colorScheme?: number | null
  checkins?: CheckinCreateManyWithoutAuthorInput | null
  friends?: UserCreateManyInput | null
}
export type UserCreateWithoutFriendRequestInputInputObject =
  | Extract<keyof UserCreateWithoutFriendRequestInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'admin', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'avatarColor', alias?: string  } 
  | { name: 'colorScheme', alias?: string  } 
  | { name: 'checkins', alias?: string  } 
  | { name: 'friends', alias?: string  } 
  
export interface FriendRequestUpdateInput {
  sender?: UserUpdateManyInput | null
  receiver?: UserUpdateManyWithoutFriendRequestInput | null
  message?: string | null
}
export type FriendRequestUpdateInputInputObject =
  | Extract<keyof FriendRequestUpdateInput, string>
  | { name: 'sender', alias?: string  } 
  | { name: 'receiver', alias?: string  } 
  | { name: 'message', alias?: string  } 
  
export interface UserUpdateManyWithoutFriendRequestInput {
  create?: UserCreateWithoutFriendRequestInput[]
  delete?: UserWhereUniqueInput[]
  connect?: UserWhereUniqueInput[]
  set?: UserWhereUniqueInput[]
  disconnect?: UserWhereUniqueInput[]
  update?: UserUpdateWithWhereUniqueWithoutFriendRequestInput[]
  upsert?: UserUpsertWithWhereUniqueWithoutFriendRequestInput[]
  deleteMany?: UserScalarWhereInput[]
  updateMany?: UserUpdateManyWithWhereNestedInput[]
}
export type UserUpdateManyWithoutFriendRequestInputInputObject =
  | Extract<keyof UserUpdateManyWithoutFriendRequestInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserUpdateWithWhereUniqueWithoutFriendRequestInput {
  where?: UserWhereUniqueInput
  data?: UserUpdateWithoutFriendRequestDataInput
}
export type UserUpdateWithWhereUniqueWithoutFriendRequestInputInputObject =
  | Extract<keyof UserUpdateWithWhereUniqueWithoutFriendRequestInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateWithoutFriendRequestDataInput {
  email?: string | null
  firstName?: string | null
  lastName?: string | null
  password?: string | null
  admin?: boolean | null
  avatarId?: string | null
  avatarColor?: string | null
  colorScheme?: number | null
  checkins?: CheckinUpdateManyWithoutAuthorInput | null
  friends?: UserUpdateManyInput | null
}
export type UserUpdateWithoutFriendRequestDataInputInputObject =
  | Extract<keyof UserUpdateWithoutFriendRequestDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'admin', alias?: string  } 
  | { name: 'avatarId', alias?: string  } 
  | { name: 'avatarColor', alias?: string  } 
  | { name: 'colorScheme', alias?: string  } 
  | { name: 'checkins', alias?: string  } 
  | { name: 'friends', alias?: string  } 
  
export interface UserUpsertWithWhereUniqueWithoutFriendRequestInput {
  where?: UserWhereUniqueInput
  update?: UserUpdateWithoutFriendRequestDataInput
  create?: UserCreateWithoutFriendRequestInput
}
export type UserUpsertWithWhereUniqueWithoutFriendRequestInputInputObject =
  | Extract<keyof UserUpsertWithWhereUniqueWithoutFriendRequestInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface FriendRequestUpdateManyMutationInput {
  message?: string | null
}
export type FriendRequestUpdateManyMutationInputInputObject =
  | Extract<keyof FriendRequestUpdateManyMutationInput, string>
  | { name: 'message', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProductSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProductWhereInput | null
  AND?: ProductSubscriptionWhereInput[]
  OR?: ProductSubscriptionWhereInput[]
  NOT?: ProductSubscriptionWhereInput[]
}
export type ProductSubscriptionWhereInputInputObject =
  | Extract<keyof ProductSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CheckinSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CheckinWhereInput | null
  AND?: CheckinSubscriptionWhereInput[]
  OR?: CheckinSubscriptionWhereInput[]
  NOT?: CheckinSubscriptionWhereInput[]
}
export type CheckinSubscriptionWhereInputInputObject =
  | Extract<keyof CheckinSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CompanySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CompanyWhereInput | null
  AND?: CompanySubscriptionWhereInput[]
  OR?: CompanySubscriptionWhereInput[]
  NOT?: CompanySubscriptionWhereInput[]
}
export type CompanySubscriptionWhereInputInputObject =
  | Extract<keyof CompanySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CategorySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CategoryWhereInput | null
  AND?: CategorySubscriptionWhereInput[]
  OR?: CategorySubscriptionWhereInput[]
  NOT?: CategorySubscriptionWhereInput[]
}
export type CategorySubscriptionWhereInputInputObject =
  | Extract<keyof CategorySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SubCategorySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: SubCategoryWhereInput | null
  AND?: SubCategorySubscriptionWhereInput[]
  OR?: SubCategorySubscriptionWhereInput[]
  NOT?: SubCategorySubscriptionWhereInput[]
}
export type SubCategorySubscriptionWhereInputInputObject =
  | Extract<keyof SubCategorySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FriendRequestSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: FriendRequestWhereInput | null
  AND?: FriendRequestSubscriptionWhereInput[]
  OR?: FriendRequestSubscriptionWhereInput[]
  NOT?: FriendRequestSubscriptionWhereInput[]
}
export type FriendRequestSubscriptionWhereInputInputObject =
  | Extract<keyof FriendRequestSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type CheckinOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'rating_ASC'
  | 'rating_DESC'
  | 'comment_ASC'
  | 'comment_DESC'
  | 'image_ASC'
  | 'image_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ProductOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'avatarId_ASC'
  | 'avatarId_DESC'
  | 'imageId_ASC'
  | 'imageId_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CategoryOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'color_ASC'
  | 'color_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type SubCategoryOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'firstName_ASC'
  | 'firstName_DESC'
  | 'lastName_ASC'
  | 'lastName_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'admin_ASC'
  | 'admin_DESC'
  | 'avatarId_ASC'
  | 'avatarId_DESC'
  | 'avatarColor_ASC'
  | 'avatarColor_DESC'
  | 'colorScheme_ASC'
  | 'colorScheme_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type FriendRequestOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'message_ASC'
  | 'message_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CompanyOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  