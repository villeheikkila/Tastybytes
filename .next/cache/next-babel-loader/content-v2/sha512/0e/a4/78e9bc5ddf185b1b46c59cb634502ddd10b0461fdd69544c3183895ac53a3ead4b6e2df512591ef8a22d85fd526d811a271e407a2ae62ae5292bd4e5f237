{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/villeheikkila/Developer/nextjs-auth/lib/UserContext.tsx\";\nimport React, { useEffect, useState, createContext, useContext } from \"react\";\nconst UserContext = /*#__PURE__*/createContext({\n  user: null,\n  session: null\n});\nexport const UserContextProvider = ({\n  supabaseClient,\n  children\n}) => {\n  const {\n    0: session,\n    1: setSession\n  } = useState(null);\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  useEffect(() => {\n    var _session$user;\n\n    const session = supabaseClient.auth.session();\n    setSession(session);\n    setUser((_session$user = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user !== void 0 ? _session$user : null);\n    const {\n      data: authListener\n    } = supabaseClient.auth.onAuthStateChange(async (event, session) => {\n      var _session$user2;\n\n      setSession(session);\n      setUser((_session$user2 = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user2 !== void 0 ? _session$user2 : null);\n    });\n    return () => {\n      authListener === null || authListener === void 0 ? void 0 : authListener.unsubscribe();\n    };\n  }, []);\n  const value = {\n    session,\n    user\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 10\n  }, this);\n};\nexport const useUser = () => {\n  const context = useContext(UserContext);\n\n  if (context === undefined) {\n    throw new Error(`useUser must be used within a UserContextProvider.`);\n  }\n\n  return context;\n};","map":{"version":3,"sources":["/Users/villeheikkila/Developer/nextjs-auth/lib/UserContext.tsx"],"names":["React","useEffect","useState","createContext","useContext","UserContext","user","session","UserContextProvider","supabaseClient","children","setSession","setUser","auth","data","authListener","onAuthStateChange","event","unsubscribe","value","useUser","context","undefined","Error"],"mappings":";;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,aAArC,EAAoDC,UAApD,QAAsE,OAAtE;AAEA,MAAMC,WAAW,gBAAGF,aAAa,CAG9B;AAAEG,EAAAA,IAAI,EAAE,IAAR;AAAcC,EAAAA,OAAO,EAAE;AAAvB,CAH8B,CAAjC;AAUA,OAAO,MAAMC,mBAAmB,GAAG,CAAC;AAClCC,EAAAA,cADkC;AAElCC,EAAAA;AAFkC,CAAD,KAGW;AAC5C,QAAM;AAAA,OAACH,OAAD;AAAA,OAAUI;AAAV,MAAwBT,QAAQ,CAAiB,IAAjB,CAAtC;AACA,QAAM;AAAA,OAACI,IAAD;AAAA,OAAOM;AAAP,MAAkBV,QAAQ,CAAc,IAAd,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,UAAMM,OAAO,GAAGE,cAAc,CAACI,IAAf,CAAoBN,OAApB,EAAhB;AACAI,IAAAA,UAAU,CAACJ,OAAD,CAAV;AACAK,IAAAA,OAAO,kBAACL,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAED,IAAV,yDAAkB,IAAlB,CAAP;AACA,UAAM;AAAEQ,MAAAA,IAAI,EAAEC;AAAR,QAAyBN,cAAc,CAACI,IAAf,CAAoBG,iBAApB,CAC7B,OAAOC,KAAP,EAAcV,OAAd,KAA0B;AAAA;;AACxBI,MAAAA,UAAU,CAACJ,OAAD,CAAV;AACAK,MAAAA,OAAO,mBAACL,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAED,IAAV,2DAAkB,IAAlB,CAAP;AACD,KAJ4B,CAA/B;AAOA,WAAO,MAAM;AACXS,MAAAA,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEG,WAAd;AACD,KAFD;AAGD,GAdQ,EAcN,EAdM,CAAT;AAgBA,QAAMC,KAAK,GAAG;AACZZ,IAAAA,OADY;AAEZD,IAAAA;AAFY,GAAd;AAKA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEa,KAA7B;AAAA,cAAqCT;AAArC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA7BM;AA+BP,OAAO,MAAMU,OAAO,GAAG,MAAM;AAC3B,QAAMC,OAAO,GAAGjB,UAAU,CAACC,WAAD,CAA1B;;AACA,MAAIgB,OAAO,KAAKC,SAAhB,EAA2B;AACzB,UAAM,IAAIC,KAAJ,CAAW,oDAAX,CAAN;AACD;;AACD,SAAOF,OAAP;AACD,CANM","sourcesContent":["import { Session, SupabaseClient, User } from \"@supabase/supabase-js\";\nimport React, { useEffect, useState, createContext, useContext } from \"react\";\n\nconst UserContext = createContext<{\n  user: null | User;\n  session: null | Session;\n}>({ user: null, session: null });\n\ntype WithChildren<T = {}> = T & { children?: React.ReactNode };\n\ninterface UserContextProviderProps {\n  supabaseClient: SupabaseClient;\n}\nexport const UserContextProvider = ({\n  supabaseClient,\n  children,\n}: WithChildren<UserContextProviderProps>) => {\n  const [session, setSession] = useState<Session | null>(null);\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    const session = supabaseClient.auth.session();\n    setSession(session);\n    setUser(session?.user ?? null);\n    const { data: authListener } = supabaseClient.auth.onAuthStateChange(\n      async (event, session) => {\n        setSession(session);\n        setUser(session?.user ?? null);\n      }\n    );\n\n    return () => {\n      authListener?.unsubscribe();\n    };\n  }, []);\n\n  const value = {\n    session,\n    user,\n  };\n\n  return <UserContext.Provider value={value}>{children}</UserContext.Provider>;\n};\n\nexport const useUser = () => {\n  const context = useContext(UserContext);\n  if (context === undefined) {\n    throw new Error(`useUser must be used within a UserContextProvider.`);\n  }\n  return context;\n};\n"]},"metadata":{},"sourceType":"module"}