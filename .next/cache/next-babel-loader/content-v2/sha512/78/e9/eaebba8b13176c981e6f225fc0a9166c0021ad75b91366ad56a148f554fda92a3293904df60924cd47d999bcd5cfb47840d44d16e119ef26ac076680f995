{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/villeheikkila/Developer/nextjs-auth/pages/index.tsx\";\nimport Link from \"next/link\";\nimport useSWR from \"swr\";\nimport { supabase } from \"../utils/initSupabase\";\nimport { useEffect, useState } from \"react\";\nimport Auth from \"../components/Auth\";\nimport { useUser } from \"../lib/UserContext\";\n\nconst fetcher = (url, token) => fetch(url, {\n  method: \"GET\",\n  headers: new Headers({\n    \"Content-Type\": \"application/json\",\n    token\n  }),\n  credentials: \"same-origin\"\n}).then(res => res.json());\n\nconst Index = () => {\n  const {\n    user,\n    session\n  } = useUser();\n  const {\n    data,\n    error\n  } = useSWR(session ? [\"/api/getUser\", session === null || session === void 0 ? void 0 : session.access_token] : null, fetcher);\n  const {\n    0: authView,\n    1: setAuthView\n  } = useState(\"sign_in\");\n  useEffect(() => {\n    const {\n      data: authListener\n    } = supabase.auth.onAuthStateChange((event, session) => {\n      if (event === \"PASSWORD_RECOVERY\") setAuthView(\"update_password\");\n      if (event === \"USER_UPDATED\") setTimeout(() => setAuthView(\"sign_in\"), 1000);\n      fetch(\"/api/auth\", {\n        method: \"POST\",\n        headers: new Headers({\n          \"Content-Type\": \"application/json\"\n        }),\n        credentials: \"same-origin\",\n        body: JSON.stringify({\n          event,\n          session\n        })\n      }).then(res => res.json());\n    });\n    return () => {\n      authListener === null || authListener === void 0 ? void 0 : authListener.unsubscribe();\n    };\n  }, []);\n\n  const View = () => {\n    if (!user) return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://app.supabase.io/img/supabase-dark.svg\",\n          width: \"96\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Supabase Auth \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 29\n          }, this), \"with NextJS SSR\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Auth, {\n        supabaseClient: supabase,\n        authView: authView,\n        setAuthView: setAuthView\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [authView === \"update_password\" && /*#__PURE__*/_jsxDEV(Auth.UpdatePassword, {\n        supabaseClient: supabase\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), user && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"You're signed in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"Email: \", user.email]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => supabase.auth.signOut(),\n          children: \"Log out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: \"red\"\n          },\n          children: \"Failed to fetch user!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 23\n        }, this), data && !error ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: \"green\"\n            },\n            children: \"User data retrieved server-side (in API route):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: JSON.stringify(data, null, 2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          href: \"/profile\",\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: \"SSR example with getServerSideProps\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: \"520px\",\n      margin: \"96px auto\"\n    },\n    children: /*#__PURE__*/_jsxDEV(View, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/villeheikkila/Developer/nextjs-auth/pages/index.tsx"],"names":["Link","useSWR","supabase","useEffect","useState","Auth","useUser","fetcher","url","token","fetch","method","headers","Headers","credentials","then","res","json","Index","user","session","data","error","access_token","authView","setAuthView","authListener","auth","onAuthStateChange","event","setTimeout","body","JSON","stringify","unsubscribe","View","email","signOut","color","maxWidth","margin"],"mappings":"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","sourcesContent":["import Link from \"next/link\";\nimport useSWR from \"swr\";\nimport { supabase } from \"../utils/initSupabase\";\nimport { useEffect, useState } from \"react\";\nimport Auth from \"../components/Auth\";\nimport { useUser } from \"../lib/UserContext\";\n\nconst fetcher = (url: string, token: string) =>\n  fetch(url, {\n    method: \"GET\",\n    headers: new Headers({ \"Content-Type\": \"application/json\", token }),\n    credentials: \"same-origin\",\n  }).then((res) => res.json());\n\nconst Index = () => {\n  const { user, session } = useUser();\n  const { data, error } = useSWR(\n    session ? [\"/api/getUser\", session?.access_token] : null,\n    fetcher\n  );\n  const [authView, setAuthView] = useState(\"sign_in\");\n\n  useEffect(() => {\n    const { data: authListener } = supabase.auth.onAuthStateChange(\n      (event, session) => {\n        if (event === \"PASSWORD_RECOVERY\") setAuthView(\"update_password\");\n        if (event === \"USER_UPDATED\")\n          setTimeout(() => setAuthView(\"sign_in\"), 1000);\n\n        fetch(\"/api/auth\", {\n          method: \"POST\",\n          headers: new Headers({ \"Content-Type\": \"application/json\" }),\n          credentials: \"same-origin\",\n          body: JSON.stringify({ event, session }),\n        }).then((res) => res.json());\n      }\n    );\n\n    return () => {\n      authListener?.unsubscribe();\n    };\n  }, []);\n\n  const View = () => {\n    if (!user)\n      return (\n        <>\n          <div>\n            <img\n              src=\"https://app.supabase.io/img/supabase-dark.svg\"\n              width=\"96\"\n            />\n            <h2>\n              Supabase Auth <br />\n              with NextJS SSR\n            </h2>\n          </div>\n          <Auth\n            supabaseClient={supabase}\n            authView={authView}\n            setAuthView={setAuthView}\n          />\n        </>\n      );\n\n    return (\n      <>\n        {authView === \"update_password\" && (\n          <Auth.UpdatePassword supabaseClient={supabase} />\n        )}\n        {user && (\n          <>\n            <h4>You're signed in</h4>\n            <h5>Email: {user.email}</h5>\n\n            <button onClick={() => supabase.auth.signOut()}>Log out</button>\n            <hr />\n            {error && <div style={{ color: \"red\" }}>Failed to fetch user!</div>}\n            {data && !error ? (\n              <>\n                <div style={{ color: \"green\" }}>\n                  User data retrieved server-side (in API route):\n                </div>\n\n                <pre>{JSON.stringify(data, null, 2)}</pre>\n              </>\n            ) : (\n              <div>Loading...</div>\n            )}\n\n            <Link href=\"/profile\">\n              <a>SSR example with getServerSideProps</a>\n            </Link>\n          </>\n        )}\n      </>\n    );\n  };\n\n  return (\n    <div style={{ maxWidth: \"520px\", margin: \"96px auto\" }}>\n      <View />\n    </div>\n  );\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}