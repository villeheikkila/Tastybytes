"""All input for the `acceptFriendRequest` mutation."""
input AcceptFriendRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: UUID
}

"""The output of our `acceptFriendRequest` mutation."""
type AcceptFriendRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type ActivityFeed {
  """Reads a single `User` that is related to this `ActivityFeed`."""
  author: User
  authorId: UUID
  checkInDate: Date
  createdAt: Datetime
  id: Int
  isPublic: Boolean

  """Reads a single `Item` that is related to this `ActivityFeed`."""
  item: Item
  itemId: Int
  likes: Int
  location: UUID
  rating: Int
  review: String
}

"""
A condition to be used against `ActivityFeed` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ActivityFeedCondition {
  """Checks for equality with the object’s `authorId` field."""
  authorId: UUID

  """Checks for equality with the object’s `checkInDate` field."""
  checkInDate: Date

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isPublic` field."""
  isPublic: Boolean

  """Checks for equality with the object’s `itemId` field."""
  itemId: Int

  """Checks for equality with the object’s `likes` field."""
  likes: Int

  """Checks for equality with the object’s `location` field."""
  location: UUID

  """Checks for equality with the object’s `rating` field."""
  rating: Int

  """Checks for equality with the object’s `review` field."""
  review: String
}

"""A connection to a list of `ActivityFeed` values."""
type ActivityFeedsConnection {
  """
  A list of edges which contains the `ActivityFeed` and cursor to aid in pagination.
  """
  edges: [ActivityFeedsEdge!]!

  """A list of `ActivityFeed` objects."""
  nodes: [ActivityFeed]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ActivityFeed` you could get from the connection."""
  totalCount: Int!
}

"""A `ActivityFeed` edge in the connection."""
type ActivityFeedsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ActivityFeed` at the end of the edge."""
  node: ActivityFeed
}

"""Methods to use when ordering `ActivityFeed`."""
enum ActivityFeedsOrderBy {
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  CHECK_IN_DATE_ASC
  CHECK_IN_DATE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  IS_PUBLIC_ASC
  IS_PUBLIC_DESC
  ITEM_ID_ASC
  ITEM_ID_DESC
  LIKES_ASC
  LIKES_DESC
  LOCATION_ASC
  LOCATION_DESC
  NATURAL
  RATING_ASC
  RATING_DESC
  REVIEW_ASC
  REVIEW_DESC
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

type Brand implements Node {
  """Reads a single `Company` that is related to this `Brand`."""
  company: Company
  companyId: Int
  createdAt: Datetime!
  createdBy: UUID
  id: Int!
  isVerified: Boolean

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """Reads and enables pagination through a set of `Item`."""
  items(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!
  name: ShortText

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `User` that is related to this `Brand`."""
  userByCreatedBy: User
}

"""
A condition to be used against `Brand` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BrandCondition {
  """Checks for equality with the object’s `companyId` field."""
  companyId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isVerified` field."""
  isVerified: Boolean

  """Checks for equality with the object’s `name` field."""
  name: ShortText
}

"""An input for mutations affecting `Brand`"""
input BrandInput {
  companyId: Int
  createdAt: Datetime
  createdBy: UUID
  id: Int
  isVerified: Boolean
  name: ShortText
}

"""
Represents an update to a `Brand`. Fields that are set will be updated.
"""
input BrandPatch {
  companyId: Int
  createdAt: Datetime
  createdBy: UUID
  id: Int
  isVerified: Boolean
  name: ShortText
}

"""A connection to a list of `Brand` values."""
type BrandsConnection {
  """
  A list of edges which contains the `Brand` and cursor to aid in pagination.
  """
  edges: [BrandsEdge!]!

  """A list of `Brand` objects."""
  nodes: [Brand]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection."""
type BrandsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Brand` at the end of the edge."""
  node: Brand
}

"""Methods to use when ordering `Brand`."""
enum BrandsOrderBy {
  COMPANY_ID_ASC
  COMPANY_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Category` values."""
type CategoriesConnection {
  """
  A list of edges which contains the `Category` and cursor to aid in pagination.
  """
  edges: [CategoriesEdge!]!

  """A list of `Category` objects."""
  nodes: [Category]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Category` you could get from the connection."""
  totalCount: Int!
}

"""A `Category` edge in the connection."""
type CategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Category` at the end of the edge."""
  node: Category
}

"""Methods to use when ordering `Category`."""
enum CategoriesOrderBy {
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Main categories for items"""
type Category implements Node {
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Type`."""
  typesByCategory(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Type`."""
    orderBy: [TypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TypesConnection!
}

"""
A condition to be used against `Category` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CategoryCondition {
  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `Category`"""
input CategoryInput {
  name: String!
}

"""
Represents an update to a `Category`. Fields that are set will be updated.
"""
input CategoryPatch {
  name: String
}

"""All input for the `changePassword` mutation."""
input ChangePasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  newPassword: String!
  oldPassword: String!
}

"""The output of our `changePassword` mutation."""
type ChangePasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""Check-in is a review given to an item"""
type CheckIn implements Node {
  """Reads a single `User` that is related to this `CheckIn`."""
  author: User
  authorId: UUID!

  """Reads and enables pagination through a set of `CheckInComment`."""
  checkInComments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInCommentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckInComment`."""
    orderBy: [CheckInCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInCommentsConnection!
  checkInDate: Date

  """Reads and enables pagination through a set of `CheckInFriend`."""
  checkInFriends(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInFriendCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckInFriend`."""
    orderBy: [CheckInFriendsOrderBy!] = [NATURAL]
  ): CheckInFriendsConnection!

  """Reads a single `CheckInLike` that is related to this `CheckIn`."""
  checkInLikeById: CheckInLike

  """Reads and enables pagination through a set of `CheckInLike`."""
  checkInLikesById(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInLikeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckInLike`."""
    orderBy: [CheckInLikesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInLikesConnection! @deprecated(reason: "Please use checkInLikeById instead")

  """Reads and enables pagination through a set of `CheckInTag`."""
  checkInTags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInTagCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckInTag`."""
    orderBy: [CheckInTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInTagsConnection!
  createdAt: Datetime!
  id: Int!
  isPublic: Boolean

  """Reads a single `Item` that is related to this `CheckIn`."""
  item: Item
  itemId: Int!
  likes: Int
  location: UUID

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  rating: Int
  review: String
}

type CheckInComment implements Node {
  """Reads a single `CheckIn` that is related to this `CheckInComment`."""
  checkIn: CheckIn
  checkInId: Int!
  comment: LongText
  createdAt: Datetime!
  createdBy: UUID!
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `User` that is related to this `CheckInComment`."""
  userByCreatedBy: User
}

"""
A condition to be used against `CheckInComment` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CheckInCommentCondition {
  """Checks for equality with the object’s `checkInId` field."""
  checkInId: Int

  """Checks for equality with the object’s `comment` field."""
  comment: LongText

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""An input for mutations affecting `CheckInComment`"""
input CheckInCommentInput {
  checkInId: Int!
  comment: LongText
  createdAt: Datetime
  createdBy: UUID!
  id: Int
}

"""
Represents an update to a `CheckInComment`. Fields that are set will be updated.
"""
input CheckInCommentPatch {
  checkInId: Int
  comment: LongText
  createdAt: Datetime
  createdBy: UUID
  id: Int
}

"""A connection to a list of `CheckInComment` values."""
type CheckInCommentsConnection {
  """
  A list of edges which contains the `CheckInComment` and cursor to aid in pagination.
  """
  edges: [CheckInCommentsEdge!]!

  """A list of `CheckInComment` objects."""
  nodes: [CheckInComment]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CheckInComment` you could get from the connection."""
  totalCount: Int!
}

"""A `CheckInComment` edge in the connection."""
type CheckInCommentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CheckInComment` at the end of the edge."""
  node: CheckInComment
}

"""Methods to use when ordering `CheckInComment`."""
enum CheckInCommentsOrderBy {
  CHECK_IN_ID_ASC
  CHECK_IN_ID_DESC
  COMMENT_ASC
  COMMENT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CheckIn` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CheckInCondition {
  """Checks for equality with the object’s `authorId` field."""
  authorId: UUID

  """Checks for equality with the object’s `checkInDate` field."""
  checkInDate: Date

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isPublic` field."""
  isPublic: Boolean

  """Checks for equality with the object’s `itemId` field."""
  itemId: Int

  """Checks for equality with the object’s `likes` field."""
  likes: Int

  """Checks for equality with the object’s `location` field."""
  location: UUID

  """Checks for equality with the object’s `rating` field."""
  rating: Int

  """Checks for equality with the object’s `review` field."""
  review: String
}

type CheckInFriend {
  """Reads a single `CheckIn` that is related to this `CheckInFriend`."""
  checkIn: CheckIn
  checkInId: Int

  """Reads a single `User` that is related to this `CheckInFriend`."""
  friend: User
  friendId: UUID
}

"""
A condition to be used against `CheckInFriend` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CheckInFriendCondition {
  """Checks for equality with the object’s `checkInId` field."""
  checkInId: Int

  """Checks for equality with the object’s `friendId` field."""
  friendId: UUID
}

"""An input for mutations affecting `CheckInFriend`"""
input CheckInFriendInput {
  checkInId: Int
  friendId: UUID
}

"""A connection to a list of `CheckInFriend` values."""
type CheckInFriendsConnection {
  """
  A list of edges which contains the `CheckInFriend` and cursor to aid in pagination.
  """
  edges: [CheckInFriendsEdge!]!

  """A list of `CheckInFriend` objects."""
  nodes: [CheckInFriend]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CheckInFriend` you could get from the connection."""
  totalCount: Int!
}

"""A `CheckInFriend` edge in the connection."""
type CheckInFriendsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CheckInFriend` at the end of the edge."""
  node: CheckInFriend
}

"""Methods to use when ordering `CheckInFriend`."""
enum CheckInFriendsOrderBy {
  CHECK_IN_ID_ASC
  CHECK_IN_ID_DESC
  FRIEND_ID_ASC
  FRIEND_ID_DESC
  NATURAL
}

"""An input for mutations affecting `CheckIn`"""
input CheckInInput {
  authorId: UUID!
  checkInDate: Date
  createdAt: Datetime
  id: Int
  isPublic: Boolean
  itemId: Int!
  likes: Int
  location: UUID
  rating: Int
  review: String
}

type CheckInLike implements Node {
  """Reads a single `CheckIn` that is related to this `CheckInLike`."""
  checkInById: CheckIn
  id: Int!
  likedBy: UUID

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `User` that is related to this `CheckInLike`."""
  userByLikedBy: User
}

"""
A condition to be used against `CheckInLike` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CheckInLikeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `likedBy` field."""
  likedBy: UUID
}

"""An input for mutations affecting `CheckInLike`"""
input CheckInLikeInput {
  id: Int
  likedBy: UUID
}

"""
Represents an update to a `CheckInLike`. Fields that are set will be updated.
"""
input CheckInLikePatch {
  id: Int
  likedBy: UUID
}

"""A connection to a list of `CheckInLike` values."""
type CheckInLikesConnection {
  """
  A list of edges which contains the `CheckInLike` and cursor to aid in pagination.
  """
  edges: [CheckInLikesEdge!]!

  """A list of `CheckInLike` objects."""
  nodes: [CheckInLike]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CheckInLike` you could get from the connection."""
  totalCount: Int!
}

"""A `CheckInLike` edge in the connection."""
type CheckInLikesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CheckInLike` at the end of the edge."""
  node: CheckInLike
}

"""Methods to use when ordering `CheckInLike`."""
enum CheckInLikesOrderBy {
  ID_ASC
  ID_DESC
  LIKED_BY_ASC
  LIKED_BY_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `CheckIn`. Fields that are set will be updated.
"""
input CheckInPatch {
  authorId: UUID
  checkInDate: Date
  createdAt: Datetime
  id: Int
  isPublic: Boolean
  itemId: Int
  likes: Int
  location: UUID
  rating: Int
  review: String
}

type CheckInTag implements Node {
  """Reads a single `CheckIn` that is related to this `CheckInTag`."""
  checkIn: CheckIn
  checkInId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Tag` that is related to this `CheckInTag`."""
  tag: Tag
  tagId: Int!
}

"""
A condition to be used against `CheckInTag` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CheckInTagCondition {
  """Checks for equality with the object’s `checkInId` field."""
  checkInId: Int

  """Checks for equality with the object’s `tagId` field."""
  tagId: Int
}

"""An input for mutations affecting `CheckInTag`"""
input CheckInTagInput {
  checkInId: Int!
  tagId: Int!
}

"""
Represents an update to a `CheckInTag`. Fields that are set will be updated.
"""
input CheckInTagPatch {
  checkInId: Int
  tagId: Int
}

"""A connection to a list of `CheckInTag` values."""
type CheckInTagsConnection {
  """
  A list of edges which contains the `CheckInTag` and cursor to aid in pagination.
  """
  edges: [CheckInTagsEdge!]!

  """A list of `CheckInTag` objects."""
  nodes: [CheckInTag]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CheckInTag` you could get from the connection."""
  totalCount: Int!
}

"""A `CheckInTag` edge in the connection."""
type CheckInTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CheckInTag` at the end of the edge."""
  node: CheckInTag
}

"""Methods to use when ordering `CheckInTag`."""
enum CheckInTagsOrderBy {
  CHECK_IN_ID_ASC
  CHECK_IN_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TAG_ID_ASC
  TAG_ID_DESC
}

"""A connection to a list of `CheckIn` values."""
type CheckInsConnection {
  """
  A list of edges which contains the `CheckIn` and cursor to aid in pagination.
  """
  edges: [CheckInsEdge!]!

  """A list of `CheckIn` objects."""
  nodes: [CheckIn]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CheckIn` you could get from the connection."""
  totalCount: Int!
}

"""A `CheckIn` edge in the connection."""
type CheckInsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CheckIn` at the end of the edge."""
  node: CheckIn
}

"""Methods to use when ordering `CheckIn`."""
enum CheckInsOrderBy {
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  CHECK_IN_DATE_ASC
  CHECK_IN_DATE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  IS_PUBLIC_ASC
  IS_PUBLIC_DESC
  ITEM_ID_ASC
  ITEM_ID_DESC
  LIKES_ASC
  LIKES_DESC
  LOCATION_ASC
  LOCATION_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  RATING_ASC
  RATING_DESC
  REVIEW_ASC
  REVIEW_DESC
}

"""A connection to a list of `Company` values."""
type CompaniesConnection {
  """
  A list of edges which contains the `Company` and cursor to aid in pagination.
  """
  edges: [CompaniesEdge!]!

  """A list of `Company` objects."""
  nodes: [Company]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Company` you could get from the connection."""
  totalCount: Int!
}

"""A `Company` edge in the connection."""
type CompaniesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Company` at the end of the edge."""
  node: Company
}

"""Methods to use when ordering `Company`."""
enum CompaniesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Company implements Node {
  averageRating: Int

  """Reads and enables pagination through a set of `Brand`."""
  brands(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BrandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsConnection!
  checkInsPastMonth: Int

  """Reads and enables pagination through a set of `CompanyLike`."""
  companyLikesById(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyLikeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CompanyLike`."""
    orderBy: [CompanyLikesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompanyLikesConnection!
  createdAt: Datetime!
  createdBy: UUID
  currentUserCheckIns: Int
  description: LongText
  id: Int!
  isVerified: Boolean!

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestionsByManufacturerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """Reads and enables pagination through a set of `Item`."""
  itemsByManufacturerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  totalCheckIns: Int
  totalItems: Int

  """Reads a single `User` that is related to this `Company`."""
  userByCreatedBy: User
}

"""
A condition to be used against `Company` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CompanyCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """Checks for equality with the object’s `description` field."""
  description: LongText

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isVerified` field."""
  isVerified: Boolean

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `Company`"""
input CompanyInput {
  createdAt: Datetime
  createdBy: UUID
  description: LongText
  id: Int
  isVerified: Boolean
  name: String!
}

type CompanyLike implements Node {
  """Reads a single `Company` that is related to this `CompanyLike`."""
  companyById: Company
  id: Int!
  likedBy: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `User` that is related to this `CompanyLike`."""
  userByLikedBy: User
}

"""
A condition to be used against `CompanyLike` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CompanyLikeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `likedBy` field."""
  likedBy: UUID
}

"""An input for mutations affecting `CompanyLike`"""
input CompanyLikeInput {
  id: Int!
  likedBy: UUID!
}

"""
Represents an update to a `CompanyLike`. Fields that are set will be updated.
"""
input CompanyLikePatch {
  id: Int
  likedBy: UUID
}

"""A connection to a list of `CompanyLike` values."""
type CompanyLikesConnection {
  """
  A list of edges which contains the `CompanyLike` and cursor to aid in pagination.
  """
  edges: [CompanyLikesEdge!]!

  """A list of `CompanyLike` objects."""
  nodes: [CompanyLike]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CompanyLike` you could get from the connection."""
  totalCount: Int!
}

"""A `CompanyLike` edge in the connection."""
type CompanyLikesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CompanyLike` at the end of the edge."""
  node: CompanyLike
}

"""Methods to use when ordering `CompanyLike`."""
enum CompanyLikesOrderBy {
  ID_ASC
  ID_DESC
  LIKED_BY_ASC
  LIKED_BY_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Company`. Fields that are set will be updated.
"""
input CompanyPatch {
  createdAt: Datetime
  createdBy: UUID
  description: LongText
  id: Int
  isVerified: Boolean
  name: String
}

"""All input for the `confirmAccountDeletion` mutation."""
input ConfirmAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
}

"""The output of our `confirmAccountDeletion` mutation."""
type ConfirmAccountDeletionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""All input for the create `Brand` mutation."""
input CreateBrandInput {
  """The `Brand` to be created by this mutation."""
  brand: BrandInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Brand` mutation."""
type CreateBrandPayload {
  """The `Brand` that was created by this mutation."""
  brand: Brand

  """An edge for our `Brand`. May be used by Relay 1."""
  brandEdge(
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Company` that is related to this `Brand`."""
  company: Company

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Brand`."""
  userByCreatedBy: User
}

"""All input for the create `Category` mutation."""
input CreateCategoryInput {
  """The `Category` to be created by this mutation."""
  category: CategoryInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Category` mutation."""
type CreateCategoryPayload {
  """The `Category` that was created by this mutation."""
  category: Category

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CheckInComment` mutation."""
input CreateCheckInCommentInput {
  """The `CheckInComment` to be created by this mutation."""
  checkInComment: CheckInCommentInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CheckInComment` mutation."""
type CreateCheckInCommentPayload {
  """Reads a single `CheckIn` that is related to this `CheckInComment`."""
  checkIn: CheckIn

  """The `CheckInComment` that was created by this mutation."""
  checkInComment: CheckInComment

  """An edge for our `CheckInComment`. May be used by Relay 1."""
  checkInCommentEdge(
    """The method to use when ordering `CheckInComment`."""
    orderBy: [CheckInCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInCommentsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CheckInComment`."""
  userByCreatedBy: User
}

"""All input for the create `CheckInFriend` mutation."""
input CreateCheckInFriendInput {
  """The `CheckInFriend` to be created by this mutation."""
  checkInFriend: CheckInFriendInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CheckInFriend` mutation."""
type CreateCheckInFriendPayload {
  """Reads a single `CheckIn` that is related to this `CheckInFriend`."""
  checkIn: CheckIn

  """The `CheckInFriend` that was created by this mutation."""
  checkInFriend: CheckInFriend

  """An edge for our `CheckInFriend`. May be used by Relay 1."""
  checkInFriendEdge(
    """The method to use when ordering `CheckInFriend`."""
    orderBy: [CheckInFriendsOrderBy!] = [NATURAL]
  ): CheckInFriendsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `User` that is related to this `CheckInFriend`."""
  friend: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CheckIn` mutation."""
input CreateCheckInInput {
  """The `CheckIn` to be created by this mutation."""
  checkIn: CheckInInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""All input for the create `CheckInLike` mutation."""
input CreateCheckInLikeInput {
  """The `CheckInLike` to be created by this mutation."""
  checkInLike: CheckInLikeInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CheckInLike` mutation."""
type CreateCheckInLikePayload {
  """Reads a single `CheckIn` that is related to this `CheckInLike`."""
  checkInById: CheckIn

  """The `CheckInLike` that was created by this mutation."""
  checkInLike: CheckInLike

  """An edge for our `CheckInLike`. May be used by Relay 1."""
  checkInLikeEdge(
    """The method to use when ordering `CheckInLike`."""
    orderBy: [CheckInLikesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInLikesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CheckInLike`."""
  userByLikedBy: User
}

"""The output of our create `CheckIn` mutation."""
type CreateCheckInPayload {
  """Reads a single `User` that is related to this `CheckIn`."""
  author: User

  """The `CheckIn` that was created by this mutation."""
  checkIn: CheckIn

  """An edge for our `CheckIn`. May be used by Relay 1."""
  checkInEdge(
    """The method to use when ordering `CheckIn`."""
    orderBy: [CheckInsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Item` that is related to this `CheckIn`."""
  item: Item

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CheckInTag` mutation."""
input CreateCheckInTagInput {
  """The `CheckInTag` to be created by this mutation."""
  checkInTag: CheckInTagInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CheckInTag` mutation."""
type CreateCheckInTagPayload {
  """Reads a single `CheckIn` that is related to this `CheckInTag`."""
  checkIn: CheckIn

  """The `CheckInTag` that was created by this mutation."""
  checkInTag: CheckInTag

  """An edge for our `CheckInTag`. May be used by Relay 1."""
  checkInTagEdge(
    """The method to use when ordering `CheckInTag`."""
    orderBy: [CheckInTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInTagsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tag` that is related to this `CheckInTag`."""
  tag: Tag
}

"""All input for the create `Company` mutation."""
input CreateCompanyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Company` to be created by this mutation."""
  company: CompanyInput!
}

"""All input for the create `CompanyLike` mutation."""
input CreateCompanyLikeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CompanyLike` to be created by this mutation."""
  companyLike: CompanyLikeInput!
}

"""The output of our create `CompanyLike` mutation."""
type CreateCompanyLikePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Company` that is related to this `CompanyLike`."""
  companyById: Company

  """The `CompanyLike` that was created by this mutation."""
  companyLike: CompanyLike

  """An edge for our `CompanyLike`. May be used by Relay 1."""
  companyLikeEdge(
    """The method to use when ordering `CompanyLike`."""
    orderBy: [CompanyLikesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompanyLikesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CompanyLike`."""
  userByLikedBy: User
}

"""The output of our create `Company` mutation."""
type CreateCompanyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Company` that was created by this mutation."""
  company: Company

  """An edge for our `Company`. May be used by Relay 1."""
  companyEdge(
    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompaniesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Company`."""
  userByCreatedBy: User
}

"""All input for the create `Friend` mutation."""
input CreateFriendInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Friend` to be created by this mutation."""
  friend: FriendInput!
}

"""The output of our create `Friend` mutation."""
type CreateFriendPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Friend` that was created by this mutation."""
  friend: Friend

  """An edge for our `Friend`. May be used by Relay 1."""
  friendEdge(
    """The method to use when ordering `Friend`."""
    orderBy: [FriendsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Friend`."""
  userByBlockedBy: User

  """Reads a single `User` that is related to this `Friend`."""
  userByUserId1: User

  """Reads a single `User` that is related to this `Friend`."""
  userByUserId2: User
}

"""All input for the `createFriendRequest` mutation."""
input CreateFriendRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: UUID
}

"""The output of our `createFriendRequest` mutation."""
type CreateFriendRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ItemEditSuggestion` mutation."""
input CreateItemEditSuggestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ItemEditSuggestion` to be created by this mutation."""
  itemEditSuggestion: ItemEditSuggestionInput!
}

"""The output of our create `ItemEditSuggestion` mutation."""
type CreateItemEditSuggestionPayload {
  """Reads a single `User` that is related to this `ItemEditSuggestion`."""
  author: User

  """Reads a single `Brand` that is related to this `ItemEditSuggestion`."""
  brand: Brand

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Item` that is related to this `ItemEditSuggestion`."""
  item: Item

  """The `ItemEditSuggestion` that was created by this mutation."""
  itemEditSuggestion: ItemEditSuggestion

  """An edge for our `ItemEditSuggestion`. May be used by Relay 1."""
  itemEditSuggestionEdge(
    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsEdge

  """Reads a single `Company` that is related to this `ItemEditSuggestion`."""
  manufacturer: Company

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Type` that is related to this `ItemEditSuggestion`."""
  type: Type
}

"""All input for the create `Item` mutation."""
input CreateItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Item` to be created by this mutation."""
  item: ItemInput!
}

"""The output of our create `Item` mutation."""
type CreateItemPayload {
  """Reads a single `Brand` that is related to this `Item`."""
  brand: Brand

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Item` that was created by this mutation."""
  item: Item

  """An edge for our `Item`. May be used by Relay 1."""
  itemEdge(
    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsEdge

  """Reads a single `Company` that is related to this `Item`."""
  manufacturer: Company

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Type` that is related to this `Item`."""
  type: Type

  """Reads a single `User` that is related to this `Item`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `Item`."""
  userByUpdatedBy: User
}

"""All input for the create `PublicCheckIn` mutation."""
input CreatePublicCheckInInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PublicCheckIn` to be created by this mutation."""
  publicCheckIn: PublicCheckInInput!
}

"""The output of our create `PublicCheckIn` mutation."""
type CreatePublicCheckInPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PublicCheckIn` that was created by this mutation."""
  publicCheckIn: PublicCheckIn

  """An edge for our `PublicCheckIn`. May be used by Relay 1."""
  publicCheckInEdge(
    """The method to use when ordering `PublicCheckIn`."""
    orderBy: [PublicCheckInsOrderBy!] = [NATURAL]
  ): PublicCheckInsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Tag` mutation."""
input CreateTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Tag` to be created by this mutation."""
  tag: TagInput!
}

"""The output of our create `Tag` mutation."""
type CreateTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Tag` that was created by this mutation."""
  tag: Tag

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge

  """Reads a single `User` that is related to this `Tag`."""
  userByCreatedBy: User
}

"""All input for the create `Type` mutation."""
input CreateTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Type` to be created by this mutation."""
  type: TypeInput!
}

"""The output of our create `Type` mutation."""
type CreateTypePayload {
  """Reads a single `Category` that is related to this `Type`."""
  categoryByCategory: Category

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Type` that was created by this mutation."""
  type: Type

  """An edge for our `Type`. May be used by Relay 1."""
  typeEdge(
    """The method to use when ordering `Type`."""
    orderBy: [TypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TypesEdge
}

"""All input for the create `UserAuthentication` mutation."""
input CreateUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserAuthentication` to be created by this mutation."""
  userAuthentication: UserAuthenticationInput!
}

"""The output of our create `UserAuthentication` mutation."""
type CreateUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User

  """The `UserAuthentication` that was created by this mutation."""
  userAuthentication: UserAuthentication
}

"""All input for the create `UserEmail` mutation."""
input CreateUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserEmail` to be created by this mutation."""
  userEmail: UserEmailInput!
}

"""The output of our create `UserEmail` mutation."""
type CreateUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """The `UserEmail` that was created by this mutation."""
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was created by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the create `UserSetting` mutation."""
input CreateUserSettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserSetting` to be created by this mutation."""
  userSetting: UserSettingInput!
}

"""The output of our create `UserSetting` mutation."""
type CreateUserSettingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserSetting`."""
  userById: User

  """The `UserSetting` that was created by this mutation."""
  userSetting: UserSetting

  """An edge for our `UserSetting`. May be used by Relay 1."""
  userSettingEdge(
    """The method to use when ordering `UserSetting`."""
    orderBy: [UserSettingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserSettingsEdge
}

type CurrentUserFriend {
  avatarUrl: String
  firstName: String
  id: Int
  lastName: String
  status: FriendStatus
  userId: UUID
  username: String
}

"""
A condition to be used against `CurrentUserFriend` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CurrentUserFriendCondition {
  """Checks for equality with the object’s `avatarUrl` field."""
  avatarUrl: String

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `status` field."""
  status: FriendStatus

  """Checks for equality with the object’s `userId` field."""
  userId: UUID

  """Checks for equality with the object’s `username` field."""
  username: String
}

"""A connection to a list of `CurrentUserFriend` values."""
type CurrentUserFriendsConnection {
  """
  A list of edges which contains the `CurrentUserFriend` and cursor to aid in pagination.
  """
  edges: [CurrentUserFriendsEdge!]!

  """A list of `CurrentUserFriend` objects."""
  nodes: [CurrentUserFriend]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CurrentUserFriend` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CurrentUserFriend` edge in the connection."""
type CurrentUserFriendsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CurrentUserFriend` at the end of the edge."""
  node: CurrentUserFriend
}

"""Methods to use when ordering `CurrentUserFriend`."""
enum CurrentUserFriendsOrderBy {
  AVATAR_URL_ASC
  AVATAR_URL_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  ID_ASC
  ID_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NATURAL
  STATUS_ASC
  STATUS_DESC
  USERNAME_ASC
  USERNAME_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteBrandByCompanyIdAndName` mutation."""
input DeleteBrandByCompanyIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  companyId: Int!
  name: ShortText!
}

"""All input for the `deleteBrandByNodeId` mutation."""
input DeleteBrandByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Brand` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteBrand` mutation."""
input DeleteBrandInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Brand` mutation."""
type DeleteBrandPayload {
  """The `Brand` that was deleted by this mutation."""
  brand: Brand

  """An edge for our `Brand`. May be used by Relay 1."""
  brandEdge(
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Company` that is related to this `Brand`."""
  company: Company
  deletedBrandNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Brand`."""
  userByCreatedBy: User
}

"""All input for the `deleteCategoryByNodeId` mutation."""
input DeleteCategoryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Category` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCategory` mutation."""
input DeleteCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""The output of our delete `Category` mutation."""
type DeleteCategoryPayload {
  """The `Category` that was deleted by this mutation."""
  category: Category

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCategoryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCheckInByNodeId` mutation."""
input DeleteCheckInByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CheckIn` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCheckInCommentByNodeId` mutation."""
input DeleteCheckInCommentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CheckInComment` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCheckInComment` mutation."""
input DeleteCheckInCommentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `CheckInComment` mutation."""
type DeleteCheckInCommentPayload {
  """Reads a single `CheckIn` that is related to this `CheckInComment`."""
  checkIn: CheckIn

  """The `CheckInComment` that was deleted by this mutation."""
  checkInComment: CheckInComment

  """An edge for our `CheckInComment`. May be used by Relay 1."""
  checkInCommentEdge(
    """The method to use when ordering `CheckInComment`."""
    orderBy: [CheckInCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInCommentsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCheckInCommentNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CheckInComment`."""
  userByCreatedBy: User
}

"""All input for the `deleteCheckIn` mutation."""
input DeleteCheckInInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteCheckInLikeByNodeId` mutation."""
input DeleteCheckInLikeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CheckInLike` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCheckInLike` mutation."""
input DeleteCheckInLikeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `CheckInLike` mutation."""
type DeleteCheckInLikePayload {
  """Reads a single `CheckIn` that is related to this `CheckInLike`."""
  checkInById: CheckIn

  """The `CheckInLike` that was deleted by this mutation."""
  checkInLike: CheckInLike

  """An edge for our `CheckInLike`. May be used by Relay 1."""
  checkInLikeEdge(
    """The method to use when ordering `CheckInLike`."""
    orderBy: [CheckInLikesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInLikesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCheckInLikeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CheckInLike`."""
  userByLikedBy: User
}

"""The output of our delete `CheckIn` mutation."""
type DeleteCheckInPayload {
  """Reads a single `User` that is related to this `CheckIn`."""
  author: User

  """The `CheckIn` that was deleted by this mutation."""
  checkIn: CheckIn

  """An edge for our `CheckIn`. May be used by Relay 1."""
  checkInEdge(
    """The method to use when ordering `CheckIn`."""
    orderBy: [CheckInsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCheckInNodeId: ID

  """Reads a single `Item` that is related to this `CheckIn`."""
  item: Item

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCheckInTagByNodeId` mutation."""
input DeleteCheckInTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CheckInTag` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCheckInTag` mutation."""
input DeleteCheckInTagInput {
  checkInId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tagId: Int!
}

"""The output of our delete `CheckInTag` mutation."""
type DeleteCheckInTagPayload {
  """Reads a single `CheckIn` that is related to this `CheckInTag`."""
  checkIn: CheckIn

  """The `CheckInTag` that was deleted by this mutation."""
  checkInTag: CheckInTag

  """An edge for our `CheckInTag`. May be used by Relay 1."""
  checkInTagEdge(
    """The method to use when ordering `CheckInTag`."""
    orderBy: [CheckInTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInTagsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCheckInTagNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tag` that is related to this `CheckInTag`."""
  tag: Tag
}

"""All input for the `deleteCompanyByName` mutation."""
input DeleteCompanyByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the `deleteCompanyByNodeId` mutation."""
input DeleteCompanyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Company` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCompany` mutation."""
input DeleteCompanyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteCompanyLikeByNodeId` mutation."""
input DeleteCompanyLikeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CompanyLike` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCompanyLike` mutation."""
input DeleteCompanyLikeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
  likedBy: UUID!
}

"""The output of our delete `CompanyLike` mutation."""
type DeleteCompanyLikePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Company` that is related to this `CompanyLike`."""
  companyById: Company

  """The `CompanyLike` that was deleted by this mutation."""
  companyLike: CompanyLike

  """An edge for our `CompanyLike`. May be used by Relay 1."""
  companyLikeEdge(
    """The method to use when ordering `CompanyLike`."""
    orderBy: [CompanyLikesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompanyLikesEdge
  deletedCompanyLikeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CompanyLike`."""
  userByLikedBy: User
}

"""The output of our delete `Company` mutation."""
type DeleteCompanyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Company` that was deleted by this mutation."""
  company: Company

  """An edge for our `Company`. May be used by Relay 1."""
  companyEdge(
    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompaniesEdge
  deletedCompanyNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Company`."""
  userByCreatedBy: User
}

"""All input for the `deleteFriendByNodeId` mutation."""
input DeleteFriendByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Friend` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFriend` mutation."""
input DeleteFriendInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId1: UUID!
  userId2: UUID!
}

"""The output of our delete `Friend` mutation."""
type DeleteFriendPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFriendNodeId: ID

  """The `Friend` that was deleted by this mutation."""
  friend: Friend

  """An edge for our `Friend`. May be used by Relay 1."""
  friendEdge(
    """The method to use when ordering `Friend`."""
    orderBy: [FriendsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Friend`."""
  userByBlockedBy: User

  """Reads a single `User` that is related to this `Friend`."""
  userByUserId1: User

  """Reads a single `User` that is related to this `Friend`."""
  userByUserId2: User
}

"""All input for the `deleteItemByBrandIdAndFlavor` mutation."""
input DeleteItemByBrandIdAndFlavorInput {
  brandId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  flavor: String!
}

"""All input for the `deleteItemByNodeId` mutation."""
input DeleteItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Item` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteItemEditSuggestionByNodeId` mutation."""
input DeleteItemEditSuggestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ItemEditSuggestion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteItemEditSuggestion` mutation."""
input DeleteItemEditSuggestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `ItemEditSuggestion` mutation."""
type DeleteItemEditSuggestionPayload {
  """Reads a single `User` that is related to this `ItemEditSuggestion`."""
  author: User

  """Reads a single `Brand` that is related to this `ItemEditSuggestion`."""
  brand: Brand

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedItemEditSuggestionNodeId: ID

  """Reads a single `Item` that is related to this `ItemEditSuggestion`."""
  item: Item

  """The `ItemEditSuggestion` that was deleted by this mutation."""
  itemEditSuggestion: ItemEditSuggestion

  """An edge for our `ItemEditSuggestion`. May be used by Relay 1."""
  itemEditSuggestionEdge(
    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsEdge

  """Reads a single `Company` that is related to this `ItemEditSuggestion`."""
  manufacturer: Company

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Type` that is related to this `ItemEditSuggestion`."""
  type: Type
}

"""All input for the `deleteItem` mutation."""
input DeleteItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Item` mutation."""
type DeleteItemPayload {
  """Reads a single `Brand` that is related to this `Item`."""
  brand: Brand

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedItemNodeId: ID

  """The `Item` that was deleted by this mutation."""
  item: Item

  """An edge for our `Item`. May be used by Relay 1."""
  itemEdge(
    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsEdge

  """Reads a single `Company` that is related to this `Item`."""
  manufacturer: Company

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Type` that is related to this `Item`."""
  type: Type

  """Reads a single `User` that is related to this `Item`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `Item`."""
  userByUpdatedBy: User
}

"""All input for the `deleteTagByName` mutation."""
input DeleteTagByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the `deleteTagByNodeId` mutation."""
input DeleteTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Tag` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTag` mutation."""
input DeleteTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Tag` mutation."""
type DeleteTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTagNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Tag` that was deleted by this mutation."""
  tag: Tag

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge

  """Reads a single `User` that is related to this `Tag`."""
  userByCreatedBy: User
}

"""All input for the `deleteTypeByNameAndCategory` mutation."""
input DeleteTypeByNameAndCategoryInput {
  category: String!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the `deleteTypeByNodeId` mutation."""
input DeleteTypeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Type` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteType` mutation."""
input DeleteTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Type` mutation."""
type DeleteTypePayload {
  """Reads a single `Category` that is related to this `Type`."""
  categoryByCategory: Category

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTypeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Type` that was deleted by this mutation."""
  type: Type

  """An edge for our `Type`. May be used by Relay 1."""
  typeEdge(
    """The method to use when ordering `Type`."""
    orderBy: [TypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TypesEdge
}

"""All input for the `deleteUserAuthenticationByNodeId` mutation."""
input DeleteUserAuthenticationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAuthentication` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserAuthentication` mutation."""
input DeleteUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `UserAuthentication` mutation."""
type DeleteUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserAuthenticationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User

  """The `UserAuthentication` that was deleted by this mutation."""
  userAuthentication: UserAuthentication
}

"""All input for the `deleteUserByNodeId` mutation."""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserByUsername` mutation."""
input DeleteUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Public-facing username (or 'handle') of the user."""
  username: String!
}

"""All input for the `deleteUserEmailByNodeId` mutation."""
input DeleteUserEmailByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserEmail` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserEmail` mutation."""
input DeleteUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `UserEmail` mutation."""
type DeleteUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserEmailNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """The `UserEmail` that was deleted by this mutation."""
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user."""
  id: UUID!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was deleted by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `deleteUserSettingByNodeId` mutation."""
input DeleteUserSettingByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserSetting` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserSetting` mutation."""
input DeleteUserSettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `UserSetting` mutation."""
type DeleteUserSettingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserSettingNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserSetting`."""
  userById: User

  """The `UserSetting` that was deleted by this mutation."""
  userSetting: UserSetting

  """An edge for our `UserSetting`. May be used by Relay 1."""
  userSettingEdge(
    """The method to use when ordering `UserSetting`."""
    orderBy: [UserSettingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserSettingsEdge
}

"""All input for the `forgotPassword` mutation."""
input ForgotPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""The output of our `forgotPassword` mutation."""
type ForgotPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Friend implements Node {
  accepted: Date
  blockedBy: UUID
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  sent: Date!
  status: FriendStatus!

  """Reads a single `User` that is related to this `Friend`."""
  userByBlockedBy: User

  """Reads a single `User` that is related to this `Friend`."""
  userByUserId1: User

  """Reads a single `User` that is related to this `Friend`."""
  userByUserId2: User
  userId1: UUID!
  userId2: UUID!
}

"""
A condition to be used against `Friend` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FriendCondition {
  """Checks for equality with the object’s `accepted` field."""
  accepted: Date

  """Checks for equality with the object’s `blockedBy` field."""
  blockedBy: UUID

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `sent` field."""
  sent: Date

  """Checks for equality with the object’s `status` field."""
  status: FriendStatus

  """Checks for equality with the object’s `userId1` field."""
  userId1: UUID

  """Checks for equality with the object’s `userId2` field."""
  userId2: UUID
}

"""An input for mutations affecting `Friend`"""
input FriendInput {
  accepted: Date
  blockedBy: UUID
  id: Int
  sent: Date
  status: FriendStatus
  userId1: UUID!
  userId2: UUID!
}

"""
Represents an update to a `Friend`. Fields that are set will be updated.
"""
input FriendPatch {
  accepted: Date
  blockedBy: UUID
  id: Int
  sent: Date
  status: FriendStatus
  userId1: UUID
  userId2: UUID
}

enum FriendStatus {
  ACCEPTED
  BLOCKED
  PENDING
}

"""A connection to a list of `Friend` values."""
type FriendsConnection {
  """
  A list of edges which contains the `Friend` and cursor to aid in pagination.
  """
  edges: [FriendsEdge!]!

  """A list of `Friend` objects."""
  nodes: [Friend]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Friend` you could get from the connection."""
  totalCount: Int!
}

"""A `Friend` edge in the connection."""
type FriendsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Friend` at the end of the edge."""
  node: Friend
}

"""Methods to use when ordering `Friend`."""
enum FriendsOrderBy {
  ACCEPTED_ASC
  ACCEPTED_DESC
  BLOCKED_BY_ASC
  BLOCKED_BY_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SENT_ASC
  SENT_DESC
  STATUS_ASC
  STATUS_DESC
  USER_ID_1_ASC
  USER_ID_1_DESC
  USER_ID_2_ASC
  USER_ID_2_DESC
}

"""Item defines a product that can be rated"""
type Item implements Node {
  """Reads and enables pagination through a set of `ActivityFeed`."""
  activityFeeds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActivityFeedCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ActivityFeed`."""
    orderBy: [ActivityFeedsOrderBy!] = [NATURAL]
  ): ActivityFeedsConnection!
  averageRating: BigFloat

  """Reads a single `Brand` that is related to this `Item`."""
  brand: Brand
  brandId: Int!

  """Reads and enables pagination through a set of `CheckIn`."""
  checkIns(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckIn`."""
    orderBy: [CheckInsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInsConnection!
  checkInsPastMonth: Int
  createdAt: Datetime!
  createdBy: UUID
  currentUserCheckIns: Int
  description: String
  flavor: String
  id: Int!
  isTasted: Boolean
  isVerified: Boolean

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """Reads a single `Company` that is related to this `Item`."""
  manufacturer: Company
  manufacturerId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  totalCheckIns: Int

  """Reads a single `Type` that is related to this `Item`."""
  type: Type
  typeId: Int!
  uniqueCheckIns: Int
  updatedAt: Datetime!
  updatedBy: UUID

  """Reads a single `User` that is related to this `Item`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `Item`."""
  userByUpdatedBy: User
}

"""
A condition to be used against `Item` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ItemCondition {
  """Checks for equality with the object’s `brandId` field."""
  brandId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `flavor` field."""
  flavor: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isVerified` field."""
  isVerified: Boolean

  """Checks for equality with the object’s `manufacturerId` field."""
  manufacturerId: Int

  """Checks for equality with the object’s `typeId` field."""
  typeId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: UUID
}

type ItemEditSuggestion implements Node {
  accepted: Datetime

  """Reads a single `User` that is related to this `ItemEditSuggestion`."""
  author: User
  authorId: UUID!

  """Reads a single `Brand` that is related to this `ItemEditSuggestion`."""
  brand: Brand
  brandId: Int!
  createdAt: Datetime!
  description: LongText
  flavor: ShortText
  id: Int!

  """Reads a single `Item` that is related to this `ItemEditSuggestion`."""
  item: Item
  itemId: Int!

  """Reads a single `Company` that is related to this `ItemEditSuggestion`."""
  manufacturer: Company
  manufacturerId: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Type` that is related to this `ItemEditSuggestion`."""
  type: Type
  typeId: Int!
}

"""
A condition to be used against `ItemEditSuggestion` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ItemEditSuggestionCondition {
  """Checks for equality with the object’s `accepted` field."""
  accepted: Datetime

  """Checks for equality with the object’s `authorId` field."""
  authorId: UUID

  """Checks for equality with the object’s `brandId` field."""
  brandId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: LongText

  """Checks for equality with the object’s `flavor` field."""
  flavor: ShortText

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `itemId` field."""
  itemId: Int

  """Checks for equality with the object’s `manufacturerId` field."""
  manufacturerId: Int

  """Checks for equality with the object’s `typeId` field."""
  typeId: Int
}

"""An input for mutations affecting `ItemEditSuggestion`"""
input ItemEditSuggestionInput {
  accepted: Datetime
  authorId: UUID!
  brandId: Int!
  createdAt: Datetime
  description: LongText
  flavor: ShortText
  id: Int
  itemId: Int!
  manufacturerId: Int
  typeId: Int!
}

"""
Represents an update to a `ItemEditSuggestion`. Fields that are set will be updated.
"""
input ItemEditSuggestionPatch {
  accepted: Datetime
  authorId: UUID
  brandId: Int
  createdAt: Datetime
  description: LongText
  flavor: ShortText
  id: Int
  itemId: Int
  manufacturerId: Int
  typeId: Int
}

"""A connection to a list of `ItemEditSuggestion` values."""
type ItemEditSuggestionsConnection {
  """
  A list of edges which contains the `ItemEditSuggestion` and cursor to aid in pagination.
  """
  edges: [ItemEditSuggestionsEdge!]!

  """A list of `ItemEditSuggestion` objects."""
  nodes: [ItemEditSuggestion]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ItemEditSuggestion` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ItemEditSuggestion` edge in the connection."""
type ItemEditSuggestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ItemEditSuggestion` at the end of the edge."""
  node: ItemEditSuggestion
}

"""Methods to use when ordering `ItemEditSuggestion`."""
enum ItemEditSuggestionsOrderBy {
  ACCEPTED_ASC
  ACCEPTED_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  BRAND_ID_ASC
  BRAND_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FLAVOR_ASC
  FLAVOR_DESC
  ID_ASC
  ID_DESC
  ITEM_ID_ASC
  ITEM_ID_DESC
  MANUFACTURER_ID_ASC
  MANUFACTURER_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
}

"""An input for mutations affecting `Item`"""
input ItemInput {
  brandId: Int!
  createdAt: Datetime
  createdBy: UUID
  description: String
  flavor: String
  id: Int
  isVerified: Boolean
  manufacturerId: Int!
  typeId: Int!
  updatedAt: Datetime
  updatedBy: UUID
}

"""Represents an update to a `Item`. Fields that are set will be updated."""
input ItemPatch {
  brandId: Int
  createdAt: Datetime
  createdBy: UUID
  description: String
  flavor: String
  id: Int
  isVerified: Boolean
  manufacturerId: Int
  typeId: Int
  updatedAt: Datetime
  updatedBy: UUID
}

"""A connection to a list of `Item` values."""
type ItemsConnection {
  """
  A list of edges which contains the `Item` and cursor to aid in pagination.
  """
  edges: [ItemsEdge!]!

  """A list of `Item` objects."""
  nodes: [Item]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Item` you could get from the connection."""
  totalCount: Int!
}

"""A `Item` edge in the connection."""
type ItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Item` at the end of the edge."""
  node: Item
}

"""Methods to use when ordering `Item`."""
enum ItemsOrderBy {
  BRAND_ID_ASC
  BRAND_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FLAVOR_ASC
  FLAVOR_DESC
  ID_ASC
  ID_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  MANUFACTURER_ID_ASC
  MANUFACTURER_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""All input for the `likeCheckIn` mutation."""
input LikeCheckInInput {
  checkInId: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `likeCheckIn` mutation."""
type LikeCheckInPayload {
  """Reads a single `User` that is related to this `CheckIn`."""
  author: User
  checkIn: CheckIn

  """An edge for our `CheckIn`. May be used by Relay 1."""
  checkInEdge(
    """The method to use when ordering `CheckIn`."""
    orderBy: [CheckInsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Item` that is related to this `CheckIn`."""
  item: Item

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

scalar LongText

"""All input for the `makeEmailPrimary` mutation."""
input MakeEmailPrimaryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailId: UUID!
}

"""The output of our `makeEmailPrimary` mutation."""
type MakeEmailPrimaryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  acceptFriendRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AcceptFriendRequestInput!
  ): AcceptFriendRequestPayload

  """Enter your old password and a new password to change your password."""
  changePassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ChangePasswordInput!
  ): ChangePasswordPayload

  """
  If you're certain you want to delete your account, use `requestAccountDeletion` to request an account deletion token, and then supply the token through this mutation to complete account deletion.
  """
  confirmAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ConfirmAccountDeletionInput!
  ): ConfirmAccountDeletionPayload

  """Creates a single `Brand`."""
  createBrand(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBrandInput!
  ): CreateBrandPayload

  """Creates a single `Category`."""
  createCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCategoryInput!
  ): CreateCategoryPayload

  """Creates a single `CheckIn`."""
  createCheckIn(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCheckInInput!
  ): CreateCheckInPayload

  """Creates a single `CheckInComment`."""
  createCheckInComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCheckInCommentInput!
  ): CreateCheckInCommentPayload

  """Creates a single `CheckInFriend`."""
  createCheckInFriend(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCheckInFriendInput!
  ): CreateCheckInFriendPayload

  """Creates a single `CheckInLike`."""
  createCheckInLike(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCheckInLikeInput!
  ): CreateCheckInLikePayload

  """Creates a single `CheckInTag`."""
  createCheckInTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCheckInTagInput!
  ): CreateCheckInTagPayload

  """Creates a single `Company`."""
  createCompany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCompanyInput!
  ): CreateCompanyPayload

  """Creates a single `CompanyLike`."""
  createCompanyLike(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCompanyLikeInput!
  ): CreateCompanyLikePayload

  """Creates a single `Friend`."""
  createFriend(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFriendInput!
  ): CreateFriendPayload
  createFriendRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFriendRequestInput!
  ): CreateFriendRequestPayload

  """Creates a single `Item`."""
  createItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateItemInput!
  ): CreateItemPayload

  """Creates a single `ItemEditSuggestion`."""
  createItemEditSuggestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateItemEditSuggestionInput!
  ): CreateItemEditSuggestionPayload

  """Creates a single `PublicCheckIn`."""
  createPublicCheckIn(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePublicCheckInInput!
  ): CreatePublicCheckInPayload

  """Creates a single `Tag`."""
  createTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTagInput!
  ): CreateTagPayload

  """Creates a single `Type`."""
  createType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTypeInput!
  ): CreateTypePayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Creates a single `UserAuthentication`."""
  createUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserAuthenticationInput!
  ): CreateUserAuthenticationPayload

  """Creates a single `UserEmail`."""
  createUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserEmailInput!
  ): CreateUserEmailPayload

  """Creates a single `UserSetting`."""
  createUserSetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserSettingInput!
  ): CreateUserSettingPayload

  """Deletes a single `Brand` using a unique key."""
  deleteBrand(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBrandInput!
  ): DeleteBrandPayload

  """Deletes a single `Brand` using a unique key."""
  deleteBrandByCompanyIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBrandByCompanyIdAndNameInput!
  ): DeleteBrandPayload

  """Deletes a single `Brand` using its globally unique id."""
  deleteBrandByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBrandByNodeIdInput!
  ): DeleteBrandPayload

  """Deletes a single `Category` using a unique key."""
  deleteCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCategoryInput!
  ): DeleteCategoryPayload

  """Deletes a single `Category` using its globally unique id."""
  deleteCategoryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCategoryByNodeIdInput!
  ): DeleteCategoryPayload

  """Deletes a single `CheckIn` using a unique key."""
  deleteCheckIn(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCheckInInput!
  ): DeleteCheckInPayload

  """Deletes a single `CheckIn` using its globally unique id."""
  deleteCheckInByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCheckInByNodeIdInput!
  ): DeleteCheckInPayload

  """Deletes a single `CheckInComment` using a unique key."""
  deleteCheckInComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCheckInCommentInput!
  ): DeleteCheckInCommentPayload

  """Deletes a single `CheckInComment` using its globally unique id."""
  deleteCheckInCommentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCheckInCommentByNodeIdInput!
  ): DeleteCheckInCommentPayload

  """Deletes a single `CheckInLike` using a unique key."""
  deleteCheckInLike(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCheckInLikeInput!
  ): DeleteCheckInLikePayload

  """Deletes a single `CheckInLike` using its globally unique id."""
  deleteCheckInLikeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCheckInLikeByNodeIdInput!
  ): DeleteCheckInLikePayload

  """Deletes a single `CheckInTag` using a unique key."""
  deleteCheckInTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCheckInTagInput!
  ): DeleteCheckInTagPayload

  """Deletes a single `CheckInTag` using its globally unique id."""
  deleteCheckInTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCheckInTagByNodeIdInput!
  ): DeleteCheckInTagPayload

  """Deletes a single `Company` using a unique key."""
  deleteCompany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompanyInput!
  ): DeleteCompanyPayload

  """Deletes a single `Company` using a unique key."""
  deleteCompanyByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompanyByNameInput!
  ): DeleteCompanyPayload

  """Deletes a single `Company` using its globally unique id."""
  deleteCompanyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompanyByNodeIdInput!
  ): DeleteCompanyPayload

  """Deletes a single `CompanyLike` using a unique key."""
  deleteCompanyLike(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompanyLikeInput!
  ): DeleteCompanyLikePayload

  """Deletes a single `CompanyLike` using its globally unique id."""
  deleteCompanyLikeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompanyLikeByNodeIdInput!
  ): DeleteCompanyLikePayload

  """Deletes a single `Friend` using a unique key."""
  deleteFriend(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFriendInput!
  ): DeleteFriendPayload

  """Deletes a single `Friend` using its globally unique id."""
  deleteFriendByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFriendByNodeIdInput!
  ): DeleteFriendPayload

  """Deletes a single `Item` using a unique key."""
  deleteItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemInput!
  ): DeleteItemPayload

  """Deletes a single `Item` using a unique key."""
  deleteItemByBrandIdAndFlavor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemByBrandIdAndFlavorInput!
  ): DeleteItemPayload

  """Deletes a single `Item` using its globally unique id."""
  deleteItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemByNodeIdInput!
  ): DeleteItemPayload

  """Deletes a single `ItemEditSuggestion` using a unique key."""
  deleteItemEditSuggestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemEditSuggestionInput!
  ): DeleteItemEditSuggestionPayload

  """Deletes a single `ItemEditSuggestion` using its globally unique id."""
  deleteItemEditSuggestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemEditSuggestionByNodeIdInput!
  ): DeleteItemEditSuggestionPayload

  """Deletes a single `Tag` using a unique key."""
  deleteTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagInput!
  ): DeleteTagPayload

  """Deletes a single `Tag` using a unique key."""
  deleteTagByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagByNameInput!
  ): DeleteTagPayload

  """Deletes a single `Tag` using its globally unique id."""
  deleteTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagByNodeIdInput!
  ): DeleteTagPayload

  """Deletes a single `Type` using a unique key."""
  deleteType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTypeInput!
  ): DeleteTypePayload

  """Deletes a single `Type` using a unique key."""
  deleteTypeByNameAndCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTypeByNameAndCategoryInput!
  ): DeleteTypePayload

  """Deletes a single `Type` using its globally unique id."""
  deleteTypeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTypeByNodeIdInput!
  ): DeleteTypePayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `UserAuthentication` using a unique key."""
  deleteUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserAuthentication` using its globally unique id."""
  deleteUserAuthenticationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationByNodeIdInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByUsernameInput!
  ): DeleteUserPayload

  """Deletes a single `UserEmail` using a unique key."""
  deleteUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailInput!
  ): DeleteUserEmailPayload

  """Deletes a single `UserEmail` using its globally unique id."""
  deleteUserEmailByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailByNodeIdInput!
  ): DeleteUserEmailPayload

  """Deletes a single `UserSetting` using a unique key."""
  deleteUserSetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserSettingInput!
  ): DeleteUserSettingPayload

  """Deletes a single `UserSetting` using its globally unique id."""
  deleteUserSettingByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserSettingByNodeIdInput!
  ): DeleteUserSettingPayload

  """
  If you've forgotten your password, give us one of your email addresses and we'll send you a reset token. Note this only works if you have added an email address!
  """
  forgotPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ForgotPasswordInput!
  ): ForgotPasswordPayload
  likeCheckIn(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LikeCheckInInput!
  ): LikeCheckInPayload

  """
  Your primary email is where we'll notify of account events; other emails may be used for discovery or login. Use this when you're changing your email address.
  """
  makeEmailPrimary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MakeEmailPrimaryInput!
  ): MakeEmailPrimaryPayload

  """Begin the account deletion flow by requesting the confirmation email"""
  requestAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RequestAccountDeletionInput!
  ): RequestAccountDeletionPayload

  """
  If you didn't receive the verification code for this email, we can resend it. We silently cap the rate of resends on the backend, so calls to this function may not result in another email being sent if it has been called recently.
  """
  resendEmailVerificationCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResendEmailVerificationCodeInput!
  ): ResendEmailVerificationCodePayload

  """Updates a single `Brand` using a unique key and a patch."""
  updateBrand(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBrandInput!
  ): UpdateBrandPayload

  """Updates a single `Brand` using a unique key and a patch."""
  updateBrandByCompanyIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBrandByCompanyIdAndNameInput!
  ): UpdateBrandPayload

  """Updates a single `Brand` using its globally unique id and a patch."""
  updateBrandByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBrandByNodeIdInput!
  ): UpdateBrandPayload

  """Updates a single `Category` using a unique key and a patch."""
  updateCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCategoryInput!
  ): UpdateCategoryPayload

  """Updates a single `Category` using its globally unique id and a patch."""
  updateCategoryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCategoryByNodeIdInput!
  ): UpdateCategoryPayload

  """Updates a single `CheckIn` using a unique key and a patch."""
  updateCheckIn(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCheckInInput!
  ): UpdateCheckInPayload

  """Updates a single `CheckIn` using its globally unique id and a patch."""
  updateCheckInByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCheckInByNodeIdInput!
  ): UpdateCheckInPayload

  """Updates a single `CheckInComment` using a unique key and a patch."""
  updateCheckInComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCheckInCommentInput!
  ): UpdateCheckInCommentPayload

  """
  Updates a single `CheckInComment` using its globally unique id and a patch.
  """
  updateCheckInCommentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCheckInCommentByNodeIdInput!
  ): UpdateCheckInCommentPayload

  """Updates a single `CheckInLike` using a unique key and a patch."""
  updateCheckInLike(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCheckInLikeInput!
  ): UpdateCheckInLikePayload

  """
  Updates a single `CheckInLike` using its globally unique id and a patch.
  """
  updateCheckInLikeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCheckInLikeByNodeIdInput!
  ): UpdateCheckInLikePayload

  """Updates a single `CheckInTag` using a unique key and a patch."""
  updateCheckInTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCheckInTagInput!
  ): UpdateCheckInTagPayload

  """
  Updates a single `CheckInTag` using its globally unique id and a patch.
  """
  updateCheckInTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCheckInTagByNodeIdInput!
  ): UpdateCheckInTagPayload

  """Updates a single `Company` using a unique key and a patch."""
  updateCompany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompanyInput!
  ): UpdateCompanyPayload

  """Updates a single `Company` using a unique key and a patch."""
  updateCompanyByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompanyByNameInput!
  ): UpdateCompanyPayload

  """Updates a single `Company` using its globally unique id and a patch."""
  updateCompanyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompanyByNodeIdInput!
  ): UpdateCompanyPayload

  """Updates a single `CompanyLike` using a unique key and a patch."""
  updateCompanyLike(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompanyLikeInput!
  ): UpdateCompanyLikePayload

  """
  Updates a single `CompanyLike` using its globally unique id and a patch.
  """
  updateCompanyLikeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompanyLikeByNodeIdInput!
  ): UpdateCompanyLikePayload

  """Updates a single `Friend` using a unique key and a patch."""
  updateFriend(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFriendInput!
  ): UpdateFriendPayload

  """Updates a single `Friend` using its globally unique id and a patch."""
  updateFriendByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFriendByNodeIdInput!
  ): UpdateFriendPayload

  """Updates a single `Item` using a unique key and a patch."""
  updateItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemInput!
  ): UpdateItemPayload

  """Updates a single `Item` using a unique key and a patch."""
  updateItemByBrandIdAndFlavor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemByBrandIdAndFlavorInput!
  ): UpdateItemPayload

  """Updates a single `Item` using its globally unique id and a patch."""
  updateItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemByNodeIdInput!
  ): UpdateItemPayload

  """Updates a single `ItemEditSuggestion` using a unique key and a patch."""
  updateItemEditSuggestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemEditSuggestionInput!
  ): UpdateItemEditSuggestionPayload

  """
  Updates a single `ItemEditSuggestion` using its globally unique id and a patch.
  """
  updateItemEditSuggestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemEditSuggestionByNodeIdInput!
  ): UpdateItemEditSuggestionPayload

  """Updates a single `Tag` using a unique key and a patch."""
  updateTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagInput!
  ): UpdateTagPayload

  """Updates a single `Tag` using a unique key and a patch."""
  updateTagByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagByNameInput!
  ): UpdateTagPayload

  """Updates a single `Tag` using its globally unique id and a patch."""
  updateTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagByNodeIdInput!
  ): UpdateTagPayload

  """Updates a single `Type` using a unique key and a patch."""
  updateType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTypeInput!
  ): UpdateTypePayload

  """Updates a single `Type` using a unique key and a patch."""
  updateTypeByNameAndCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTypeByNameAndCategoryInput!
  ): UpdateTypePayload

  """Updates a single `Type` using its globally unique id and a patch."""
  updateTypeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTypeByNodeIdInput!
  ): UpdateTypePayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `UserAuthentication` using a unique key and a patch."""
  updateUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAuthenticationInput!
  ): UpdateUserAuthenticationPayload

  """
  Updates a single `UserAuthentication` using its globally unique id and a patch.
  """
  updateUserAuthenticationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAuthenticationByNodeIdInput!
  ): UpdateUserAuthenticationPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUsernameInput!
  ): UpdateUserPayload

  """Updates a single `UserEmail` using a unique key and a patch."""
  updateUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserEmailInput!
  ): UpdateUserEmailPayload

  """Updates a single `UserEmail` using its globally unique id and a patch."""
  updateUserEmailByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserEmailByNodeIdInput!
  ): UpdateUserEmailPayload

  """Updates a single `UserSetting` using a unique key and a patch."""
  updateUserSetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserSettingInput!
  ): UpdateUserSettingPayload

  """
  Updates a single `UserSetting` using its globally unique id and a patch.
  """
  updateUserSettingByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserSettingByNodeIdInput!
  ): UpdateUserSettingPayload

  """
  Once you have received a verification token for your email, you may call this mutation with that token to make your email verified.
  """
  verifyEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: VerifyEmailInput!
  ): VerifyEmailPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type PublicCheckIn {
  authorId: UUID
  checkInDate: Date
  createdAt: Datetime
  id: Int
  isPublic: Boolean
  itemId: Int
  location: UUID
  rating: Int
  review: String
}

"""
A condition to be used against `PublicCheckIn` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PublicCheckInCondition {
  """Checks for equality with the object’s `authorId` field."""
  authorId: UUID

  """Checks for equality with the object’s `checkInDate` field."""
  checkInDate: Date

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isPublic` field."""
  isPublic: Boolean

  """Checks for equality with the object’s `itemId` field."""
  itemId: Int

  """Checks for equality with the object’s `location` field."""
  location: UUID

  """Checks for equality with the object’s `rating` field."""
  rating: Int

  """Checks for equality with the object’s `review` field."""
  review: String
}

"""An input for mutations affecting `PublicCheckIn`"""
input PublicCheckInInput {
  authorId: UUID
  checkInDate: Date
  createdAt: Datetime
  id: Int
  isPublic: Boolean
  itemId: Int
  location: UUID
  rating: Int
  review: String
}

"""A connection to a list of `PublicCheckIn` values."""
type PublicCheckInsConnection {
  """
  A list of edges which contains the `PublicCheckIn` and cursor to aid in pagination.
  """
  edges: [PublicCheckInsEdge!]!

  """A list of `PublicCheckIn` objects."""
  nodes: [PublicCheckIn]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PublicCheckIn` you could get from the connection."""
  totalCount: Int!
}

"""A `PublicCheckIn` edge in the connection."""
type PublicCheckInsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PublicCheckIn` at the end of the edge."""
  node: PublicCheckIn
}

"""Methods to use when ordering `PublicCheckIn`."""
enum PublicCheckInsOrderBy {
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  CHECK_IN_DATE_ASC
  CHECK_IN_DATE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  IS_PUBLIC_ASC
  IS_PUBLIC_DESC
  ITEM_ID_ASC
  ITEM_ID_DESC
  LOCATION_ASC
  LOCATION_DESC
  NATURAL
  RATING_ASC
  RATING_DESC
  REVIEW_ASC
  REVIEW_DESC
}

type PublicUser {
  avatarUrl: String
  country: String
  createdAt: Datetime
  firstName: String
  id: UUID
  isAdmin: Boolean
  isVerified: Boolean
  lastName: String
  location: String
  status: FriendStatus
  updatedAt: Datetime
  username: String
}

"""
A condition to be used against `PublicUser` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PublicUserCondition {
  """Checks for equality with the object’s `avatarUrl` field."""
  avatarUrl: String

  """Checks for equality with the object’s `country` field."""
  country: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isAdmin` field."""
  isAdmin: Boolean

  """Checks for equality with the object’s `isVerified` field."""
  isVerified: Boolean

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `location` field."""
  location: String

  """Checks for equality with the object’s `status` field."""
  status: FriendStatus

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `username` field."""
  username: String
}

"""A connection to a list of `PublicUser` values."""
type PublicUsersConnection {
  """
  A list of edges which contains the `PublicUser` and cursor to aid in pagination.
  """
  edges: [PublicUsersEdge!]!

  """A list of `PublicUser` objects."""
  nodes: [PublicUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PublicUser` you could get from the connection."""
  totalCount: Int!
}

"""A `PublicUser` edge in the connection."""
type PublicUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PublicUser` at the end of the edge."""
  node: PublicUser
}

"""Methods to use when ordering `PublicUser`."""
enum PublicUsersOrderBy {
  AVATAR_URL_ASC
  AVATAR_URL_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  ID_ASC
  ID_DESC
  IS_ADMIN_ASC
  IS_ADMIN_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  LOCATION_ASC
  LOCATION_DESC
  NATURAL
  STATUS_ASC
  STATUS_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USERNAME_ASC
  USERNAME_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of `ActivityFeed`."""
  activityFeeds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActivityFeedCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ActivityFeed`."""
    orderBy: [ActivityFeedsOrderBy!] = [NATURAL]
  ): ActivityFeedsConnection
  brand(id: Int!): Brand
  brandByCompanyIdAndName(companyId: Int!, name: ShortText!): Brand

  """Reads a single `Brand` using its globally unique `ID`."""
  brandByNodeId(
    """The globally unique `ID` to be used in selecting a single `Brand`."""
    nodeId: ID!
  ): Brand

  """Reads and enables pagination through a set of `Brand`."""
  brands(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BrandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsConnection

  """Reads and enables pagination through a set of `Category`."""
  categories(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CategoryCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesConnection
  category(name: String!): Category

  """Reads a single `Category` using its globally unique `ID`."""
  categoryByNodeId(
    """The globally unique `ID` to be used in selecting a single `Category`."""
    nodeId: ID!
  ): Category
  checkIn(id: Int!): CheckIn

  """Reads a single `CheckIn` using its globally unique `ID`."""
  checkInByNodeId(
    """The globally unique `ID` to be used in selecting a single `CheckIn`."""
    nodeId: ID!
  ): CheckIn
  checkInComment(id: Int!): CheckInComment

  """Reads a single `CheckInComment` using its globally unique `ID`."""
  checkInCommentByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CheckInComment`.
    """
    nodeId: ID!
  ): CheckInComment

  """Reads and enables pagination through a set of `CheckInComment`."""
  checkInComments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInCommentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckInComment`."""
    orderBy: [CheckInCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInCommentsConnection

  """Reads and enables pagination through a set of `CheckInFriend`."""
  checkInFriends(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInFriendCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckInFriend`."""
    orderBy: [CheckInFriendsOrderBy!] = [NATURAL]
  ): CheckInFriendsConnection
  checkInLike(id: Int!): CheckInLike

  """Reads a single `CheckInLike` using its globally unique `ID`."""
  checkInLikeByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CheckInLike`.
    """
    nodeId: ID!
  ): CheckInLike

  """Reads and enables pagination through a set of `CheckInLike`."""
  checkInLikes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInLikeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckInLike`."""
    orderBy: [CheckInLikesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInLikesConnection
  checkInTag(checkInId: Int!, tagId: Int!): CheckInTag

  """Reads a single `CheckInTag` using its globally unique `ID`."""
  checkInTagByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CheckInTag`.
    """
    nodeId: ID!
  ): CheckInTag

  """Reads and enables pagination through a set of `CheckInTag`."""
  checkInTags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInTagCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckInTag`."""
    orderBy: [CheckInTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInTagsConnection

  """Reads and enables pagination through a set of `CheckIn`."""
  checkIns(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckIn`."""
    orderBy: [CheckInsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInsConnection

  """Reads and enables pagination through a set of `Company`."""
  companies(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompaniesConnection
  company(id: Int!): Company
  companyByName(name: String!): Company

  """Reads a single `Company` using its globally unique `ID`."""
  companyByNodeId(
    """The globally unique `ID` to be used in selecting a single `Company`."""
    nodeId: ID!
  ): Company
  companyLike(id: Int!, likedBy: UUID!): CompanyLike

  """Reads a single `CompanyLike` using its globally unique `ID`."""
  companyLikeByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CompanyLike`.
    """
    nodeId: ID!
  ): CompanyLike

  """Reads and enables pagination through a set of `CompanyLike`."""
  companyLikes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyLikeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CompanyLike`."""
    orderBy: [CompanyLikesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompanyLikesConnection

  """The currently logged in user (or null if not logged in)."""
  currentUser: User

  """Reads and enables pagination through a set of `CurrentUserFriend`."""
  currentUserFriends(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CurrentUserFriendCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CurrentUserFriend`."""
    orderBy: [CurrentUserFriendsOrderBy!] = [NATURAL]
  ): CurrentUserFriendsConnection
  currentUserIsPrivileged: Boolean
  friend(userId1: UUID!, userId2: UUID!): Friend

  """Reads a single `Friend` using its globally unique `ID`."""
  friendByNodeId(
    """The globally unique `ID` to be used in selecting a single `Friend`."""
    nodeId: ID!
  ): Friend

  """Reads and enables pagination through a set of `Friend`."""
  friends(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FriendCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Friend`."""
    orderBy: [FriendsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendsConnection
  item(id: Int!): Item
  itemByBrandIdAndFlavor(brandId: Int!, flavor: String!): Item

  """Reads a single `Item` using its globally unique `ID`."""
  itemByNodeId(
    """The globally unique `ID` to be used in selecting a single `Item`."""
    nodeId: ID!
  ): Item
  itemEditSuggestion(id: Int!): ItemEditSuggestion

  """Reads a single `ItemEditSuggestion` using its globally unique `ID`."""
  itemEditSuggestionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ItemEditSuggestion`.
    """
    nodeId: ID!
  ): ItemEditSuggestion

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection

  """Reads and enables pagination through a set of `Item`."""
  items(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `PublicCheckIn`."""
  publicCheckIns(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PublicCheckInCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PublicCheckIn`."""
    orderBy: [PublicCheckInsOrderBy!] = [NATURAL]
  ): PublicCheckInsConnection

  """Reads and enables pagination through a set of `PublicUser`."""
  publicUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PublicUserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PublicUser`."""
    orderBy: [PublicUsersOrderBy!] = [NATURAL]
  ): PublicUsersConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads and enables pagination through a set of `Item`."""
  searchItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    search: String
  ): ItemsConnection

  """Reads and enables pagination through a set of `User`."""
  searchUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    search: String
  ): UsersConnection
  tag(id: Int!): Tag
  tagByName(name: String!): Tag

  """Reads a single `Tag` using its globally unique `ID`."""
  tagByNodeId(
    """The globally unique `ID` to be used in selecting a single `Tag`."""
    nodeId: ID!
  ): Tag

  """Reads and enables pagination through a set of `Tag`."""
  tags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsConnection
  type(id: Int!): Type
  typeByNameAndCategory(category: String!, name: String!): Type

  """Reads a single `Type` using its globally unique `ID`."""
  typeByNodeId(
    """The globally unique `ID` to be used in selecting a single `Type`."""
    nodeId: ID!
  ): Type

  """Reads and enables pagination through a set of `Type`."""
  types(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Type`."""
    orderBy: [TypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TypesConnection
  user(id: UUID!): User
  userAuthentication(id: UUID!): UserAuthentication

  """Reads a single `UserAuthentication` using its globally unique `ID`."""
  userAuthenticationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `UserAuthentication`.
    """
    nodeId: ID!
  ): UserAuthentication

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
  userByUsername(username: String!): User
  userEmail(id: UUID!): UserEmail

  """Reads a single `UserEmail` using its globally unique `ID`."""
  userEmailByNodeId(
    """The globally unique `ID` to be used in selecting a single `UserEmail`."""
    nodeId: ID!
  ): UserEmail
  userSetting(id: UUID!): UserSetting

  """Reads a single `UserSetting` using its globally unique `ID`."""
  userSettingByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `UserSetting`.
    """
    nodeId: ID!
  ): UserSetting

  """Reads and enables pagination through a set of `UserSetting`."""
  userSettings(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserSettingCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserSetting`."""
    orderBy: [UserSettingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserSettingsConnection
}

"""All input for the `requestAccountDeletion` mutation."""
input RequestAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `requestAccountDeletion` mutation."""
type RequestAccountDeletionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""All input for the `resendEmailVerificationCode` mutation."""
input ResendEmailVerificationCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailId: UUID!
}

"""The output of our `resendEmailVerificationCode` mutation."""
type ResendEmailVerificationCodePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

scalar ShortText

"""Tag for an item or check-in"""
type Tag implements Node {
  """Reads and enables pagination through a set of `CheckInTag`."""
  checkInTags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInTagCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckInTag`."""
    orderBy: [CheckInTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInTagsConnection!
  createdAt: Datetime!
  createdBy: UUID
  id: Int!
  isVerified: Boolean!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `User` that is related to this `Tag`."""
  userByCreatedBy: User
}

"""
A condition to be used against `Tag` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TagCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isVerified` field."""
  isVerified: Boolean

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `Tag`"""
input TagInput {
  createdAt: Datetime
  createdBy: UUID
  id: Int
  isVerified: Boolean
  name: String
}

"""Represents an update to a `Tag`. Fields that are set will be updated."""
input TagPatch {
  createdAt: Datetime
  createdBy: UUID
  id: Int
  isVerified: Boolean
  name: String
}

"""A connection to a list of `Tag` values."""
type TagsConnection {
  """
  A list of edges which contains the `Tag` and cursor to aid in pagination.
  """
  edges: [TagsEdge!]!

  """A list of `Tag` objects."""
  nodes: [Tag]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Tag` you could get from the connection."""
  totalCount: Int!
}

"""A `Tag` edge in the connection."""
type TagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Tag` at the end of the edge."""
  node: Tag
}

"""Methods to use when ordering `Tag`."""
enum TagsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Type item that is part of a category"""
type Type implements Node {
  category: String!

  """Reads a single `Category` that is related to this `Type`."""
  categoryByCategory: Category
  id: Int!

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  itemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """Reads and enables pagination through a set of `Item`."""
  items(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `Type` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TypeCondition {
  """Checks for equality with the object’s `category` field."""
  category: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `Type`"""
input TypeInput {
  category: String!
  id: Int
  name: String!
}

"""Represents an update to a `Type`. Fields that are set will be updated."""
input TypePatch {
  category: String
  id: Int
  name: String
}

"""A connection to a list of `Type` values."""
type TypesConnection {
  """
  A list of edges which contains the `Type` and cursor to aid in pagination.
  """
  edges: [TypesEdge!]!

  """A list of `Type` objects."""
  nodes: [Type]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Type` you could get from the connection."""
  totalCount: Int!
}

"""A `Type` edge in the connection."""
type TypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Type` at the end of the edge."""
  node: Type
}

"""Methods to use when ordering `Type`."""
enum TypesOrderBy {
  CATEGORY_ASC
  CATEGORY_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""All input for the `updateBrandByCompanyIdAndName` mutation."""
input UpdateBrandByCompanyIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  companyId: Int!
  name: ShortText!

  """
  An object where the defined keys will be set on the `Brand` being updated.
  """
  patch: BrandPatch!
}

"""All input for the `updateBrandByNodeId` mutation."""
input UpdateBrandByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Brand` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Brand` being updated.
  """
  patch: BrandPatch!
}

"""All input for the `updateBrand` mutation."""
input UpdateBrandInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Brand` being updated.
  """
  patch: BrandPatch!
}

"""The output of our update `Brand` mutation."""
type UpdateBrandPayload {
  """The `Brand` that was updated by this mutation."""
  brand: Brand

  """An edge for our `Brand`. May be used by Relay 1."""
  brandEdge(
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Company` that is related to this `Brand`."""
  company: Company

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Brand`."""
  userByCreatedBy: User
}

"""All input for the `updateCategoryByNodeId` mutation."""
input UpdateCategoryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Category` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Category` being updated.
  """
  patch: CategoryPatch!
}

"""All input for the `updateCategory` mutation."""
input UpdateCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!

  """
  An object where the defined keys will be set on the `Category` being updated.
  """
  patch: CategoryPatch!
}

"""The output of our update `Category` mutation."""
type UpdateCategoryPayload {
  """The `Category` that was updated by this mutation."""
  category: Category

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCheckInByNodeId` mutation."""
input UpdateCheckInByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CheckIn` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CheckIn` being updated.
  """
  patch: CheckInPatch!
}

"""All input for the `updateCheckInCommentByNodeId` mutation."""
input UpdateCheckInCommentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CheckInComment` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CheckInComment` being updated.
  """
  patch: CheckInCommentPatch!
}

"""All input for the `updateCheckInComment` mutation."""
input UpdateCheckInCommentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `CheckInComment` being updated.
  """
  patch: CheckInCommentPatch!
}

"""The output of our update `CheckInComment` mutation."""
type UpdateCheckInCommentPayload {
  """Reads a single `CheckIn` that is related to this `CheckInComment`."""
  checkIn: CheckIn

  """The `CheckInComment` that was updated by this mutation."""
  checkInComment: CheckInComment

  """An edge for our `CheckInComment`. May be used by Relay 1."""
  checkInCommentEdge(
    """The method to use when ordering `CheckInComment`."""
    orderBy: [CheckInCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInCommentsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CheckInComment`."""
  userByCreatedBy: User
}

"""All input for the `updateCheckIn` mutation."""
input UpdateCheckInInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `CheckIn` being updated.
  """
  patch: CheckInPatch!
}

"""All input for the `updateCheckInLikeByNodeId` mutation."""
input UpdateCheckInLikeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CheckInLike` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CheckInLike` being updated.
  """
  patch: CheckInLikePatch!
}

"""All input for the `updateCheckInLike` mutation."""
input UpdateCheckInLikeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `CheckInLike` being updated.
  """
  patch: CheckInLikePatch!
}

"""The output of our update `CheckInLike` mutation."""
type UpdateCheckInLikePayload {
  """Reads a single `CheckIn` that is related to this `CheckInLike`."""
  checkInById: CheckIn

  """The `CheckInLike` that was updated by this mutation."""
  checkInLike: CheckInLike

  """An edge for our `CheckInLike`. May be used by Relay 1."""
  checkInLikeEdge(
    """The method to use when ordering `CheckInLike`."""
    orderBy: [CheckInLikesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInLikesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CheckInLike`."""
  userByLikedBy: User
}

"""The output of our update `CheckIn` mutation."""
type UpdateCheckInPayload {
  """Reads a single `User` that is related to this `CheckIn`."""
  author: User

  """The `CheckIn` that was updated by this mutation."""
  checkIn: CheckIn

  """An edge for our `CheckIn`. May be used by Relay 1."""
  checkInEdge(
    """The method to use when ordering `CheckIn`."""
    orderBy: [CheckInsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Item` that is related to this `CheckIn`."""
  item: Item

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCheckInTagByNodeId` mutation."""
input UpdateCheckInTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CheckInTag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CheckInTag` being updated.
  """
  patch: CheckInTagPatch!
}

"""All input for the `updateCheckInTag` mutation."""
input UpdateCheckInTagInput {
  checkInId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CheckInTag` being updated.
  """
  patch: CheckInTagPatch!
  tagId: Int!
}

"""The output of our update `CheckInTag` mutation."""
type UpdateCheckInTagPayload {
  """Reads a single `CheckIn` that is related to this `CheckInTag`."""
  checkIn: CheckIn

  """The `CheckInTag` that was updated by this mutation."""
  checkInTag: CheckInTag

  """An edge for our `CheckInTag`. May be used by Relay 1."""
  checkInTagEdge(
    """The method to use when ordering `CheckInTag`."""
    orderBy: [CheckInTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInTagsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tag` that is related to this `CheckInTag`."""
  tag: Tag
}

"""All input for the `updateCompanyByName` mutation."""
input UpdateCompanyByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!

  """
  An object where the defined keys will be set on the `Company` being updated.
  """
  patch: CompanyPatch!
}

"""All input for the `updateCompanyByNodeId` mutation."""
input UpdateCompanyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Company` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Company` being updated.
  """
  patch: CompanyPatch!
}

"""All input for the `updateCompany` mutation."""
input UpdateCompanyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Company` being updated.
  """
  patch: CompanyPatch!
}

"""All input for the `updateCompanyLikeByNodeId` mutation."""
input UpdateCompanyLikeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CompanyLike` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CompanyLike` being updated.
  """
  patch: CompanyLikePatch!
}

"""All input for the `updateCompanyLike` mutation."""
input UpdateCompanyLikeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
  likedBy: UUID!

  """
  An object where the defined keys will be set on the `CompanyLike` being updated.
  """
  patch: CompanyLikePatch!
}

"""The output of our update `CompanyLike` mutation."""
type UpdateCompanyLikePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Company` that is related to this `CompanyLike`."""
  companyById: Company

  """The `CompanyLike` that was updated by this mutation."""
  companyLike: CompanyLike

  """An edge for our `CompanyLike`. May be used by Relay 1."""
  companyLikeEdge(
    """The method to use when ordering `CompanyLike`."""
    orderBy: [CompanyLikesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompanyLikesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CompanyLike`."""
  userByLikedBy: User
}

"""The output of our update `Company` mutation."""
type UpdateCompanyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Company` that was updated by this mutation."""
  company: Company

  """An edge for our `Company`. May be used by Relay 1."""
  companyEdge(
    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompaniesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Company`."""
  userByCreatedBy: User
}

"""All input for the `updateFriendByNodeId` mutation."""
input UpdateFriendByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Friend` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Friend` being updated.
  """
  patch: FriendPatch!
}

"""All input for the `updateFriend` mutation."""
input UpdateFriendInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Friend` being updated.
  """
  patch: FriendPatch!
  userId1: UUID!
  userId2: UUID!
}

"""The output of our update `Friend` mutation."""
type UpdateFriendPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Friend` that was updated by this mutation."""
  friend: Friend

  """An edge for our `Friend`. May be used by Relay 1."""
  friendEdge(
    """The method to use when ordering `Friend`."""
    orderBy: [FriendsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Friend`."""
  userByBlockedBy: User

  """Reads a single `User` that is related to this `Friend`."""
  userByUserId1: User

  """Reads a single `User` that is related to this `Friend`."""
  userByUserId2: User
}

"""All input for the `updateItemByBrandIdAndFlavor` mutation."""
input UpdateItemByBrandIdAndFlavorInput {
  brandId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  flavor: String!

  """
  An object where the defined keys will be set on the `Item` being updated.
  """
  patch: ItemPatch!
}

"""All input for the `updateItemByNodeId` mutation."""
input UpdateItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Item` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Item` being updated.
  """
  patch: ItemPatch!
}

"""All input for the `updateItemEditSuggestionByNodeId` mutation."""
input UpdateItemEditSuggestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ItemEditSuggestion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ItemEditSuggestion` being updated.
  """
  patch: ItemEditSuggestionPatch!
}

"""All input for the `updateItemEditSuggestion` mutation."""
input UpdateItemEditSuggestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `ItemEditSuggestion` being updated.
  """
  patch: ItemEditSuggestionPatch!
}

"""The output of our update `ItemEditSuggestion` mutation."""
type UpdateItemEditSuggestionPayload {
  """Reads a single `User` that is related to this `ItemEditSuggestion`."""
  author: User

  """Reads a single `Brand` that is related to this `ItemEditSuggestion`."""
  brand: Brand

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Item` that is related to this `ItemEditSuggestion`."""
  item: Item

  """The `ItemEditSuggestion` that was updated by this mutation."""
  itemEditSuggestion: ItemEditSuggestion

  """An edge for our `ItemEditSuggestion`. May be used by Relay 1."""
  itemEditSuggestionEdge(
    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsEdge

  """Reads a single `Company` that is related to this `ItemEditSuggestion`."""
  manufacturer: Company

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Type` that is related to this `ItemEditSuggestion`."""
  type: Type
}

"""All input for the `updateItem` mutation."""
input UpdateItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Item` being updated.
  """
  patch: ItemPatch!
}

"""The output of our update `Item` mutation."""
type UpdateItemPayload {
  """Reads a single `Brand` that is related to this `Item`."""
  brand: Brand

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Item` that was updated by this mutation."""
  item: Item

  """An edge for our `Item`. May be used by Relay 1."""
  itemEdge(
    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsEdge

  """Reads a single `Company` that is related to this `Item`."""
  manufacturer: Company

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Type` that is related to this `Item`."""
  type: Type

  """Reads a single `User` that is related to this `Item`."""
  userByCreatedBy: User

  """Reads a single `User` that is related to this `Item`."""
  userByUpdatedBy: User
}

"""All input for the `updateTagByName` mutation."""
input UpdateTagByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!

  """
  An object where the defined keys will be set on the `Tag` being updated.
  """
  patch: TagPatch!
}

"""All input for the `updateTagByNodeId` mutation."""
input UpdateTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Tag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Tag` being updated.
  """
  patch: TagPatch!
}

"""All input for the `updateTag` mutation."""
input UpdateTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Tag` being updated.
  """
  patch: TagPatch!
}

"""The output of our update `Tag` mutation."""
type UpdateTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Tag` that was updated by this mutation."""
  tag: Tag

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge

  """Reads a single `User` that is related to this `Tag`."""
  userByCreatedBy: User
}

"""All input for the `updateTypeByNameAndCategory` mutation."""
input UpdateTypeByNameAndCategoryInput {
  category: String!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!

  """
  An object where the defined keys will be set on the `Type` being updated.
  """
  patch: TypePatch!
}

"""All input for the `updateTypeByNodeId` mutation."""
input UpdateTypeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Type` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Type` being updated.
  """
  patch: TypePatch!
}

"""All input for the `updateType` mutation."""
input UpdateTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Type` being updated.
  """
  patch: TypePatch!
}

"""The output of our update `Type` mutation."""
type UpdateTypePayload {
  """Reads a single `Category` that is related to this `Type`."""
  categoryByCategory: Category

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Type` that was updated by this mutation."""
  type: Type

  """An edge for our `Type`. May be used by Relay 1."""
  typeEdge(
    """The method to use when ordering `Type`."""
    orderBy: [TypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TypesEdge
}

"""All input for the `updateUserAuthenticationByNodeId` mutation."""
input UpdateUserAuthenticationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAuthentication` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserAuthentication` being updated.
  """
  patch: UserAuthenticationPatch!
}

"""All input for the `updateUserAuthentication` mutation."""
input UpdateUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `UserAuthentication` being updated.
  """
  patch: UserAuthenticationPatch!
}

"""The output of our update `UserAuthentication` mutation."""
type UpdateUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User

  """The `UserAuthentication` that was updated by this mutation."""
  userAuthentication: UserAuthentication
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""All input for the `updateUserByUsername` mutation."""
input UpdateUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!

  """Public-facing username (or 'handle') of the user."""
  username: String!
}

"""All input for the `updateUserEmailByNodeId` mutation."""
input UpdateUserEmailByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserEmail` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserEmail` being updated.
  """
  patch: UserEmailPatch!
}

"""All input for the `updateUserEmail` mutation."""
input UpdateUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `UserEmail` being updated.
  """
  patch: UserEmailPatch!
}

"""The output of our update `UserEmail` mutation."""
type UpdateUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """The `UserEmail` that was updated by this mutation."""
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user."""
  id: UUID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `updateUserSettingByNodeId` mutation."""
input UpdateUserSettingByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserSetting` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserSetting` being updated.
  """
  patch: UserSettingPatch!
}

"""All input for the `updateUserSetting` mutation."""
input UpdateUserSettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `UserSetting` being updated.
  """
  patch: UserSettingPatch!
}

"""The output of our update `UserSetting` mutation."""
type UpdateUserSettingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserSetting`."""
  userById: User

  """The `UserSetting` that was updated by this mutation."""
  userSetting: UserSetting

  """An edge for our `UserSetting`. May be used by Relay 1."""
  userSettingEdge(
    """The method to use when ordering `UserSetting`."""
    orderBy: [UserSettingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserSettingsEdge
}

"""A user who can log in to the application."""
type User implements Node {
  """Reads and enables pagination through a set of `ActivityFeed`."""
  authoredActivityFeeds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActivityFeedCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ActivityFeed`."""
    orderBy: [ActivityFeedsOrderBy!] = [NATURAL]
  ): ActivityFeedsConnection!

  """Reads and enables pagination through a set of `CheckIn`."""
  authoredCheckIns(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckIn`."""
    orderBy: [CheckInsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInsConnection!

  """Reads and enables pagination through a set of `ItemEditSuggestion`."""
  authoredItemEditSuggestions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemEditSuggestionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ItemEditSuggestion`."""
    orderBy: [ItemEditSuggestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemEditSuggestionsConnection!

  """Optional avatar URL."""
  avatarUrl: String

  """Reads and enables pagination through a set of `Brand`."""
  brandsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BrandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsConnection!

  """Reads and enables pagination through a set of `CheckInComment`."""
  checkInCommentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInCommentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckInComment`."""
    orderBy: [CheckInCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInCommentsConnection!

  """Reads and enables pagination through a set of `CheckInFriend`."""
  checkInFriendsByFriendId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInFriendCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckInFriend`."""
    orderBy: [CheckInFriendsOrderBy!] = [NATURAL]
  ): CheckInFriendsConnection!

  """Reads and enables pagination through a set of `CheckInLike`."""
  checkInLikesByLikedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CheckInLikeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CheckInLike`."""
    orderBy: [CheckInLikesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CheckInLikesConnection!

  """Reads and enables pagination through a set of `Company`."""
  companiesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompaniesConnection!

  """Reads and enables pagination through a set of `CompanyLike`."""
  companyLikesByLikedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyLikeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CompanyLike`."""
    orderBy: [CompanyLikesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompanyLikesConnection!
  country: String
  createdAt: Datetime!
  firstName: String
  friendStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): UsersFriendStatusConnection!
  friends(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): UsersFriendsConnection!

  """Reads and enables pagination through a set of `Friend`."""
  friendsByBlockedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FriendCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Friend`."""
    orderBy: [FriendsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendsConnection!

  """Reads and enables pagination through a set of `Friend`."""
  friendsByUserId1(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FriendCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Friend`."""
    orderBy: [FriendsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendsConnection!

  """Reads and enables pagination through a set of `Friend`."""
  friendsByUserId2(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FriendCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Friend`."""
    orderBy: [FriendsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendsConnection!
  hasPassword: Boolean

  """Unique identifier for the user."""
  id: UUID!

  """If true, the user has elevated privileges."""
  isAdmin: Boolean!
  isVerified: Boolean!

  """Reads and enables pagination through a set of `Item`."""
  itemsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!

  """Reads and enables pagination through a set of `Item`."""
  itemsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsConnection!
  lastName: String
  location: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Tag`."""
  tagsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsConnection!
  totalCheckIns: Int
  totalFriends: Int
  uniqueCheckIns: Int
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `UserAuthentication`."""
  userAuthenticationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAuthenticationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!]
  ): [UserAuthentication!]!

  """Reads and enables pagination through a set of `UserEmail`."""
  userEmails(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEmailCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsConnection!

  """Reads a single `UserSetting` that is related to this `User`."""
  userSettingById: UserSetting

  """Reads and enables pagination through a set of `UserSetting`."""
  userSettingsById(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserSettingCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserSetting`."""
    orderBy: [UserSettingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserSettingsConnection! @deprecated(reason: "Please use userSettingById instead")

  """Public-facing username (or 'handle') of the user."""
  username: String!
}

"""
Contains information about the login providers this user has used, so that they may disconnect them should they wish.
"""
type UserAuthentication implements Node {
  createdAt: Datetime!
  id: UUID!

  """A unique identifier for the user within the login service."""
  identifier: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `UserAuthentication` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserAuthenticationCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `identifier` field."""
  identifier: String

  """Checks for equality with the object’s `service` field."""
  service: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""An input for mutations affecting `UserAuthentication`"""
input UserAuthenticationInput {
  createdAt: Datetime
  id: UUID

  """A unique identifier for the user within the login service."""
  identifier: String!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!
  updatedAt: Datetime
  userId: UUID!
}

"""
Represents an update to a `UserAuthentication`. Fields that are set will be updated.
"""
input UserAuthenticationPatch {
  createdAt: Datetime
  id: UUID

  """A unique identifier for the user within the login service."""
  identifier: String

  """The login service used, e.g. `twitter` or `github`."""
  service: String
  updatedAt: Datetime
  userId: UUID
}

"""Methods to use when ordering `UserAuthentication`."""
enum UserAuthenticationsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  IDENTIFIER_ASC
  IDENTIFIER_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SERVICE_ASC
  SERVICE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""Information about a user's email address."""
type UserEmail implements Node {
  createdAt: Datetime!

  """The users email address, in `a@b.c` format."""
  email: String!
  id: UUID!
  isPrimary: Boolean!

  """
  True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
  """
  isVerified: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `UserEmail` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserEmailCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isPrimary` field."""
  isPrimary: Boolean

  """Checks for equality with the object’s `isVerified` field."""
  isVerified: Boolean

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""An input for mutations affecting `UserEmail`"""
input UserEmailInput {
  createdAt: Datetime

  """The users email address, in `a@b.c` format."""
  email: String!
  id: UUID
  isPrimary: Boolean

  """
  True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
  """
  isVerified: Boolean
  updatedAt: Datetime
  userId: UUID
}

"""
Represents an update to a `UserEmail`. Fields that are set will be updated.
"""
input UserEmailPatch {
  createdAt: Datetime

  """The users email address, in `a@b.c` format."""
  email: String
  id: UUID
  isPrimary: Boolean

  """
  True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
  """
  isVerified: Boolean
  updatedAt: Datetime
  userId: UUID
}

"""A connection to a list of `UserEmail` values."""
type UserEmailsConnection {
  """
  A list of edges which contains the `UserEmail` and cursor to aid in pagination.
  """
  edges: [UserEmailsEdge!]!

  """A list of `UserEmail` objects."""
  nodes: [UserEmail]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserEmail` you could get from the connection."""
  totalCount: Int!
}

"""A `UserEmail` edge in the connection."""
type UserEmailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserEmail` at the end of the edge."""
  node: UserEmail
}

"""Methods to use when ordering `UserEmail`."""
enum UserEmailsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  EMAIL_ASC
  EMAIL_DESC
  ID_ASC
  ID_DESC
  IS_PRIMARY_ASC
  IS_PRIMARY_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""An input for mutations affecting `User`"""
input UserInput {
  """Optional avatar URL."""
  avatarUrl: String
  country: String
  createdAt: Datetime
  firstName: String

  """Unique identifier for the user."""
  id: UUID

  """If true, the user has elevated privileges."""
  isAdmin: Boolean
  isVerified: Boolean
  lastName: String
  location: String
  updatedAt: Datetime

  """Public-facing username (or 'handle') of the user."""
  username: String!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  """Optional avatar URL."""
  avatarUrl: String
  country: String
  createdAt: Datetime
  firstName: String

  """Unique identifier for the user."""
  id: UUID

  """If true, the user has elevated privileges."""
  isAdmin: Boolean
  isVerified: Boolean
  lastName: String
  location: String
  updatedAt: Datetime

  """Public-facing username (or 'handle') of the user."""
  username: String
}

type UserSetting implements Node {
  id: UUID!
  isPublic: Boolean
  isPublicCheckIns: Boolean

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `User` that is related to this `UserSetting`."""
  userById: User
}

"""
A condition to be used against `UserSetting` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserSettingCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isPublic` field."""
  isPublic: Boolean

  """Checks for equality with the object’s `isPublicCheckIns` field."""
  isPublicCheckIns: Boolean
}

"""An input for mutations affecting `UserSetting`"""
input UserSettingInput {
  id: UUID!
  isPublic: Boolean
  isPublicCheckIns: Boolean
}

"""
Represents an update to a `UserSetting`. Fields that are set will be updated.
"""
input UserSettingPatch {
  id: UUID
  isPublic: Boolean
  isPublicCheckIns: Boolean
}

"""A connection to a list of `UserSetting` values."""
type UserSettingsConnection {
  """
  A list of edges which contains the `UserSetting` and cursor to aid in pagination.
  """
  edges: [UserSettingsEdge!]!

  """A list of `UserSetting` objects."""
  nodes: [UserSetting]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserSetting` you could get from the connection."""
  totalCount: Int!
}

"""A `UserSetting` edge in the connection."""
type UserSettingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserSetting` at the end of the edge."""
  node: UserSetting
}

"""Methods to use when ordering `UserSetting`."""
enum UserSettingsOrderBy {
  ID_ASC
  ID_DESC
  IS_PUBLIC_ASC
  IS_PUBLIC_CHECK_INS_ASC
  IS_PUBLIC_CHECK_INS_DESC
  IS_PUBLIC_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""A `UsersFriendsRecord` edge in the connection."""
type UsersFriendEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UsersFriendsRecord` at the end of the edge."""
  node: UsersFriendsRecord
}

"""A connection to a list of `UsersFriendStatusRecord` values."""
type UsersFriendStatusConnection {
  """
  A list of edges which contains the `UsersFriendStatusRecord` and cursor to aid in pagination.
  """
  edges: [UsersFriendStatusEdge!]!

  """A list of `UsersFriendStatusRecord` objects."""
  nodes: [UsersFriendStatusRecord]!

  """
  The count of *all* `UsersFriendStatusRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""A `UsersFriendStatusRecord` edge in the connection."""
type UsersFriendStatusEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UsersFriendStatusRecord` at the end of the edge."""
  node: UsersFriendStatusRecord
}

"""The return type of our `friendStatus` query."""
type UsersFriendStatusRecord {
  isSender: Boolean
  status: FriendStatus
}

"""A connection to a list of `UsersFriendsRecord` values."""
type UsersFriendsConnection {
  """
  A list of edges which contains the `UsersFriendsRecord` and cursor to aid in pagination.
  """
  edges: [UsersFriendEdge!]!

  """A list of `UsersFriendsRecord` objects."""
  nodes: [UsersFriendsRecord]!

  """
  The count of *all* `UsersFriendsRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""The return type of our `friends` query."""
type UsersFriendsRecord {
  avatarUrl: String
  firstName: String
  id: UUID
  isSender: Boolean
  lastName: String
  status: FriendStatus
  username: String
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  AVATAR_URL_ASC
  AVATAR_URL_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  ID_ASC
  ID_DESC
  IS_ADMIN_ASC
  IS_ADMIN_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  LOCATION_ASC
  LOCATION_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USERNAME_ASC
  USERNAME_DESC
}

"""All input for the `verifyEmail` mutation."""
input VerifyEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
  userEmailId: UUID!
}

"""The output of our `verifyEmail` mutation."""
type VerifyEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}
