-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE OR REPLACE FUNCTION public.tg__is_verified_check()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    VOLATILE
    COST 100
AS $BODY$
begin
  if fnc__has_permission(auth.uid(), 'can_verify') is false then
    new.is_verified = (case
                         when TG_OP = 'INSERT' then false
                         else old.is_verified end);
  else
    -- Everything created by an user that can verify is created as verified
    new.is_verified = (case
                         when TG_OP = 'INSERT' then true
                         else (case when new.is_verified is null then old.is_verified else new.is_verified end) end);
  end if;

  return new;
end;
$BODY$;

CREATE OR REPLACE FUNCTION public.tg__friend_request_check()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    VOLATILE
    COST 100
AS $BODY$
begin
  -- make sure that the sender is the current user and that the profiles can't be updated later
  new.user_id_1 = (case when TG_OP = 'INSERT' then auth.uid() else old.user_id_1 end);
  new.user_id_2 = (case when TG_OP = 'INSERT' then new.user_id_2 else old.user_id_2 end);
  return new;
end;
$BODY$;

CREATE OR REPLACE FUNCTION public.tg__must_be_friends()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    VOLATILE
    COST 100
AS $BODY$
DECLARE
  v_friend_id bigint;
begin
  select id
  from friends
  where (user_id_1 = auth.uid() and user_id_2 = new.profile_id)
     or (user_id_1 = new.profile_id and user_id_2 = auth.uid())
  into v_friend_id;

  if v_friend_id is null then
    raise exception 'included profile must be a friend' using errcode = 'not_in_friends';
  else
    return new;
  end if;
end;
$BODY$;

CREATE TRIGGER forbid_tagging_users_that_are_not_friends
    BEFORE INSERT
    ON public.check_in_tagged_profiles
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__must_be_friends();

REVOKE ALL ON TABLE public.brands FROM anon;
REVOKE ALL ON TABLE public.brands FROM postgres;
REVOKE ALL ON TABLE public.brands FROM service_role;
GRANT ALL ON TABLE public.brands TO anon;

GRANT ALL ON TABLE public.brands TO service_role;

GRANT ALL ON TABLE public.brands TO postgres;
CREATE TRIGGER check_verification
    BEFORE INSERT OR UPDATE 
    ON public.brands
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__is_verified_check();

REVOKE ALL ON TABLE public.products FROM anon;
REVOKE ALL ON TABLE public.products FROM postgres;
REVOKE ALL ON TABLE public.products FROM service_role;
GRANT ALL ON TABLE public.products TO anon;

GRANT ALL ON TABLE public.products TO service_role;

GRANT ALL ON TABLE public.products TO postgres;

CREATE TRIGGER check_verification
    BEFORE INSERT OR UPDATE 
    ON public.products
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__is_verified_check();

REVOKE ALL ON TABLE public.friends FROM authenticated;
REVOKE ALL ON TABLE public.friends FROM postgres;
REVOKE ALL ON TABLE public.friends FROM service_role;
GRANT ALL ON TABLE public.friends TO authenticated;

GRANT ALL ON TABLE public.friends TO service_role;

GRANT ALL ON TABLE public.friends TO postgres;
CREATE TRIGGER check_if_insert_or_update_is_allowed
    BEFORE INSERT OR UPDATE 
    ON public.friends
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__friend_request_check();

REVOKE ALL ON TABLE public.products_subcategories FROM anon;
REVOKE ALL ON TABLE public.products_subcategories FROM postgres;
REVOKE ALL ON TABLE public.products_subcategories FROM service_role;
GRANT ALL ON TABLE public.products_subcategories TO anon;

GRANT ALL ON TABLE public.products_subcategories TO service_role;

GRANT ALL ON TABLE public.products_subcategories TO postgres;
CREATE TRIGGER check_verification
    BEFORE INSERT OR UPDATE 
    ON public.products_subcategories
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__is_verified_check();

REVOKE ALL ON TABLE public.check_ins FROM authenticated;
REVOKE ALL ON TABLE public.check_ins FROM postgres;
REVOKE ALL ON TABLE public.check_ins FROM service_role;
GRANT ALL ON TABLE public.check_ins TO authenticated;

GRANT ALL ON TABLE public.check_ins TO service_role;

GRANT ALL ON TABLE public.check_ins TO postgres;

CREATE TRIGGER check_verification
    BEFORE INSERT OR UPDATE 
    ON public.check_ins
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__is_verified_check();

REVOKE ALL ON TABLE public.product_variants FROM authenticated;
REVOKE ALL ON TABLE public.product_variants FROM postgres;
REVOKE ALL ON TABLE public.product_variants FROM service_role;
GRANT ALL ON TABLE public.product_variants TO authenticated;

GRANT ALL ON TABLE public.product_variants TO service_role;

GRANT ALL ON TABLE public.product_variants TO postgres;
CREATE TRIGGER check_verification
    BEFORE INSERT OR UPDATE 
    ON public.product_variants
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__is_verified_check();

REVOKE ALL ON TABLE public.product_edit_suggestions FROM anon;
REVOKE ALL ON TABLE public.product_edit_suggestions FROM postgres;
REVOKE ALL ON TABLE public.product_edit_suggestions FROM service_role;
GRANT ALL ON TABLE public.product_edit_suggestions TO anon;

GRANT ALL ON TABLE public.product_edit_suggestions TO service_role;

GRANT ALL ON TABLE public.product_edit_suggestions TO postgres;

REVOKE ALL ON TABLE public.notifications FROM anon;
REVOKE ALL ON TABLE public.notifications FROM postgres;
REVOKE ALL ON TABLE public.notifications FROM service_role;
GRANT ALL ON TABLE public.notifications TO anon;

GRANT ALL ON TABLE public.notifications TO service_role;

GRANT ALL ON TABLE public.notifications TO postgres;

REVOKE ALL ON TABLE public.check_in_reactions FROM anon;
REVOKE ALL ON TABLE public.check_in_reactions FROM postgres;
REVOKE ALL ON TABLE public.check_in_reactions FROM service_role;
GRANT ALL ON TABLE public.check_in_reactions TO anon;

GRANT ALL ON TABLE public.check_in_reactions TO service_role;

GRANT ALL ON TABLE public.check_in_reactions TO postgres;

REVOKE ALL ON TABLE public.subcategories FROM anon;
REVOKE ALL ON TABLE public.subcategories FROM postgres;
REVOKE ALL ON TABLE public.subcategories FROM service_role;
GRANT ALL ON TABLE public.subcategories TO anon;

GRANT ALL ON TABLE public.subcategories TO service_role;

GRANT ALL ON TABLE public.subcategories TO postgres;

REVOKE ALL ON TABLE public.companies FROM authenticated;
REVOKE ALL ON TABLE public.companies FROM postgres;
REVOKE ALL ON TABLE public.companies FROM service_role;
GRANT ALL ON TABLE public.companies TO authenticated;

GRANT ALL ON TABLE public.companies TO service_role;

GRANT ALL ON TABLE public.companies TO postgres;
CREATE TRIGGER check_verification
    BEFORE INSERT OR UPDATE 
    ON public.companies
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__is_verified_check();

REVOKE ALL ON TABLE public.sub_brands FROM anon;
REVOKE ALL ON TABLE public.sub_brands FROM postgres;
REVOKE ALL ON TABLE public.sub_brands FROM service_role;
GRANT ALL ON TABLE public.sub_brands TO anon;

GRANT ALL ON TABLE public.sub_brands TO service_role;

GRANT ALL ON TABLE public.sub_brands TO postgres;
CREATE TRIGGER check_verification
    BEFORE INSERT OR UPDATE 
    ON public.sub_brands
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__is_verified_check();
