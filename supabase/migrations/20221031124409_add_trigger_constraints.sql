-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.
CREATE OR REPLACE FUNCTION public.tg__friend_request_check ()
    RETURNS TRIGGER
    LANGUAGE 'plpgsql'
    COST 100 VOLATILE NOT LEAKPROOF
    SET search_path = public
    AS $BODY$
BEGIN
    -- make sure that the sender is the current user and that the profiles can't be updated later
    NEW.user_id_1 = (
        CASE WHEN TG_OP = 'INSERT' THEN
            auth.uid ()
        ELSE
            OLD.user_id_1
        END);
    NEW.user_id_2 = (
        CASE WHEN TG_OP = 'INSERT' THEN
            NEW.user_id_2
        ELSE
            OLD.user_id_2
        END);
    RETURN new;
END;
$BODY$;

ALTER FUNCTION public.tg__friend_request_check () OWNER TO postgres;

GRANT EXECUTE ON FUNCTION public.tg__friend_request_check () TO authenticated;

GRANT EXECUTE ON FUNCTION public.tg__friend_request_check () TO postgres;

GRANT EXECUTE ON FUNCTION public.tg__friend_request_check () TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.tg__friend_request_check () TO anon;

GRANT EXECUTE ON FUNCTION public.tg__friend_request_check () TO service_role;

CREATE OR REPLACE FUNCTION public.tg__must_be_friends ()
    RETURNS TRIGGER
    LANGUAGE 'plpgsql'
    COST 100 VOLATILE NOT LEAKPROOF
    SET search_path = public
    AS $BODY$
DECLARE
    v_friend_id bigint;
BEGIN
    SELECT
        id
    FROM
        friends
    WHERE (user_id_1 = auth.uid ()
        AND user_id_2 = NEW.profile_id)
        OR (user_id_1 = NEW.profile_id
            AND user_id_2 = auth.uid ()) INTO v_friend_id;
    IF v_friend_id IS NULL THEN
        RAISE EXCEPTION 'included profile must be a friend'
            USING errcode = 'not_in_friends';
        ELSE
            RETURN new;
        END IF;
END;
$BODY$;

ALTER FUNCTION public.tg__must_be_friends () OWNER TO postgres;

GRANT EXECUTE ON FUNCTION public.tg__must_be_friends () TO authenticated;

GRANT EXECUTE ON FUNCTION public.tg__must_be_friends () TO postgres;

GRANT EXECUTE ON FUNCTION public.tg__must_be_friends () TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.tg__must_be_friends () TO anon;

GRANT EXECUTE ON FUNCTION public.tg__must_be_friends () TO service_role;

CREATE OR REPLACE FUNCTION public.tg__is_verified_check ()
    RETURNS TRIGGER
    LANGUAGE 'plpgsql'
    COST 100 VOLATILE NOT LEAKPROOF
    SET search_path = public
    AS $BODY$
BEGIN
    IF fnc__has_permission (auth.uid (), 'can_verify') IS FALSE THEN
        NEW.is_verified = OLD.is_verified;
    ELSE
        -- Everything created by an user that can verify is created as verified
        NEW.is_verified = (
            CASE WHEN TG_OP = 'INSERT' THEN
                TRUE
            ELSE
                (
                    CASE WHEN NEW.is_verified IS NULL THEN
                        OLD.is_verified
                    ELSE
                        NEW.is_verified
                    END)
            END);
    END IF;
    RETURN new;
END;
$BODY$;

ALTER FUNCTION public.tg__is_verified_check () OWNER TO postgres;

GRANT EXECUTE ON FUNCTION public.tg__is_verified_check () TO authenticated;

GRANT EXECUTE ON FUNCTION public.tg__is_verified_check () TO postgres;

GRANT EXECUTE ON FUNCTION public.tg__is_verified_check () TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.tg__is_verified_check () TO anon;

GRANT EXECUTE ON FUNCTION public.tg__is_verified_check () TO service_role;

CREATE TRIGGER check_verification
    BEFORE INSERT OR UPDATE ON public.brands
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__is_verified_check ();

DROP TRIGGER IF EXISTS stamp_created_by ON public.brands;

CREATE TRIGGER stamp_created_by
    BEFORE INSERT OR UPDATE ON public.brands
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__stamp_created_by ();

CREATE TRIGGER check_if_insert_or_update_is_allowed
    BEFORE INSERT OR UPDATE ON public.friends
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__friend_request_check ();

DROP TRIGGER IF EXISTS stamp_sender ON public.friends;

CREATE TRIGGER check_verification
    BEFORE INSERT OR UPDATE ON public.product_variants
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__is_verified_check ();

DROP TRIGGER IF EXISTS stamp_created_by ON public.product_variants;

CREATE TRIGGER stamp_created_by
    BEFORE INSERT OR UPDATE ON public.product_variants
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__stamp_created_by ();

REVOKE ALL ON TABLE public.notifications FROM authenticated;

REVOKE ALL ON TABLE public.notifications FROM postgres;

REVOKE ALL ON TABLE public.notifications FROM service_role;

GRANT ALL ON TABLE public.notifications TO authenticated;

GRANT ALL ON TABLE public.notifications TO service_role;

GRANT ALL ON TABLE public.notifications TO postgres;

REVOKE ALL ON TABLE public.profiles FROM anon;

REVOKE ALL ON TABLE public.profiles FROM authenticated;

REVOKE ALL ON TABLE public.profiles FROM postgres;

REVOKE ALL ON TABLE public.profiles FROM service_role;

GRANT ALL ON TABLE public.profiles TO anon;

GRANT ALL ON TABLE public.profiles TO authenticated;

GRANT ALL ON TABLE public.profiles TO postgres;

GRANT ALL ON TABLE public.profiles TO service_role;

CREATE TRIGGER forbid_tagging_users_that_are_not_friends
    BEFORE INSERT ON public.check_in_tagged_profiles
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__must_be_friends ();

CREATE TRIGGER check_verification
    BEFORE INSERT OR UPDATE ON public.products_subcategories
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__is_verified_check ();

DROP TRIGGER IF EXISTS stamp_created_by ON public.products_subcategories;

CREATE TRIGGER stamp_created_by
    BEFORE INSERT OR UPDATE ON public.products_subcategories
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__stamp_created_by ();

DROP TRIGGER IF EXISTS stamp_created_by ON public.check_in_reactions;

CREATE TRIGGER stamp_created_by
    BEFORE INSERT OR UPDATE ON public.check_in_reactions
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__stamp_created_by ();

DROP TRIGGER IF EXISTS stamp_created_by ON public.check_in_comments;

CREATE TRIGGER stamp_created_by
    BEFORE INSERT OR UPDATE ON public.check_in_comments
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__stamp_created_by ();

REVOKE ALL ON TABLE public.product_edit_suggestions FROM authenticated;

REVOKE ALL ON TABLE public.product_edit_suggestions FROM postgres;

REVOKE ALL ON TABLE public.product_edit_suggestions FROM service_role;

GRANT ALL ON TABLE public.product_edit_suggestions TO authenticated;

GRANT ALL ON TABLE public.product_edit_suggestions TO service_role;

GRANT ALL ON TABLE public.product_edit_suggestions TO postgres;

CREATE TRIGGER check_verification
    BEFORE INSERT OR UPDATE ON public.sub_brands
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__is_verified_check ();

DROP TRIGGER IF EXISTS stamp_created_by ON public.sub_brands;

CREATE TRIGGER stamp_created_by
    BEFORE INSERT OR UPDATE ON public.sub_brands
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__stamp_created_by ();

ALTER TABLE IF EXISTS public.check_ins
    ALTER COLUMN rating DROP NOT NULL;

CREATE TRIGGER check_verification
    BEFORE INSERT OR UPDATE ON public.check_ins
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__is_verified_check ();

DROP TRIGGER IF EXISTS stamp_created_by ON public.check_ins;

CREATE TRIGGER stamp_created_by
    BEFORE INSERT OR UPDATE ON public.check_ins
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__stamp_created_by ();

CREATE TRIGGER check_verification
    BEFORE INSERT OR UPDATE ON public.products
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__is_verified_check ();

DROP TRIGGER IF EXISTS stamp_created_by ON public.products;

CREATE TRIGGER stamp_created_by
    BEFORE INSERT OR UPDATE ON public.products
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__stamp_created_by ();

CREATE TRIGGER check_verification
    BEFORE INSERT OR UPDATE ON public.companies
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__is_verified_check ();

DROP TRIGGER IF EXISTS stamp_created_by ON public.companies;

CREATE TRIGGER stamp_created_by
    BEFORE INSERT OR UPDATE ON public.companies
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__stamp_created_by ();

