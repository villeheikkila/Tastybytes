-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.
REVOKE ALL ON TABLE public.sub_brands FROM authenticated;

REVOKE ALL ON TABLE public.sub_brands FROM service_role;

REVOKE ALL ON TABLE public.sub_brands FROM postgres;

GRANT ALL ON TABLE public.sub_brands TO authenticated;

GRANT ALL ON TABLE public.sub_brands TO postgres;

GRANT ALL ON TABLE public.sub_brands TO service_role;

-- Changing the columns in a view requires dropping and re-creating the view.
-- This may fail if other objects are dependent upon this view,
-- or may cause procedural functions to fail if they are not modified to
-- take account of the changes.
DROP VIEW public.csv_export CASCADE;

CREATE OR REPLACE VIEW public.csv_export AS
WITH agg_products AS (
  SELECT
    cat.name AS category,
    string_agg(sc.name, ', '::text ORDER BY sc.name) AS subcategory,
    bo.name AS brand_owner,
    b.name AS brand,
    s.name AS sub_brand,
    p.name,
    p.id
  FROM
    products p
    LEFT JOIN sub_brands s ON p.sub_brand_id = s.id
    LEFT JOIN brands b ON s.brand_id = b.id
    LEFT JOIN companies bo ON b.brand_owner_id = bo.id
    LEFT JOIN categories cat ON p.category_id = cat.id
    LEFT JOIN products_subcategories ps ON ps.product_id = p.id
    LEFT JOIN subcategories sc ON ps.subcategory_id = sc.id
  GROUP BY
    cat.name,
    bo.name,
    b.name,
    p.name,
    s.name,
    p.description,
    p.id
)
SELECT
  pr.id,
  ap.category,
  ap.subcategory,
  m.name AS manufacturer,
  ap.brand_owner,
  ap.brand,
  ap.sub_brand,
  ap.name,
  string_agg(c.review, ', '::text) AS reviews,
  string_agg((c.rating::double precision / 2::double precision)::text, ', '::text) AS ratings,
  pr.username
FROM
  check_ins c
  LEFT JOIN agg_products ap ON ap.id = c.product_id
  LEFT JOIN companies m ON c.manufacturer_id = m.id
  LEFT JOIN profiles pr ON c.created_by = pr.id
GROUP BY
  pr.id,
  pr.username,
  ap.category,
  ap.subcategory,
  m.name,
  ap.brand_owner,
  ap.brand,
  ap.sub_brand,
  ap.name,
  ap.id;

GRANT ALL ON TABLE public.csv_export TO authenticated;

GRANT ALL ON TABLE public.csv_export TO postgres;

GRANT ALL ON TABLE public.csv_export TO anon;

GRANT ALL ON TABLE public.csv_export TO service_role;

CREATE OR REPLACE FUNCTION public.fnc__export_data ()
  RETURNS SETOF csv_export
  LANGUAGE 'plpgsql'
  COST 100 VOLATILE PARALLEL UNSAFE ROWS 1000
  AS $BODY$
BEGIN
  RETURN query (
    SELECT
      *
    FROM csv_export
    WHERE
      id = auth.uid ());
END;
$BODY$;

ALTER FUNCTION public.fnc__export_data () OWNER TO postgres;

GRANT EXECUTE ON FUNCTION public.fnc__export_data () TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.fnc__export_data () TO anon;

GRANT EXECUTE ON FUNCTION public.fnc__export_data () TO authenticated;

GRANT EXECUTE ON FUNCTION public.fnc__export_data () TO postgres;

GRANT EXECUTE ON FUNCTION public.fnc__export_data () TO service_role;

