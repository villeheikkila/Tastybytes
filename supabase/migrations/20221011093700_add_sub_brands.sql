-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public.sub_brands
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    name text COLLATE pg_catalog."default",
    brand_id bigint NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by uuid,
    CONSTRAINT sub_brand_pkey PRIMARY KEY (id),
    CONSTRAINT sub_brands_brand_id_name_key UNIQUE (brand_id, name),
    CONSTRAINT sub_brands_brand_id_fkey FOREIGN KEY (brand_id)
        REFERENCES public.brands (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT sub_brands_created_by_fkey FOREIGN KEY (created_by)
        REFERENCES public.profiles (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE SET NULL
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.sub_brands
    OWNER to postgres;

GRANT ALL ON TABLE public.sub_brands TO anon;

GRANT ALL ON TABLE public.sub_brands TO authenticated;

GRANT ALL ON TABLE public.sub_brands TO postgres;

GRANT ALL ON TABLE public.sub_brands TO service_role;
CREATE INDEX IF NOT EXISTS sub_brand_name_idx
    ON public.sub_brands USING gist
    (name COLLATE pg_catalog."default" gist_trgm_ops)
    TABLESPACE pg_default;
CREATE POLICY "Enable delete only for admin"
    ON public.sub_brands
    AS PERMISSIVE
    FOR DELETE
    TO public
    USING (fnc__is_admin(auth.uid()));
CREATE POLICY "Enable insert for authenticated users only"
    ON public.sub_brands
    AS PERMISSIVE
    FOR INSERT
    TO authenticated
    WITH CHECK (true);
CREATE POLICY "Sub-brands are viewable by everyone."
    ON public.sub_brands
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);

CREATE TRIGGER stamp_created_by
    AFTER INSERT
    ON public.sub_brands
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__stamp_created_by();

REVOKE ALL ON TABLE public.brands FROM anon;
REVOKE ALL ON TABLE public.brands FROM postgres;
REVOKE ALL ON TABLE public.brands FROM service_role;
GRANT ALL ON TABLE public.brands TO anon;

GRANT ALL ON TABLE public.brands TO service_role;

GRANT ALL ON TABLE public.brands TO postgres;

REVOKE ALL ON TABLE public.check_in_reactions FROM anon;
REVOKE ALL ON TABLE public.check_in_reactions FROM postgres;
REVOKE ALL ON TABLE public.check_in_reactions FROM service_role;
GRANT ALL ON TABLE public.check_in_reactions TO anon;

GRANT ALL ON TABLE public.check_in_reactions TO service_role;

GRANT ALL ON TABLE public.check_in_reactions TO postgres;

REVOKE ALL ON TABLE public.check_ins FROM anon;
REVOKE ALL ON TABLE public.check_ins FROM postgres;
REVOKE ALL ON TABLE public.check_ins FROM service_role;
GRANT ALL ON TABLE public.check_ins TO service_role;

GRANT ALL ON TABLE public.check_ins TO anon;

GRANT ALL ON TABLE public.check_ins TO postgres;
