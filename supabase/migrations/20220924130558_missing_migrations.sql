-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public."sub-brand"
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    short_text text COLLATE pg_catalog."default",
    brand_id bigint NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by uuid,
    CONSTRAINT "sub-brand_pkey" PRIMARY KEY (id),
    CONSTRAINT "sub-brands_brand_id_name_key" UNIQUE (brand_id, short_text),
    CONSTRAINT "sub-brands_brand_id_fkey" FOREIGN KEY (brand_id)
        REFERENCES public.brands (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT "sub-brands_created_by_fkey" FOREIGN KEY (created_by)
        REFERENCES public.profiles (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE SET NULL
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."sub-brand"
    OWNER to postgres;

ALTER TABLE IF EXISTS public."sub-brand"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."sub-brand" TO authenticated;

GRANT ALL ON TABLE public."sub-brand" TO anon;

GRANT ALL ON TABLE public."sub-brand" TO service_role;

GRANT ALL ON TABLE public."sub-brand" TO postgres;
CREATE INDEX IF NOT EXISTS "sub-brand_name_idx"
    ON public."sub-brand" USING gist
    (short_text COLLATE pg_catalog."default" gist_trgm_ops)
    TABLESPACE pg_default;
CREATE POLICY "Enable delete only for admin"
    ON public."sub-brand"
    AS PERMISSIVE
    FOR DELETE
    TO public
    USING (fnc__is_admin(auth.uid()));
CREATE POLICY "Enable insert for authenticated users only"
    ON public."sub-brand"
    AS PERMISSIVE
    FOR INSERT
    TO authenticated
    WITH CHECK (true);
CREATE POLICY "Enable update only for admin"
    ON public."sub-brand"
    AS PERMISSIVE
    FOR UPDATE
    TO public
    USING (fnc__is_admin(auth.uid()))
    WITH CHECK (fnc__is_admin(auth.uid()));
CREATE POLICY "Sub-brands are viewable by everyone."
    ON public."sub-brand"
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);

CREATE TRIGGER stamp_created_by
    AFTER INSERT
    ON public."sub-brand"
    FOR EACH ROW
    EXECUTE FUNCTION public.tg__stamp_created_by();

DROP TABLE IF EXISTS public."sub-brands" CASCADE;

DROP TABLE IF EXISTS public.reactions CASCADE;

ALTER TABLE IF EXISTS public.products DROP COLUMN IF EXISTS manufacturer_id;

ALTER TABLE IF EXISTS public.products
    ALTER COLUMN id SET INCREMENT 1 RESTART SET START 1 SET MINVALUE 1 SET MAXVALUE 2147483647 SET CACHE 1;
ALTER TABLE IF EXISTS public.products DROP CONSTRAINT IF EXISTS products_manufacturer_id_fkey;

REVOKE ALL ON TABLE public.companies FROM authenticated;
REVOKE ALL ON TABLE public.companies FROM postgres;
REVOKE ALL ON TABLE public.companies FROM service_role;
GRANT ALL ON TABLE public.companies TO authenticated;

GRANT ALL ON TABLE public.companies TO service_role;

GRANT ALL ON TABLE public.companies TO postgres;

ALTER TABLE IF EXISTS public.companies
    ALTER COLUMN id SET INCREMENT 1 RESTART SET START 1 SET MINVALUE 1 SET MAXVALUE 2147483647 SET CACHE 1;

ALTER TABLE IF EXISTS public.companies
    RENAME id TO name;

ALTER TABLE public.companies
    ALTER COLUMN name TYPE short_text COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.companies
    ALTER COLUMN name DROP IDENTITY;

ALTER TABLE IF EXISTS public.companies
    ALTER COLUMN name SET STORAGE EXTENDED;

REVOKE ALL ON TABLE public.check_in_comments FROM authenticated;
REVOKE ALL ON TABLE public.check_in_comments FROM postgres;
REVOKE ALL ON TABLE public.check_in_comments FROM service_role;
GRANT ALL ON TABLE public.check_in_comments TO authenticated;

GRANT ALL ON TABLE public.check_in_comments TO service_role;

GRANT ALL ON TABLE public.check_in_comments TO postgres;

ALTER TABLE IF EXISTS public.check_in_comments
    ALTER COLUMN id SET INCREMENT 1 RESTART SET START 1 SET MINVALUE 1 SET MAXVALUE 2147483647 SET CACHE 1;

ALTER TABLE IF EXISTS public.products_subcategories
    ALTER COLUMN product_id SET INCREMENT 1 RESTART SET START 1 SET MINVALUE 1 SET MAXVALUE 2147483647 SET CACHE 1;

ALTER TABLE IF EXISTS public.locations
    ALTER COLUMN id SET INCREMENT 1 RESTART SET START 1 SET MINVALUE 1 SET MAXVALUE 2147483647 SET CACHE 1;

ALTER TABLE IF EXISTS public.categories
    ALTER COLUMN id SET INCREMENT 1 RESTART SET START 1 SET MINVALUE 1 SET MAXVALUE 2147483647 SET CACHE 1;

REVOKE ALL ON TABLE public.profiles FROM authenticated;
REVOKE ALL ON TABLE public.profiles FROM postgres;
REVOKE ALL ON TABLE public.profiles FROM service_role;
GRANT ALL ON TABLE public.profiles TO authenticated;

GRANT ALL ON TABLE public.profiles TO service_role;

GRANT ALL ON TABLE public.profiles TO postgres;

ALTER TABLE IF EXISTS public.profiles
    ADD CONSTRAINT check_username CHECK (length(username) >= 2 AND length(username) <= 24 AND username ~ '^[a-zA-Z]([_.]?[a-zA-Z0-9])+$'::citext::text);

REVOKE ALL ON TABLE public.check_in_tagged_profiles FROM authenticated;
REVOKE ALL ON TABLE public.check_in_tagged_profiles FROM postgres;
REVOKE ALL ON TABLE public.check_in_tagged_profiles FROM service_role;
GRANT ALL ON TABLE public.check_in_tagged_profiles TO authenticated;

GRANT ALL ON TABLE public.check_in_tagged_profiles TO service_role;

GRANT ALL ON TABLE public.check_in_tagged_profiles TO postgres;

ALTER TABLE IF EXISTS public.check_in_reactions DROP COLUMN IF EXISTS reaction_id;

ALTER TABLE IF EXISTS public.check_in_reactions
    ALTER COLUMN id SET INCREMENT 1 RESTART SET START 1 SET MINVALUE 1 SET MAXVALUE 2147483647 SET CACHE 1;

ALTER TABLE IF EXISTS public.check_in_reactions
    ADD COLUMN reaction reactions NOT NULL;
ALTER TABLE IF EXISTS public.check_in_reactions DROP CONSTRAINT IF EXISTS check_in_reactions_reaction_id_fkey;

ALTER TABLE IF EXISTS public.brands
    ALTER COLUMN id SET INCREMENT 1 RESTART SET START 1 SET MINVALUE 1 SET MAXVALUE 2147483647 SET CACHE 1;

ALTER TABLE IF EXISTS public.brands
    RENAME id TO name;

ALTER TABLE public.brands
    ALTER COLUMN name TYPE short_text COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.brands
    ALTER COLUMN name DROP IDENTITY;

ALTER TABLE IF EXISTS public.brands
    ALTER COLUMN name SET STORAGE EXTENDED;

REVOKE ALL ON TABLE public.serving_styles FROM authenticated;
REVOKE ALL ON TABLE public.serving_styles FROM postgres;
REVOKE ALL ON TABLE public.serving_styles FROM service_role;
GRANT ALL ON TABLE public.serving_styles TO authenticated;

GRANT ALL ON TABLE public.serving_styles TO service_role;

GRANT ALL ON TABLE public.serving_styles TO postgres;

ALTER TABLE IF EXISTS public.serving_styles
    ALTER COLUMN id SET INCREMENT 1 RESTART SET START 1 SET MINVALUE 1 SET MAXVALUE 2147483647 SET CACHE 1;

ALTER TABLE IF EXISTS public.check_ins
    ALTER COLUMN id SET INCREMENT 1 RESTART SET START 1 SET MINVALUE 1 SET MAXVALUE 2147483647 SET CACHE 1;

ALTER TABLE IF EXISTS public.check_ins
    RENAME id TO rating;

ALTER TABLE public.check_ins
    ALTER COLUMN rating TYPE rating;
ALTER TABLE IF EXISTS public.check_ins
    ALTER COLUMN rating DROP NOT NULL;

ALTER TABLE IF EXISTS public.check_ins
    ALTER COLUMN rating DROP IDENTITY;

ALTER TABLE IF EXISTS public.check_ins
    ALTER COLUMN rating SET STORAGE MAIN;

ALTER TABLE IF EXISTS public.subcategories
    ALTER COLUMN id SET INCREMENT 1 RESTART SET START 1 SET MINVALUE 1 SET MAXVALUE 2147483647 SET CACHE 1;

-- Type: reactions

-- DROP TYPE IF EXISTS public.reactions;

CREATE TYPE public.reactions AS ENUM
    ('toast', 'like', 'dislike', 'love', 'hate');

ALTER TYPE public.reactions
    OWNER TO postgres;

DROP VIEW IF EXISTS public.csv_export;
